# git search
# https://stackoverflow.com/questions/26433561/how-to-search-on-github-to-get-exact-string-matches-including-special-character

google     : "your_string_to_search" site:https://github.com
url        : google.com/search?q=Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetNeighbor.AddressFamily+site:github.com
PowerShell : start www.google.com/search?q=Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetNeighbor.AddressFamily+site:github.com

##############################
### PowerShell One-Liners  ###
##############################
# These one-line commands are intended to be used in a PowerShell session. They are written so that you can get maximum benefit, often with minimum typing and without having to write a script. 
# Because these are intended for use at the command prompt aliases are allowed and encouraged. I’ll assume you can figure out the alias if you don’t recognize it.
# As written, many of them should not be copied and pasted into a script without reworking. Note that some of these expressions will work on Windows PowerShell and PowerShell 7 or require a Windows platform. 
# You’ll have to try them out for yourself and adjust as necessary. You’ll need to add things like parameters and error handling. It may also be easier to break some of these into several steps when used in a script.


# firefox tabs to group in windows taskbar
# https://superuser.com/questions/645038/show-firefox-tabs-or-tab-groups-on-windows-taskbar?rq=1
# about:config >> browser.taskbar.previews.enable : false - group tabs | true: ungroup tabs

# https://superuser.com/questions/1683237/how-to-configure-the-never-combine-taskbar-buttons-setting-in-windows-11
The version information of the Windows 11 I am using is as follows: Microsoft Windows [Version 10.0.22621.1848]. 
In this system, I was able to solve the problem without using any additional programs. This link was helpful. However, some of the code in the link wraps to the second line, causing an error in the execution of the code. I suggest combining the overflowing code into a single line. I have compiled the following code for you. After launching Windows PowerShell with admin privileges, if you run the code line by line, the desired option, "Never Combine," will be implemented.

Set-ExecutionPolicy -ExecutionPolicy Bypass -Scope LocalMachine -Force

** Restore the Classic Taskbar in Windows 11

New-ItemProperty -Path "HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Shell\Update\Packages" -Name "UndockingDisabled" -PropertyType DWord -Value "00000001";
Set-ItemProperty -Path "HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Shell\Update\Packages" -Name "UndockingDisabled" -Value "00000001";

** Disable Taskbar / Cortana Search Box on Windows 11

New-ItemProperty -Path "HKCU:\Software\Microsoft\Windows\CurrentVersion\Search" -Name "SearchboxTaskbarMode" -PropertyType DWord -Value "00000000";
Set-ItemProperty -Path "HKCU:\Software\Microsoft\Windows\CurrentVersion\Search" -Name "SearchboxTaskbarMode" -Value "00000000";

** Ungroup Taskbar Icons / Enable Text Labels in Windows 11

New-ItemProperty -Path "HKCU:\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\Explorer" -Name "NoTaskGrouping" -PropertyType DWord -Value "00000001";
Set-ItemProperty -Path "HKCU:\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\Explorer" -Name "NoTaskGrouping" -Value "00000001";

Restart Explorer to see the changes
./taskkill /f /im explorer.exe;
./CMD /Q /C START /REALTIME explorer.exe;



##############################
# C:\home\apps\Git\bin\bash.exe -c 'find /c/home/src -name "*Native*"'
# bash.exe exists in C:\Windows\System32, to not place C:\home\apps\Git\bin at the begging of PATH I created C:\home\src\bin\bash.bat and placed C:\home\src\bin, so now just bash works fine
# bash -c 'find /c/home/src -name "*Native*"'
# bash -c 'find /c/Program\ Files/Intel -type f -name "*.exe" -or -name "*.com" -or -name "*sys" -or -name "*INF"'
# bash -c 'find /c/Program\ Files/Common\ Files/Intel/WirelessCommon -type f'

bash -c 'find /c/Program\ Files/Common\ Files/Intel/WirelessCommon -type f -exec ls -lh {} \;'

PS C:\Users\kirae> bash -c "find 'C:/Program Files/Common Files/Intel/WirelessCommon' -type f -exec ls -lh {} \;"
-rwxr-xr-x 1 kirae 197121 53K Aug 19  2019 'C:/Program Files/Common Files/Intel/WirelessCommon/CustomUIResource.dll'
-rwxr-xr-x 1 kirae 197121 1.7M Aug 19  2019 'C:/Program Files/Common Files/Intel/WirelessCommon/libeay32.dll'
-rwxr-xr-x 1 kirae 197121 257K Aug 19  2019 'C:/Program Files/Common Files/Intel/WirelessCommon/PsRegApi.dll'
-rwxr-xr-x 1 kirae 197121 301K Aug 19  2019 'C:/Program Files/Common Files/Intel/WirelessCommon/TraceAPI.dll'


# Links
New-Item -ItemType SymbolicLink -Path "C:\home\src\PSProfileLoad\Exec-Cmd.ps1" -Target "C:\home\src\Scripts\Functions\Exec-Cmd.ps1"

-rwxr-xr-x 1 kirae 197121 53K Aug 19  2019 '/c/Program Files/Common Files/Intel/WirelessCommon/CustomUIResource.dll'
-rwxr-xr-x 1 kirae 197121 1.7M Aug 19  2019 '/c/Program Files/Common Files/Intel/WirelessCommon/libeay32.dll'
-rwxr-xr-x 1 kirae 197121 257K Aug 19  2019 '/c/Program Files/Common Files/Intel/WirelessCommon/PsRegApi.dll'
-rwxr-xr-x 1 kirae 197121 301K Aug 19  2019 '/c/Program Files/Common Files/Intel/WirelessCommon/TraceAPI.dll'

###################################
# Native Module to run bash commands | https://github.com/mklement0/Native

ins 
ins @"
>> C:\home\apps\Git\bin\bash.exe -c 'find /c/home/src -name "*Native*" '
>> "@

###############################
####  Windows ps1 scripts  ####
###############################
ls 'C:\Windows\diagnostics\system\'
ls 'C:\Windows\diagnostics\system\Video\utils_SetupEnv.ps1'

######################
###     Aliases    ###
######################
PS C:\home\src> get-alias  |? DisplayName -match 'format'

CommandType     Name                                               Version    Source
-----------     ----                                               -------    ------
Alias           fc -> Format-Custom
Alias           fhx -> Format-Hex                                  7.0.0.0    Microsoft.PowerShell.Utility
Alias           fl -> Format-List
Alias           fp -> Format-Percent                               2.45.0     PSScriptTools
Alias           fs -> Format-String                                2.45.0     PSScriptTools
Alias           ft -> Format-Table
Alias           fv -> Format-Value                                 2.45.0     PSScriptTools
Alias           fw -> Format-Wide
Alias           gfv -> Get-FormatView                              2.45.0     PSScriptTools
Alias           nfx -> New-PSFormatXML                             2.45.0     PSScriptTools

			get-alias  |? DisplayName -match '^. ->'

CommandType     Name                                               Version    Source
-----------     ----                                               -------    ------
Alias           ? -> Where-Object
Alias           % -> ForEach-Object
Alias           h -> Get-History
Alias           r -> Invoke-History

			get-alias  |? DisplayName -match '^. ->' | ft -view source

   Source:

Name                 Definition
----                 ----------
?                    Where-Object
%                    ForEach-Object
h                    Get-History
r                    Invoke-History


			get-alias  |? DisplayName -match '^. ->' | ft -view simple

Name ResolvedCommandName
---- -------------------
?    Where-Object
%    ForEach-Object
h    Get-History
r    Invoke-History




			get-alias  |? DisplayName -match '^. ->' | ft -view AliasInfo

CommandType     DisplayName
-----------     -----------
Alias           ? -> Where-Object
Alias           % -> ForEach-Object
Alias           h -> Get-History
Alias           r -> Invoke-History
			


########################################
########################################
#######                         ########
#######   install PowerShell    ########
#######                         ########
########################################
########################################

https://learn.microsoft.com/en-us/powershell/scripting/install/installing-powershell-on-windows

PS C:\Users\Administrator\Downloads> msiexec.exe /i PowerShell-7.3.0-win-x64.msi USE_MU=0 ENABLE_MU=0

    USE_MU - This property has two possible values:
        1 (default) - Opts into updating through Microsoft Update, WSUS, or Configuration Manager
        0 - Do not opt into updating through Microsoft Update, WSUS, or Configuration Manager
    ENABLE_MU
        1 (default) - Opts into using Microsoft Update for Automatic Updates
        0 - Do not opt into using Microsoft Update

# repair
msiexec.exe /fmu <PowerShell.msi> USE_MU=1 ENABLE_MU=1		

###########################################################
# move Windows 11 taskbar to the top
https://www.youtube.com/watch?v=0lbh92l2OPM
registry : HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Explorer\StuckRects3
Edit as hex
Change 03 >> 01 in the 2nd row 6th column


#############################################################
# Enable execution of scripts
# Error: "execution of scripts is disabled on this system."
#
# https://stackoverflow.com/questions/4037939/powershell-says-execution-of-scripts-is-disabled-on-this-system

# As an Administrator, you can set the execution policy by typing this into your PowerShell window:
Set-ExecutionPolicy RemoteSigned
# You can bypass this policy for a single file by adding -ExecutionPolicy Bypass when running PowerShell
powershell -ExecutionPolicy Bypass -File script.ps1

PS C:\Users\alexe> get-executionpolicy
RemoteSigned


### Check if account has admin rights
### Based on the function Test-IsElevated of PSScriptTools module

  try { (New-Object Security.Principal.WindowsPrincipal ([Security.Principal.WindowsIdentity]::GetCurrent()) ).IsInRole([Security.Principal.WindowsBuiltinRole]::Administrator) } 
  catch { try { if ( (id -u) -eq 0) {$True} else {$False} } catch { Write-Error "Uknown OS: $_" } }
  
					  
#######################################################################################
# run process, append error and output to the same log

############################################################
### exec-cmd-simple - does not open new console window on $avpexe in contrast with pexe2
# $avpexe='C:\Program Files (x86)\Kaspersky Lab\Kaspersky Total Security 21.3\avp.exe'
# $avpcom='C:\Program Files (x86)\Kaspersky Lab\Kaspersky Total Security 21.3\avp.com'
# exec-cmd-simple $avpexe /? -verbose
function exec-cmd-simple( [string] $exe, [switch]$verbose, [switch] $value, [switch] $dry, [switch] $raw, [switch] $help,
	[switch]$seconds, [switch]$msec, [switch]$minutes, [switch]$hours, [switch]$days, [switch]$ticks,
    [switch] $x1, [switch] $x2, [switch] $x3, [switch] $x4, [switch]$trim) {
	$e=[char]27; $sc="$e[#p"; $rc="$e[#q"; $red="$e[1;31m";  $grn="$e[1;32m"; $ylw="$e[1;33m";  $blu="$e[0;34m"; $mgt="`e[1;35m"; $cyn="`e[1;36m"; $gry="`e[1;37m"; $bold="$e[1m"; $bold_off="$e[22m"
	$fmt_var="${grn}{0,-15}$gry : ${ylw}${bold}{1}"	
	
	if (! $exe -or $help) {
	Write-Host "${blu}Usage${gry}:
	${cyn}$($MyInvocation.MyCommand)${gry} <exe> [-value] [-dry] [-help] [-verbose] [-value] [-(trim|raw|x1|x2|x3|x4)] [-(seconds|minutes|hours|days|ticks)]
${blu}Example${gry}:
	`$autorunsc='C:\home\apps\SysinternalsSuite\autorunsc64.exe'
	${cyn}$($MyInvocation.MyCommand)${gry} `$autorunsc /accepteula -a '*' -c -h -s -nobanner
    `$Global:CMD_OUT | select -first 12 | ConvertFrom-Csv | ft -auto
	`$avpexe='C:\Program Files (x86)\Kaspersky Lab\Kaspersky Total Security 21.3\avp.exe'
	${cyn}$($MyInvocation.MyCommand)${gry} `$avpexe /? -verbose -value"
	   return
	}

	if ( Test-Path $exe ) {
		[string[]] $exe_args=$args
	} else {
		Write-Error "Can't find `$exe $exe"
		return
	}
	$exe_watch=[System.Diagnostics.Stopwatch]::New()
	$exe_watch.Start()
	Remove-Variable CMD_OUT -scope global 2>$null
	if ($x1) {
		# https://stackoverflow.com/questions/8097354/how-do-i-capture-the-output-into-a-variable-from-an-external-process-in-powershe/35980675#35980675
		$Global:CMD_SCRIPT={ & $exe $exe_args | Out-String -Stream }
	} elseif ($x2) {
		$Global:CMD_SCRIPT={ $(& $exe $exe_args | Out-String -Stream ) -split [environment]::NewLine }
	} elseif ($x3) {
		# Note: Adds a trailing newline
		$Global:CMD_SCRIPT={ & $exe $exe_args | Out-String }
	} elseif ($x4) {
		$Global:CMD_SCRIPT={ & $exe $exe_args | Out-String -nonewline }
	} elseif ($raw) {
		$Global:CMD_SCRIPT={ & $exe $exe_args }
	} elseif ($trim) {
		$Global:CMD_SCRIPT={ & $exe $exe_args |% { [regex]::replace($_,"[^\x20-\x7F]","").Trim() } |? { $_ } }
	} else {
		$Global:CMD_SCRIPT={ & $exe $exe_args |% { [regex]::replace($_,"[^\x20-\x7F]","") } }
	}


	if ($dry) { 
		Write-Host "Dry mode" 
		"script : $Global:CMD_SCRIPT.ToString()" | Write-Host
		" exe   : $exe `"$($exe_args -join ('`", `"'))`"" | Write-Host
		Write-Host $( $fmt_var -f 'SCRIPT', $Global:CMD_SCRIPT.ToString() )
		$verbose=$true
	} else { 
		Write-Host -NoNewLine $( $fmt_var -f "CMD ARGS[$($exe_args.Count)]","$exe $($exe_args -join ' ')" ) "$blu >> "
		$Global:CMD_OUT=& $Global:CMD_SCRIPT
		if ($Global:CMD_OUT -is [array]) {
			Write-Host '$Global:CMD_OUT', "array$sc$gry[$cyn$($Global:CMD_OUT.Count)$gry]$rc"
		} else {
			$Global:CMD_OUT=@($Global:CMD_OUT -split([environment]::NewLine))
			Write-Host '$Global:CMD_OUT', "string$sc${gry}($cyn$($Global:CMD_OUT.Length)$gry) $cyn$($tmpArr.Count)$rc lines"
		}
	}
	
	if ($value) { $Global:CMD_OUT }
    if ($verbose -or $ticks -or $msec -or $seconds -or $minutes -or $hours -or $days) {
		if ( $Global:TestDuration ) { $dura=$Global:TestDuration } else { $dura=$exe_watch.Elapsed }
		$tot=$dura.TotalSeconds
		if ( $ticks ) { $o="$cyn{0:f0}${gry} ticks" -f $dura.Ticks }
		elseif ( $msec ) { $o="$cyn{0:f0}${gry} ms" -f $dura.TotalMilliSeconds }
		elseif ( $seconds ) { $o="$cyn{0:f0}${gry} s" -f $tot }
		elseif ( $minutes ) { $o="$cyn{0:f1}${gry} m" -f $dura.TotalMinutes }
		elseif ( $hours ) { $o="$cyn{0:f1}${gry} h" -f $dura.TotalHours }
		elseif ( $days ) { $o="$cyn{0:f2}${gry} d" -f $dura.TotalDays }
		elseif ( $tot -lt 0.1 ) { $o="$cyn{0:f0}${gry} ms" -f $dura.TotalMilliSeconds }
		elseif ( $tot -lt 1 ) { $o="$cyn{0:f3}${gry} s" -f $tot }
		elseif ( $tot -lt 10 ) { $o="$cyn{0:f2}${gry} s" -f $tot }
		elseif ( $tot -lt 100 ) { $o="$cyn{0:f1}${gry} s" -f $tot }
		elseif ( $tot -lt 500 ) { $o="$cyn{0:f0}${gry} s" -f $tot }
		elseif ( $tot -lt 3600 ) { $o="$cyn{0,2:d2}$sc${gry}:$rc{1,2:d2}" -f $dura.Minutes,$dura.Seconds }
		elseif ( $tot -lt 86400 ) { $o="$cyn{0,2:d2}$sc${gry}:$rc{1,2:d2}$sc${gry}:$rc{2,2:d2}" -f $dura.Hours,$dura.Minutes,$dura.Seconds }
		else { $o="$cyn{0:f1}${gry} h" -f $dura.TotalHours }
		Write-Host $( $fmt_var -f 'Elapsed', $o )
    }
	if (!$value -and $verbose ) {
		if ( $Global:CMD_OUT.Count ) {
			for($lno,$prnt=1,@(); $lno -le $Global:CMD_OUT.Count; $lno++) { 
				if ($prnt.Count -lt 3 -or $lno -eq $Global:CMD_OUT.Count ) { 
					Write-Host $( "${grn}{0,-5} ${blu}<${ylw}{1}${blu}>" -f $lno, $Global:CMD_OUT[$lno-1] ) 
					$prnt+=@($lno)
				}
			}
		} else {
			Write-Host "$gry<${blu}No output$gry>"
		}	
	}
}

############################################################
### Exec-Cmd - executes in child context
## see netsh-trace.ps1 | C:\home\src\Scripts\netsh-trace.ps1 Exec-Cmd-Test
function Exec-Cmd() {
	if ( $MyInvocation.InvocationName -in $Global:ShowStack ) {  Write-Host $( Get-PSCallStack | Out-String )  }
	Write-Host -NoNewLine "$gry$((Get-Date).ToString('yyyy-MM-dd HH:mm:ss'))"
	$MyCaller=$(if ($MyInvocation.ScriptLineNumber) {"$(Split-Path $MyInvocation.ScriptName -Leaf):$($MyInvocation.ScriptLineNumber)"} )
	$MyLine=$($MyInvocation.Line -replace "^.*[;\s]*$($MyInvocation.InvocationName)\s+" -replace '\s+',' ').Trim()
	$MyName=$MyInvocation.InvocationName
	Write-Host -NoNewLine ${gry},"[${blu}$($MyCaller -replace ':',"${gry}:${cyn}")","${ylw}${MyName}()${gry}]"
	[bool] $init=$false
	switch ($args[0]) {
		{ $_ -in $null,'start','done' } { 
			if ($args[0] -eq 'done') {
				if ( $Global:CmdOutput.Count ) { 
					$Global:Result=@()
					for ( $no=0; $no -lt $Global:Cmd.Count; $no++) {
						$Global:Result+=@( [pscustomobject] @{
							No=$No; Command=$Global:Cmd[$no]; Args=$Global:CmdArgs[$no]; E=$Global:CmdError[$no]					
							Output=$Global:CmdOutput[$no]; Line=$Global:CmdLine[$no]; Caller=$Global:CmdCaller[$no] } )
					}
					Write-Host ${blu}, "See results in global arrays:", "${grn}`$Global:Cmd${gry}[${cyn}$($Global:Cmd.Count)${gry}]${gry},", 
						"${grn}`$Global:CmdArgs${gry}[${cyn}$($Global:CmdArgs.Count)${gry}]${gry},",
						"${grn}`$Global:CmdCaller${gry}[${cyn}$($Global:CmdCaller.Count)${gry}]${gry},",
						"${grn}`$Global:CmdLine${gry}[${cyn}$($Global:CmdLine.Count)${gry}]${gry},",
						"${grn}`$Global:CmdOutput${gry}[${cyn}$($Global:CmdOutput.Count)${gry}]${gry},",
						"${grn}`$Global:CmdError${gry}[${cyn}$($Global:CmdError.Count)${gry}]${gry},",
						"${grn}`$Global:Result${gry}[${cyn}$($Global:Result.Count)${gry}]${gry}"
					$Global:Result | 
						ft No,
						   @{N='Caller';E={ ${blu}+($_.Caller -replace ':',"${gry}:${cyn}") }}, Line,
						   @{N='CmdType';E={ ($_.Command.GetType()).Name}},
						   Command,Args, 
						   @{N='Output';E={ $(if($_.E){"${red}"}else{"${blu}"})+($_.Output -replace "[`r`n]+",'\n' -replace '\s+',' ' -replace "(?<=.{200}).+","..")}}
					return
				} else {
					Write-Host ${gry}, 'There are no executions in', ${blu}, '$Global:Cmd'
				}
			} else {
				$init=$true
			}
			break
		}
		default {
			$Global:LastCmd=$args[0]; 
			$Global:Cmd+=@( $Global:LastCmd )
			$Global:CmdCaller+=@( $MyCaller )
			$Global:CmdLine+=@( $MyLine )
			Write-Host -NoNewLine $gry,"[${red}$($Global:Cmd.Count)${gry}]"
			Write-Host -NoNewLine "", $( "${gry}<${blu}[${mgt}{0}${blu}]${red}{1}${gry}>" -f $($Global:LastCmd.GetType()).Name,$Global:LastCmd )
			if ($args.Count -gt 1) { 
				$Global:LastCmdArgs=$args[1..($args.Count-1)]; $Global:CmdArgs+=@( $Global:LastCmdArgs )
				Write-Host -NoNewLine "", $( $Global:LastCmdArgs | % { "${gry}<${blu}[${cyn}{0}${blu}]$ylw{1}${gry}>" -f $($_.GetType()).Name,$_ } )
			} else { 
				$Global:LastCmdArgs=@(); $Global:CmdArgs+=@( $null ) 
			}
			Write-Host -NoNewLine $gry, ".."
			try   { 
				$Global:LastCmdOutput=& $Global:LastCmd @Global:LastCmdArgs 2>&1 3>&1 4>&1 5>&1 6>&1; $Global:LastExecStatus=$? } 
			catch { $Global:LastCmdOutput=$_ -replace '\s+',' '; $Global:LastExecStatus=$false;  }
			if ($Global:LastExecStatus) { $Global:CmdError+=@(0); Write-Host -NoNewLine $grn,"ok" } else { $Global:CmdError+=@(1); Write-Host -NoNewLine $red,"err" }
			$Global:CmdOutput+=,@( $Global:LastCmdOutput )
			Write-Host "${gry}:",($Global:LastCmdOutput -replace "[`r`n]+",'\n' -replace '\s+',' ' -replace "(?<=.{80}).+",".." ) 
		}
	}
	if ( $init -or $Global:Cmd -isnot [array] -or $Global:CmdArgs -isnot [array] -or $Global:CmdCaller -isnot [array] -or $Global:CmdLine -isnot [array] -or $Global:CmdOutput -isnot [array] -or $Global:CmdError -isnot [array] ) {
		Write-Host $red, Init, $blu'$Global:Cmd $Global:CmdArgs $Global:CmdCaller $Global:CmdLine $Global:CmdOutput $Global:CmdError'
		$Global:Cmd,$Global:CmdArgs,$Global:CmdCaller,$Global:CmdLine,$Global:CmdOutput,$Global:CmdError=@(),@(),@(),@(),@(),@()
	}
}

############################################################
### pexec - does not open new console window on $avpexe in contrast with pexe2
# $avpexe='C:\Program Files (x86)\Kaspersky Lab\Kaspersky Total Security 21.3\avp.exe'
# $avpcom='C:\Program Files (x86)\Kaspersky Lab\Kaspersky Total Security 21.3\avp.com'
# pexec $avpexe /? -verbose
function pexec([string] $exe, [switch] $help, [switch] $trim, [switch] $dry, [switch] $verbose, [switch] $value, 
    [switch]$seconds, [switch]$msec, [switch]$minutes, [switch]$hours, [switch]$days, [switch]$ticks ) {
    if (!$red) {
		$e=[char]27; $sc="$e[#p"; $rc="$e[#q"; $red="$e[1;31m";  $grn="$e[1;32m"; $ylw="$e[1;33m";  $blu="$e[0;34m"; $mgt="`e[1;35m"; $cyn="`e[1;36m"; $gry="`e[1;37m"; $bold="$e[1m"; $bold_off="$e[22m"
	}
	$fmt_var="${grn}{0,-15}$gry : ${ylw}${bold}{1}"	
	if ($help) {
	Write-Host "${blu}Usage${gry}:
	${cyn}pexec${gry} <exe> [-value] [-dry] [-help] [-verbose]
${blu}Example${gry}:
	`$autorunsc='C:\home\apps\SysinternalsSuite\autorunsc64.exe'
	${cyn}$($MyInvocation.MyCommand)${gry} $autorunsc /accepteula -a * -c -h -s -nobanner '*'
    `$Global:CMD_OUT | select -first 12 | ConvertFrom-Csv | ft -auto
	`$avpexe='C:\Program Files (x86)\Kaspersky Lab\Kaspersky Total Security 21.3\avp.exe'
	${cyn}$($MyInvocation.MyCommand)${gry} `$avpexe /? -verbose -value"
	   return
	}

	$exename=Split-Path $exe -leaf
	$exe_args=@()
	$exe_args=$args
	$logfile="pexec-"
	$logfile+=$exename -replace '\..*','.log'
	$stdOutLog = "stdout.log"
	$stdErrLog = "stderr.log"
	$myLog = "pexec.log"
	if ($env:Temp) {  $logfile =$env:Temp+'\'+$logfile }
	$Global:ProcessInfo = New-Object System.Diagnostics.ProcessStartInfo
	$Global:ProcessInfo.FileName = "$exe"
	$Global:ProcessInfo.Arguments = $exe_args
	$Global:ProcessInfo.RedirectStandardError = $true
	$Global:ProcessInfo.RedirectStandardOutput = $true
	$Global:ProcessInfo.UseShellExecute = $false
	Get-Date -F 'yyyy-MM-dd mm:hh:ss.fff'   | Out-File $myLog
	" out  : $stdOutLog"      | Out-File $myLog -Append
	" err  : $stdErrLog"      | Out-File $myLog -Append
	" log  : $logfile"        | Out-File $myLog -Append
	" exe  : $exe `"$($exe_args -join ('`", `"'))`""  | Out-File $myLog -Append
	
	if ($verbose) { Get-Content $myLog | Write-Host }

	$Global:StdOut=@()
	$Global:StdErr=@()
	$exe_watch=[System.Diagnostics.Stopwatch]::New()
	$exe_watch.Start()

	Write-Host -NoNewLine $( $fmt_var -f "CMD ARGS[$($exe_args.Count)]", "$exe $sc$cyn`"$rc$($exe_args -join ('$sc$cyn`", `"$rc'))$cyn`"" ) "$blu >> "

	if (-not $Dry) {
		$Global:ProcessDiag = New-Object System.Diagnostics.Process
		$Global:ProcessDiag.StartInfo = $Global:ProcessInfo
		$Global:ProcessDiag.Start()     | Out-File $myLog -Append
		$Global:ProcessDiag.WaitForExit()
		if (! $Global:ProcessDiag.StandardOutput.EndOfStream ) { 
			$Global:StdOut=$Global:ProcessDiag.StandardOutput.ReadToEnd()
		}
		if (! $Global:ProcessDiag.StandardError.EndOfStream ) { 
			$Global:StdErr=$Global:ProcessDiag.StandardError.ReadToEnd()
		}
	}

	if ($Global:StdOut) {
		$Global:CMD_OUT=$Global:StdOut -replace '[^\x20-\x7F\x0a\x0d]','.' -replace '\x0a' -split '\x0d'
		if($trim) {
			$Global:CMD_OUT=$Global:CMD_OUT |% { $_.Trim() } |? { $_ }
		}
	} else { $Global:CMD_OUT=@() }

	Write-Host '$Global:CMD_OUT', "array$sc$gry[$cyn$($Global:CMD_OUT.Count)$gry]$rc"

	$Global:StdErr      | Out-File $stdErrLog
	$Global:StdOut      | Out-File $stdOutLog
	if ($Global:StdErr) {  $Global:StdErr | Out-File $myLog -Append }
	if ($Global:StdOut) {  $Global:StdOut | Out-File $myLog -Append }
	Get-Date -F 'yyyy-MM-dd mm:hh:ss.fff *** Done'   | Out-File $myLog -Append
	Get-Content $myLog        | Out-File $logfile -Append
	"$myLog"       | Out-File $logfile -Append
	if ( $Value ) { 
		if ( $Global:StdErr )  { $Global:StdErr | Write-Error  }  
		$Global:CMD_OUT
	}
    if ($verbose -or $ticks -or $msec -or $seconds -or $minutes -or $hours -or $days) {
		if ( $Global:TestDuration ) { $dura=$Global:TestDuration } else { $dura=$exe_watch.Elapsed }
		$tot=$dura.TotalSeconds
		if ( $ticks ) { $o="$cyn{0:f0}${gry} ticks" -f $dura.Ticks }
		elseif ( $msec ) { $o="$cyn{0:f0}${gry} ms" -f $dura.TotalMilliSeconds }
		elseif ( $seconds ) { $o="$cyn{0:f0}${gry} s" -f $tot }
		elseif ( $minutes ) { $o="$cyn{0:f1}${gry} m" -f $dura.TotalMinutes }
		elseif ( $hours ) { $o="$cyn{0:f1}${gry} h" -f $dura.TotalHours }
		elseif ( $days ) { $o="$cyn{0:f2}${gry} d" -f $dura.TotalDays }
		elseif ( $tot -lt 0.1 ) { $o="{0:f0}${gry} ms" -f $dura.TotalMilliSeconds }
		elseif ( $tot -lt 1 ) { $o="$cyn{0:f3}${gry} s" -f $tot }
		elseif ( $tot -lt 10 ) { $o="$cyn{0:f2}${gry} s" -f $tot }
		elseif ( $tot -lt 100 ) { $o="$cyn{0:f1}${gry} s" -f $tot }
		elseif ( $tot -lt 500 ) { $o="$cyn{0:f0}${gry} s" -f $tot }
		elseif ( $tot -lt 3600 ) { $o="$cyn{0,2:d2}$sc${gry}:$rc{1,2:d2}" -f $dura.Minutes,$dura.Seconds }
		else { $o="$cyn{0,2:d2}$sc${gry}:$rc{1,2:d2}$sc${gry}:$rc{2,2:d2}" -f $dura.Hours,$dura.Minutes,$dura.Seconds }
		Write-Host "Elapsed:", $o
    }
	if (!$value -and $verbose ) {
		if ( $Global:CMD_OUT.Count ) {
			for($lno,$prnt=1,@(); $lno -le $Global:CMD_OUT.Count; $lno++) { 
				if ($prnt.Count -lt 3 -or $lno -eq $Global:CMD_OUT.Count ) { 
					Write-Host $( "${grn}{0,-5} ${blu}<${ylw}{1}${blu}>" -f $lno, $Global:CMD_OUT[$lno-1] ) 
					$prnt+=@($lno)
				}
			}
		} else {
			Write-Host "$gry<${blu}No output$gry>"
		}	
	}
}

##############################
function out-duration ([System.DateTime]$T=(Get-Date), [string]$F='h:m:s', [switch]$init) {
	if ( $init -or !$Global:ST ) {
		$Global:ST=(Get-Date)
	} else {
		$D=$T-$Global:ST
		$Global:Duration=$D
		if( !$F ) {
			if ($D.TotalMilliSeconds -lt 1) { $F="ns" } elseif ($D.TotalMilliSeconds -lt 100) { $F="ms.NN" } elseif ($D.TotalMilliSeconds -lt 1000) { $F="ms.N" }
			elseif ($D.TotalSeconds -lt 10) { $F="s.N" } elseif ($D.TotalMinutes -lt 2) { $F="s" } 
			elseif ($D.TotalHours -lt 1) { $F="m:s" } elseif ($D.TotalHours -gt 78) { $F="d h:m:s" }
		}
		switch ($F) { 'ns' {$F="$($D.TotalMilliSeconds*1000)ns"} 
		   'ms' {$F="{0:f0}ms" } 'ms.N' {$F="{0:f1}ms" } 'ms.NN' {$F="{0:f2}ms" } 'ms.NNN' {$F="{0:f3}ms" } 
		   's' {$F="{1:f0}s" } 's.N' {$F="{1:f1}s" } 's.NN' {$F="{1:f2}s" } 's.NNN' {$F="{1:f3}s" } 
		   'm' {$F="{2:f1}m"} 'h' {$F="{3:f1}h"}  'd' {$F="{4:f1}d"}
		   'm:s' { $F="{6,2:d2}:{5,2:d2}" } 'h:m:s' { $F="{7,2:d2}:{6,2:d2}:{5,2:d2}" }
		   'd:h:m:s' {$F="{8}d {7,2:d2}:{6,2:d2}:{5,2:d2}"} }
		$F -f $D.TotalMilliseconds, $D.TotalSeconds, $D.TotalMinutes, $D.TotalHours, $D.TotalDays, $D.Seconds, $D.Minutes, $D.Hours, $D.Days | Out-Host 
	}
}	

##############################
function pexec2([string] $exe,[switch] $Dry) {
	$exedir=Split-Path $exe -leaf
	$exename=Split-Path $exe -leaf
	$exeargs=@()
	$exeargs=$args
	$logfile=$exename -replace '\..*','.log'
	$stdOutLog = "stdout.log"
	$stdErrLog = "stderr.log"
	$myLog = "pexec.log"
	if ($env:Temp) { 
		$logfile =$env:Temp+'\'+$logfile
		$stdOutLog =$env:Temp+'\'+$stdOutLog
		$stdErrLog =$env:Temp+'\'+$stdErrLog
	} 
	if (-not $Dry) {
		Get-Date -F yyyy-MM-dd    | Out-File $mylog
		" out  : $stdOutLog"      | Out-File $mylog -Append
		" err  : $stdErrLog"      | Out-File $mylog -Append
		" exe  : $exe"            | Out-File $myLog -Append
		" args : $args"           | Out-File $myLog -Append
		Start-Process -File $exe -ArgumentList $exeargs -NoNewWindow  -RedirectStandardOutput $stdOutLog -RedirectStandardError $stdErrLog -wait
		Get-Content $stdErrLog, $stdOutLog | Out-File $myLog -Append
		Get-Content $myLog | Out-File $logfile -Append
		Get-Content $myLog
		Write-Host '***********************'
		Write-Host "Done, output saved into $myLog"
	}
}

#################################
# uses out-duration function
# use pexec function instead
function exec-cmd-simple( [string] $cmd_line, [switch]$quiet, [switch] $raw, [int]$sample_lines=4) {
    if (!$sc) {
		$sc="`e[#p"; $rc="`e[#q"; $red="`e[1;31m"; $grn="`e[1;32m"; $ylw="`e[1;33m"; $blu="`e[1;34m"; $mgt="`e[1;35m"; $cyn="`e[1;36m";
		$bold="`e[1m"; $bold_off="`e[22m";
	}
	if (!$cmd_line) {
@" 
$sc${blu}Usage${gry}:
	${cyn}exec-cmd-simple${gry} <cmd_line> [-quiet] [-sample_lines=4]
${blu}Example${gry}:
	`$autorunsc='C:\home\apps\SysinternalsSuite\autorunsc64.exe'
	${cyn}$($MyInvocation.MyCommand)${gry} `"`$autorunsc /accepteula -a * -c -h -s -nobanner '*'`"$rc
    `$CMD_OUT | select -first 12 | ConvertFrom-Csv | ft -auto
"@
	   return
	}
	[string[]] $cmd_arr=$cmd_line -split(" ")
	$exe=$cmd_arr[0] 
	$exe_args=$cmd_arr[1..$($cmd_arr.Count-1)]
	$fmt_var="{0,-15}"	
	if (!$quiet) {
		$tm_start=Get-Date
		"$sc${bold}${blu}${fmt_var}${bold_off} : ${ylw}{1} ${grn}{2}$rc" -f "COMMAND $(if($exe_args.Count){ `"and $($exe_args.Count) args`"})", $exe, $($exe_args -join (' '))
		$exe_watch=[System.Diagnostics.Stopwatch]::New()
		$exe_watch.Start()
	}
	# [array] $Global:CMD_OUT=& $exe $exe_args|% { if ($raw) { $_ } else { $_.Trim() -replace('\p{Cc}+','')} } |? { $_ } # |? { $_ -and $_ -notmatch '\p{Cc}' }
	if($raw) {
		[array] $Global:CMD_OUT=& "$exe" $exe_args
	} else {
		[array] $Global:CMD_OUT=& "$exe" $exe_args |% { [regex]::replace($_,'[^\x20-\x7F]','').Trim() } |? { $_ } 
	}
		
    if (!$quiet) {
		$exe_watch.Stop()
		"$sc${bold}${blu}${fmt_var}${bold_off} : ${ylw}{1}$rc" -f 'Duration', "$(out-duration $tm_start)"
		"$sc${bold}${blu}${fmt_var}${bold_off} : ${ylw}{1,-5:g5}$rc" -f 'Elapsed', "$($exe_watch.Elapsed.TotalSeconds) s"
		if ($Global:CMD_OUT -is [array]) {
			"$sc${bold}${blu}${fmt_var}${bold_off} : ${ylw}{1}$rc" -f 'Sample lines',"$sample_lines"
			0..$($sample_lines - 1) |% {"$sc${grn}{0,-5} ${blu}<${ylw}{1}${blu}>$rc" -f $($_+1), $Global:CMD_OUT[$_]}
			"$sc${bold}${blu}${fmt_var}${bold_off} : ${ylw}{1}$rc" -f 'Total lines',$Global:CMD_OUT.Count	
		} else {
			"$sc${bold}${blu}${fmt_var}${bold_off} : ${ylw}{1}$rc" -f '$Global:CMD_OUT',"is a string of $($Global:CMD_OUT.Length) symbols length"
			"$sc${bold}${blu}${fmt_var}${bold_off} : ${ylw}{1}$rc" -f 'Sample lines',"$sample_lines"
			$tmpArr=@($Global:CMD_OUT -split([environment]::NewLine))
			0..$($sample_lines - 1) |% {"$sc${grn}{0,-5} ${blu}<${ylw}{1}${blu}>$rc" -f $($_+1), $($tmpArr[$_] -replace ([environment]::NewLine,'\n')) }
			"$sc${bold}${blu}${fmt_var}${bold_off} : ${ylw}{1}$rc" -f 'Total lines',$tmpArr.Count	
			"$sc${bold}${blu}${fmt_var}${bold_off} : ${ylw}{1}$rc" -f 'Data store','$Global:CMD_OUT'
			
		}
    }
}
$autorunsc='C:\home\apps\SysinternalsSuite\autorunsc64.exe'
exec-cmd-simple "$autorunsc /accepteula -a * -c -h -s -nobanner '*'"

###############################
# Direct Execution
# The legacy method of direct execution is still supported:
Invoke-WebRequest "aka.ms/Get-NetView" -OutFile "Get-NetView.ps1"
.\Get-NetView.ps1 -OutputDir .\
###################################
# If blocked by execution policy:
Powershell.exe -ExecutionPolicy Bypass -File  .\Get-NetView.ps1 -OutputDir .\

################################################################
# wget in powershell to download via http
(New-Object System.Net.WebClient).DownloadFile("http://10.10.10.10/nc.exe","nc.exe")

# https://adamtheautomator.com/powershell-download-file/
Invoke-WebRequest -Uri 
# Source file location
$source = 'http://speedtest.tele2.net/10MB.zip'
# Destination to save the file
$destination = 'c:\dload\10MB.zip'
#Download the file
Invoke-WebRequest -Uri $source -OutFile $destination

# download pktmon parsers for NetworkMonitor
https://github.com/microsoft/NetMon_Parsers_for_PacketMon/blob/main/etl_Microsoft-Windows-PktMon-Events.npl
https://github.com/microsoft/NetMon_Parsers_for_PacketMon/blob/main/stub_etl_Microsoft-Windows-PktMon-Events.npl

Invoke-WebRequest -Uri 'https://raw.githubusercontent.com/microsoft/NetMon_Parsers_for_PacketMon/main/etl_Microsoft-Windows-PktMon-Events.npl'  -OutFile etl_Microsoft-Windows-PktMon-Events.npl
Invoke-WebRequest -Uri 'https://raw.githubusercontent.com/microsoft/NetMon_Parsers_for_PacketMon/main/stub_etl_Microsoft-Windows-PktMon-Events.npl'  -OutFile stub_etl_Microsoft-Windows-PktMon-Events.npl


###############################################
# Uninstall EdgeWebView
# https://docs.microsoft.com/en-us/answers/questions/394752/cannot-uninstall-webview-silently.html
cd C:\Program Files (x86)\Microsoft\EdgeWebView\Application\90.0.818.56\Installer
setup.exe --uninstall --msedgewebview --system-level --verbose-logging --force-uninstall

###############################################
# Permissions, aka chmod 
# https://docs.microsoft.com/en-us/answers/questions/394752/cannot-uninstall-webview-silently.html
# Set Owner of a specific file
ICACLS "D:\test\test.txt" /setowner "administrator"
# Grant Full Control
ICACLS "D:\test\test.txt" /grant:r "administrator:(F)" /C
# Grant Read and Execute Access of a specific file
ICACLS "D:\test\test.txt" /grant:r "users:(RX)" /C
# Grant Read-only Access of a specific file
ICACLS  /grant:r "users:(R)" /C

# ssh private key permissions
$KeyFile="C:\home\aws\keys\free-tier-gateway-canada.pem"
icacls $KeyFile /reset
icacls $KeyFile /grant:r "$($env:USERNAME):(R)"
icacls $KeyFile /inheritance:r
(get-acl "$KeyFile").access | ft

########################################
# tail 
$KeyFile="C:\home\aws\keys\free-tier-gateway-canada.pem"; $LogFile="C:\home\log\gateway-canada.log"; $ProxyPort=3333
ssh -f -N -i $KeyFile -E $LogFile ec2-user@15.222.131.28 -D $ProxyPort &
Get-Content -Tail 10 -Wait $LogFile

########################################
########################################
#######                         ########
#######       Devices           ########
#######                         ########
########################################
########################################

# check device driver versions
Get-WmiObject Win32_PnPSignedDriver
# see C:\home\src\Scripts\tools\Show-Devices.ps1 : 
 
 
#########################################################
# Find all devices connected to a computer
Get-PnpDevice -PresentOnly

$DevicesAll=Get-PnpDevice |  select Class, Name, Status, Manufacturer, Service, Present, InstanceId
$DevicesSrv=Get-PnpDevice | ? Service | select Class, Name, Status, Manufacturer, Service, Present, InstanceId
   $Devices=Get-PnpDevice | ? Present |  select Class, Name, Status, Manufacturer, Service, Problem, InstanceId

'Date: {0} | No of Devices: {1}/{2}/{3}' -f (Get-Date).ToString('yy-MM-dd'), $Devices.Count, $DevicesSrv.Count , $DevicesAll.Count
Date: 23-01-17 | No of Devices: 305/229/432


Count Name                      Group
----- ----                      -----
    1                           {@{Class=; Name=; Status=OK; Manufacturer=; Service=; Problem=CM_PROB_NONE; InstanceId=HTREE\ROOT\0}}
    5 AudioEndpoint             {@{Class=AudioEndpoint; Name=LG HDR 4K (NVIDIA High Definition Audio); Status=OK; Manufacturer=Microsoft; Service=; Problem=CM_PROB_NONE; InstanceId=SWD\MMDEVAPI\{0.0.0.00000000}.{21384E5E-5224-47EA-9372-C78F8E112622}}, @{Class=AudioEndpoint; Name=LG HDR 4K…
   13 Bluetooth                 {@{Class=Bluetooth; Name=Bluetooth LE Generic Attribute Service; Status=OK; Manufacturer=Microsoft; Service=UmPass; Problem=CM_PROB_NONE; InstanceId=BTHLEDEVICE\{0000180F-0000-1000-8000-00805F9B34FB}_DEV_VID&02046D_PID&B35B_REV&0013_EEA0065980A3\8&A1219C6&0…
    1 Computer                  {@{Class=Computer; Name=ACPI x64-based PC; Status=OK; Manufacturer=(Standard computers); Service=\Driver\ACPI_HAL; Problem=CM_PROB_NONE; InstanceId=ROOT\ACPI_HAL\0000}}
    1 DellInstrumentation       {@{Class=DellInstrumentation; Name=DellInstrumentation Device; Status=OK; Manufacturer=Dell Technologies; Service=DellInstrumentation; Problem=CM_PROB_NONE; InstanceId=ROOT\DELLINSTRUMENTATION\0000}}
    1 DigitalMediaDevices       {@{Class=DigitalMediaDevices; Name=WDMyCloudEX4; Status=OK; Manufacturer=Western Digital Corporation; Service=UmPass; Problem=CM_PROB_NONE; InstanceId=SWD\DAFUPNPPROVIDER\UUID:55076F6E-6B79-4D65-64CF-0090A96B5866}}
    3 DiskDrive                 {@{Class=DiskDrive; Name=ST10000NM0086-2AA101; Status=OK; Manufacturer=(Standard disk drives); Service=disk; Problem=CM_PROB_NONE; InstanceId=SCSI\DISK&VEN_ATA&PROD_ST10000NM0086-2A\4&296A7F82&0&030000}, @{Class=DiskDrive; Name=Hitachi HUA723030ALA640; Stat…
    2 Display                   {@{Class=Display; Name=NVIDIA NVS 315; Status=Error; Manufacturer=NVIDIA; Service=nvlddmkm; Problem=CM_PROB_FAILED_ADD; InstanceId=PCI\VEN_10DE&DEV_107C&SUBSYS_102F103C&REV_A1\4&A9E70BA&0&00E5}, @{Class=Display; Name=NVIDIA Quadro M2000; Status=OK; Manufact…
    1 Firmware                  {@{Class=Firmware; Name=System Firmware 1.13.0; Status=OK; Manufacturer=Dell, Inc.; Service=; Problem=CM_PROB_NONE; InstanceId=UEFI\RES_{9F1ECAB8-A9D1-4D01-9BF8-B91CB116B641}\0}}
   23 HIDClass                  {@{Class=HIDClass; Name=HID-compliant vendor-defined device; Status=OK; Manufacturer=(Standard system devices); Service=; Problem=CM_PROB_NONE; InstanceId=HID\{00001812-0000-1000-8000-00805F9B34FB}_DEV_VID&02046D_PID&B35B_REV&0013_EEA0065980A3&COL04\9&17A2F…
    5 Keyboard                  {@{Class=Keyboard; Name=Razer DeathAdder V2; Status=OK; Manufacturer=Razer Inc; Service=kbdhid; Problem=CM_PROB_NONE; InstanceId=HID\VID_1532&PID_0084&MI_01&COL01\7&337D3F2A&0&0000}, @{Class=Keyboard; Name=HID Keyboard Device; Status=OK; Manufacturer=(Stand…
    4 MEDIA                     {@{Class=MEDIA; Name=Signa S2; Status=OK; Manufacturer=Microsoft; Service=BthA2dp; Problem=CM_PROB_NONE; InstanceId=BTHENUM\{0000110B-0000-1000-8000-00805F9B34FB}_VID&0002099A_PID&0500\7&15E9B218&0&88D0397F939D_C00000000}, @{Class=MEDIA; Name=NVIDIA High De…
    5 Monitor                   {@{Class=Monitor; Name=Generic PnP Monitor; Status=OK; Manufacturer=(Standard monitor types); Service=monitor; Problem=CM_PROB_NONE; InstanceId=DISPLAY\GSM774F\1&8713BCA&0&UID0}, @{Class=Monitor; Name=Generic PnP Monitor; Status=OK; Manufacturer=(Standard m…
    3 Mouse                     {@{Class=Mouse; Name=Razer DeathAdder V2; Status=OK; Manufacturer=Razer Inc; Service=mouhid; Problem=CM_PROB_NONE; InstanceId=HID\VID_1532&PID_0084&MI_00\7&204D22EC&0&0000}, @{Class=Mouse; Name=HID-compliant mouse; Status=OK; Manufacturer=Microsoft; Service…
   12 Net                       {@{Class=Net; Name=Hyper-V Virtual Switch Extension Adapter; Status=OK; Manufacturer=Microsoft; Service=VMSMP; Problem=CM_PROB_NONE; InstanceId=ROOT\VMS_VSMP\0000}, @{Class=Net; Name=Hyper-V Virtual Switch Extension Adapter #2; Status=OK; Manufacturer=Micro…
    1 Ports                     {@{Class=Ports; Name=Communications Port (COM1); Status=OK; Manufacturer=(Standard port types); Service=Serial; Problem=CM_PROB_NONE; InstanceId=ACPI\PNP0501\0}}
    1 Printer                   {@{Class=Printer; Name=Microsoft IPP Class Driver; Status=OK; Manufacturer=Microsoft; Service=; Problem=CM_PROB_NONE; InstanceId=SWD\PRINTENUM\WSD-851E1F51-872C-401B-8EFF-5A4CB4F20C57}}
    5 PrintQueue                {@{Class=PrintQueue; Name=Root Print Queue; Status=OK; Manufacturer=Microsoft; Service=; Problem=CM_PROB_NONE; InstanceId=SWD\PRINTENUM\PRINTQUEUES}, @{Class=PrintQueue; Name=Brother HL-L8360CDW series; Status=OK; Manufacturer=Microsoft; Service=; Problem=C…
   20 Processor                 {@{Class=Processor; Name=Intel(R) Xeon(R) W-2155 CPU @ 3.30GHz; Status=OK; Manufacturer=Intel; Service=intelppm; Problem=CM_PROB_NONE; InstanceId=ACPI\GENUINEINTEL_-_INTEL64_FAMILY_6_MODEL_85_-_INTEL(R)_XEON(R)_W-2155_CPU_@_3.30GHZ\10}, @{Class=Processor; N…
    1 Razer Device              {@{Class=Razer Device; Name=Razer Control Device; Status=OK; Manufacturer=Razer Inc; Service=RzCommon; Problem=CM_PROB_NONE; InstanceId=RZCONTROL\VID_1532&PID_0084&MI_00\8&2611A59A&0}}
    4 SCSIAdapter               {@{Class=SCSIAdapter; Name=Microsoft Storage Spaces Controller; Status=OK; Manufacturer=Microsoft; Service=spaceport; Problem=CM_PROB_NONE; InstanceId=ROOT\SPACEPORT\0000}, @{Class=SCSIAdapter; Name=Intel(R) C600+/C220+ series chipset SATA RAID Controller; …
    1 SecurityDevices           {@{Class=SecurityDevices; Name=Trusted Platform Module 2.0; Status=OK; Manufacturer=(Standard); Service=TPM; Problem=CM_PROB_NONE; InstanceId=ACPI\MSFT0101\1}}
    9 SoftwareDevice            {@{Class=SoftwareDevice; Name=Microsoft RRAS Root Enumerator; Status=OK; Manufacturer=Microsoft; Service=; Problem=CM_PROB_NONE; InstanceId=SWD\MSRRAS\{5E259276-BC7E-40E3-B93B-8F89B5F3ABC0}}, @{Class=SoftwareDevice; Name=Microsoft Radio Device Enumeration B…
  149 System                    {@{Class=System; Name=Intel(R) Xeon(R) processor P family/Core i7 PCU Registers - 2081; Status=OK; Manufacturer=INTEL; Service=; Problem=CM_PROB_NONE; InstanceId=PCI\VEN_8086&DEV_2081&SUBSYS_07381028&REV_04\3&2411E6FE&0&F1}, @{Class=System; Name=Intel(R) Xe…
    7 USB                       {@{Class=USB; Name=Intel(R) USB 3.0 eXtensible Host Controller - 1.0 (Microsoft); Status=OK; Manufacturer=Generic USB xHCI Host Controller; Service=USBXHCI; Problem=CM_PROB_NONE; InstanceId=PCI\VEN_8086&DEV_A2AF&SUBSYS_07381028&REV_00\3&11583659&0&A0}, @{Cl…
   19 Volume                    {@{Class=Volume; Name=Volume; Status=OK; Manufacturer=Microsoft; Service=volume; Problem=CM_PROB_NONE; InstanceId=STORAGE\VOLUME\{882ED160-E4D1-11EC-A496-806E6F6E6963}#0000000000100000}, @{Class=Volume; Name=Volume; Status=OK; Manufacturer=Microsoft; Servic…
    8 VolumeSnapshot            {@{Class=VolumeSnapshot; Name=Generic volume shadow copy; Status=OK; Manufacturer=Microsoft; Service=; Problem=CM_PROB_NONE; InstanceId=STORAGE\VOLUMESNAPSHOT\HARDDISKVOLUMESNAPSHOT1}, @{Class=VolumeSnapshot; Name=Generic volume shadow copy; Status=OK; Manu…

# Display and Monitor devices with Unknown status:
PS C:\Windows\System32> Get-PnpDevice | ? Class -match 'Monitor|Display' | ? Status -eq 'Unknown' | ft -a

Status  Class   FriendlyName            InstanceId
------  -----   ------------            ----------
Unknown Monitor Generic PnP Monitor     DISPLAY\GSM774F\5&1A645B24&1&UID2097424
Unknown Monitor Generic PnP Monitor     DISPLAY\GSM774F\5&1A645B24&1&UID2097425
Unknown Monitor Generic PnP Monitor     DISPLAY\GSM7750\1&8713BCA&0&UID0
Unknown Monitor Generic PnP Monitor     DISPLAY\GSM774F\5&1A645B24&0&UID8448
Unknown Monitor Generic PnP Monitor     DISPLAY\GSM774F\5&1A645B24&0&UID8449
Unknown Monitor Generic PnP Monitor     DISPLAY\GSM7750\5&1ECD3B42&0&UID733440
Unknown Monitor Generic PnP Monitor     DISPLAY\GSM7750\5&1ECD3B42&0&UID733442
Unknown Monitor Generic PnP Monitor     DISPLAY\GSM7750\5&1ECD3B42&0&UID733444
Unknown Monitor Generic PnP Monitor     DISPLAY\GSM7750\5&1ECD3B42&0&UID733446
Unknown Monitor Generic PnP Monitor     DISPLAY\GSM774F\5&1A645B24&0&UID0
Unknown Monitor Generic PnP Monitor     DISPLAY\GSM7750\5&1ECD3B42&0&UID734208
Unknown Monitor Generic PnP Monitor     DISPLAY\GSM7750\5&1ECD3B42&0&UID774400
Unknown Monitor Generic PnP Monitor     DISPLAY\GSM7750\5&1ECD3B42&0&UID774402
Unknown Monitor Generic PnP Monitor     DISPLAY\GSM7750\5&1ECD3B42&0&UID774404
Unknown Monitor Generic PnP Monitor     DISPLAY\GSM7750\5&1ECD3B42&0&UID774406
Unknown Monitor Generic PnP Monitor     DISPLAY\ACI22FD\1&8713BCA&0&UID0
Unknown Monitor Generic PnP Monitor     DISPLAY\GSM774F\5&1ECD3B42&0&UID775168
Unknown Monitor Generic PnP Monitor     DISPLAY\GSM7750\5&1ECD3B42&0&UID775168
Unknown Monitor Generic Non-PnP Monitor DISPLAY\DEFAULT_MONITOR\5&1ECD3B42&0&UID774401
Unknown Monitor Generic Non-PnP Monitor DISPLAY\DEFAULT_MONITOR\5&1ECD3B42&0&UID774403
Unknown Monitor Generic Non-PnP Monitor DISPLAY\DEFAULT_MONITOR\5&1ECD3B42&0&UID774407
Unknown Monitor Generic PnP Monitor     DISPLAY\GSM774F\5&1A645B24&0&UID2097425


###########################################
# uninstall device | pnputil
foreach ($dev in (Get-PnpDevice | ? { $_.name -eq "NAME TOT REMOVE" } ))  { & pnputil /remove-device $dev.InstanceId }

foreach ($dev in (Get-PnpDevice | ? { $_.Status -eq 'Unknown' -and $_.Class -match 'Monitor|Display' } ))  { & pnputil /remove-device $dev.InstanceId }


foreach ($dev in (Get-PnpDevice | ? { $_.InstanceId -eq "DISPLAY\GSM774F\5&1ECD3B42&0&UID774407" } ))  { & pnputil /remove-device $dev.InstanceId }
# Microsoft PnP Utility
# Removing device:          DISPLAY\GSM774F\5&1ecd3b42&0&UID774407
# Device removed successfully.

PS C:\Windows\System32> & pnputil /remove-device 'DISPLAY\GSM774F\1&8713BCA&0&UID0'
Microsoft PnP Utility
Removing device:          DISPLAY\GSM774F\1&8713bca&0&UID0
Device removed successfully.

###############################
####    DISPLAY | VIDEO    ####
###############################
# display device
# https://learn.microsoft.com/en-us/windows/win32/cimwin32prov/win32-videocontroller
# https://learn.microsoft.com/en-us/windows/win32/cimwin32prov/win32-videosettings

Get-CimInstance -ClassName CIM_VideoSetting  | select * | Out-GridView

PS C:\Windows\System32> Get-CimInstance -ClassName CIM_VideoController   | select * | ft -a

Caption             Description         InstallDate Name                Status Availability ConfigManagerErrorCode ConfigManagerUserConfig CreationClassName     DeviceID
-------             -----------         ----------- ----                ------ ------------ ---------------------- ----------------------- -----------------     --------
NVIDIA NVS 315      NVIDIA NVS 315                  NVIDIA NVS 315      Error             8                     22                   False Win32_VideoController VideoController1
NVIDIA Quadro M2000 NVIDIA Quadro M2000             NVIDIA Quadro M2000 OK                3                      0                   False Win32_VideoController VideoController2

# CIM_DesktopMonitor | Win32_DesktopMonitor
S C:\Windows\System32> Get-CimInstance -ClassName CIM_DesktopMonitor    | select * | ft -a
DeviceID        Name                PixelsPerXLogicalInch PixelsPerYLogicalInch ScreenHeight ScreenWidth IsLocked LastErrorCode Status StatusInfo
--------        ----                --------------------- --------------------- ------------ ----------- -------- ------------- ------ ----------
DesktopMonitor1 Default Monitor                       144                   144                                                 OK
DesktopMonitor2 Generic PnP Monitor                   144                   144 768          1024                               OK

PS C:\Windows\System32> Get-CimInstance -ClassName CIM_Display   | select * | ft -a
DeviceID        Name                PixelsPerXLogicalInch PixelsPerYLogicalInch ScreenHeight ScreenWidth IsLocked LastErrorCode Status StatusInfo
--------        ----                --------------------- --------------------- ------------ ----------- -------- ------------- ------ ----------
DesktopMonitor1 Default Monitor                       144                   144                                                 OK
DesktopMonitor2 Generic PnP Monitor                   144                   144 768          1024                               OK

# CIM_VideoControllerResolution | see CIM_VideoControllerResolution.txt
 Get-CimInstance -ClassName CIM_VideoControllerResolution    | select * | ft -a

Caption                                                 Description                                             SettingID                                               HorizontalResolution MaxRefreshRate MinRefreshRate NumberOfColors RefreshRate ScanMode VerticalResolution
-------                                                 -----------                                             ---------                                               -------------------- -------------- -------------- -------------- ----------- -------- ------------------
640 x 480 x 4294967296 colors @ 59 Hertz                640 x 480 x 4294967296 colors @ 59 Hertz                640 x 480 x 4294967296 colors @ 59 Hertz                                 640                                   4294967296          59        4                480
640 x 480 x 4294967296 colors @ 60 Hertz                640 x 480 x 4294967296 colors @ 60 Hertz                640 x 480 x 4294967296 colors @ 60 Hertz                                 640                                   4294967296          60        4                480
720 x 480 x 4294967296 colors @ 60 Hertz                720 x 480 x 4294967296 colors @ 60 Hertz                720 x 480 x 4294967296 colors @ 60 Hertz                                 720                                   4294967296          60        4                480
720 x 480 x 4294967296 colors @ 59 Hertz                720 x 480 x 4294967296 colors @ 59 Hertz                720 x 480 x 4294967296 colors @ 59 Hertz                                 720                                   4294967296          59        4                480
...

1920 x 1440 x 4294967296 colors @ 59 Hertz              1920 x 1440 x 4294967296 colors @ 59 Hertz              1920 x 1440 x 4294967296 colors @ 59 Hertz                              1920                                   4294967296          59        4               1440
2048 x 1536 x 4294967296 colors @ 30 Hertz (Interlaced) 2048 x 1536 x 4294967296 colors @ 30 Hertz (Interlaced) 2048 x 1536 x 4294967296 colors @ 30 Hertz (Interlaced)                 2048                                   4294967296          30        5               1536
2048 x 1536 x 4294967296 colors @ 29 Hertz (Interlaced) 2048 x 1536 x 4294967296 colors @ 29 Hertz (Interlaced) 2048 x 1536 x 4294967296 colors @ 29 Hertz (Interlaced)                 2048                                   4294967296          29        5               1536
2048 x 1536 x 4294967296 colors @ 25 Hertz (Interlaced) 2048 x 1536 x 4294967296 colors @ 25 Hertz (Interlaced) 2048 x 1536 x 4294967296 colors @ 25 Hertz (Interlaced)                 2048                                   4294967296          25        5               1536
2048 x 1536 x 4294967296 colors @ 24 Hertz (Interlaced) 2048 x 1536 x 4294967296 colors @ 24 Hertz (Interlaced) 2048 x 1536 x 4294967296 colors @ 24 Hertz (Interlaced)                 2048                                   4294967296          24        5               1536
2048 x 1536 x 4294967296 colors @ 23 Hertz (Interlaced) 2048 x 1536 x 4294967296 colors @ 23 Hertz (Interlaced) 2048 x 1536 x 4294967296 colors @ 23 Hertz (Interlaced)                 2048                                   4294967296          23        5               1536
2560 x 1440 x 4294967296 colors @ 59 Hertz              2560 x 1440 x 4294967296 colors @ 59 Hertz              2560 x 1440 x 4294967296 colors @ 59 Hertz                              2560                                   4294967296          59        4               1440
2560 x 1600 x 4294967296 colors @ 30 Hertz (Interlaced) 2560 x 1600 x 4294967296 colors @ 30 Hertz (Interlaced) 2560 x 1600 x 4294967296 colors @ 30 Hertz (Interlaced)                 2560                                   4294967296          30        5               1600
2560 x 1600 x 4294967296 colors @ 29 Hertz (Interlaced) 2560 x 1600 x 4294967296 colors @ 29 Hertz (Interlaced) 2560 x 1600 x 4294967296 colors @ 29 Hertz (Interlaced)                 2560                                   4294967296          29        5               1600
2560 x 1600 x 4294967296 colors @ 25 Hertz (Interlaced) 2560 x 1600 x 4294967296 colors @ 25 Hertz (Interlaced) 2560 x 1600 x 4294967296 colors @ 25 Hertz (Interlaced)                 2560                                   4294967296          25        5               1600
2560 x 1600 x 4294967296 colors @ 24 Hertz (Interlaced) 2560 x 1600 x 4294967296 colors @ 24 Hertz (Interlaced) 2560 x 1600 x 4294967296 colors @ 24 Hertz (Interlaced)                 2560                                   4294967296          24        5               1600
2560 x 1600 x 4294967296 colors @ 23 Hertz (Interlaced) 2560 x 1600 x 4294967296 colors @ 23 Hertz (Interlaced) 2560 x 1600 x 4294967296 colors @ 23 Hertz (Interlaced)                 2560                                   4294967296          23        5               1600
3840 x 2160 x 4294967296 colors @ 60 Hertz              3840 x 2160 x 4294967296 colors @ 60 Hertz              3840 x 2160 x 4294967296 colors @ 60 Hertz                              3840                                   4294967296          60        4               2160
3840 x 2160 x 4294967296 colors @ 59 Hertz              3840 x 2160 x 4294967296 colors @ 59 Hertz              3840 x 2160 x 4294967296 colors @ 59 Hertz                              3840                                   4294967296          59        4               2160
3840 x 2160 x 4294967296 colors @ 50 Hertz (Interlaced) 3840 x 2160 x 4294967296 colors @ 50 Hertz (Interlaced) 3840 x 2160 x 4294967296 colors @ 50 Hertz (Interlaced)                 3840                                   4294967296          50        5               2160
3840 x 2160 x 4294967296 colors @ 30 Hertz (Interlaced) 3840 x 2160 x 4294967296 colors @ 30 Hertz (Interlaced) 3840 x 2160 x 4294967296 colors @ 30 Hertz (Interlaced)                 3840                                   4294967296          30        5               2160
3840 x 2160 x 4294967296 colors @ 29 Hertz (Interlaced) 3840 x 2160 x 4294967296 colors @ 29 Hertz (Interlaced) 3840 x 2160 x 4294967296 colors @ 29 Hertz (Interlaced)                 3840                                   4294967296          29        5               2160
3840 x 2160 x 4294967296 colors @ 25 Hertz (Interlaced) 3840 x 2160 x 4294967296 colors @ 25 Hertz (Interlaced) 3840 x 2160 x 4294967296 colors @ 25 Hertz (Interlaced)                 3840                                   4294967296          25        5               2160
3840 x 2160 x 4294967296 colors @ 24 Hertz (Interlaced) 3840 x 2160 x 4294967296 colors @ 24 Hertz (Interlaced) 3840 x 2160 x 4294967296 colors @ 24 Hertz (Interlaced)                 3840                                   4294967296          24        5               2160
3840 x 2160 x 4294967296 colors @ 23 Hertz (Interlaced) 3840 x 2160 x 4294967296 colors @ 23 Hertz (Interlaced) 3840 x 2160 x 4294967296 colors @ 23 Hertz (Interlaced)                 3840                                   4294967296          23        5               2160
1280 x 720 x 4294967296 colors @ 60 Hertz               1280 x 720 x 4294967296 colors @ 60 Hertz               1280 x 720 x 4294967296 colors @ 60 Hertz                               1280                                   4294967296          60        4                720
1280 x 720 x 4294967296 colors @ 59 Hertz               1280 x 720 x 4294967296 colors @ 59 Hertz               1280 x 720 x 4294967296 colors @ 59 Hertz                               1280                                   4294967296          59        4                720
1920 x 1080 x 4294967296 colors @ 60 Hertz              1920 x 1080 x 4294967296 colors @ 60 Hertz              1920 x 1080 x 4294967296 colors @ 60 Hertz                              1920                                   4294967296          60        4               1080
1920 x 1080 x 4294967296 colors @ 59 Hertz              1920 x 1080 x 4294967296 colors @ 59 Hertz              1920 x 1080 x 4294967296 colors @ 59 Hertz                              1920                                   4294967296          59        4               1080
1920 x 1080 x 4294967296 colors @ 50 Hertz (Interlaced) 1920 x 1080 x 4294967296 colors @ 50 Hertz (Interlaced) 1920 x 1080 x 4294967296 colors @ 50 Hertz (Interlaced)                 1920                                   4294967296          50        5               1080
1920 x 1080 x 4294967296 colors @ 24 Hertz (Interlaced) 1920 x 1080 x 4294967296 colors @ 24 Hertz (Interlaced) 1920 x 1080 x 4294967296 colors @ 24 Hertz (Interlaced)                 1920                                   4294967296          24        5               1080
1920 x 1080 x 4294967296 colors @ 23 Hertz (Interlaced) 1920 x 1080 x 4294967296 colors @ 23 Hertz (Interlaced) 1920 x 1080 x 4294967296 colors @ 23 Hertz (Interlaced)                 1920                                   4294967296          23        5               1080
1920 x 1080 x 4294967296 colors @ 30 Hertz (Interlaced) 1920 x 1080 x 4294967296 colors @ 30 Hertz (Interlaced) 1920 x 1080 x 4294967296 colors @ 30 Hertz (Interlaced)                 1920                                   4294967296          30        5               1080
1920 x 1080 x 4294967296 colors @ 29 Hertz (Interlaced) 1920 x 1080 x 4294967296 colors @ 29 Hertz (Interlaced) 1920 x 1080 x 4294967296 colors @ 29 Hertz (Interlaced)                 1920                                   4294967296          29        5               1080


###########################################
# uninstall device | wmi
get-wmiobject -Query "select * from win32_systemdriver where caption=`"THING_TO_REMOVE`"" } | ForEach  { $_.StopService(); $_.Delete() }  
 
##################################################################
# Configure and Deploy graphics devices using Discrete Device Assignment  ( DDA (
# https://docs.microsoft.com/en-us/windows-server/virtualization/hyper-v/deploy/deploying-graphics-devices-using-dda
# https://techcommunity.microsoft.com/t5/virtualization/discrete-device-assignment-description-and-background/ba-p/382262
# 

####################################################
# Discrete Device Management, devices attached to the VM system 
# https://devblogs.microsoft.com/scripting/passing-through-devices-to-hyper-v-vms-by-using-discrete-device-assignment/

Get-PnpDevice -PresentOnly | Sort-Object -Property Class

Status     Class           FriendlyName                                                                     InstanceId
------     -----           ------------                                                                     ----------
OK         System          Microsoft Hyper-V Virtual Machine Bus Provider                                   ROOT\VMBUS\0000
OK         System          Microsoft Hypervisor Service                                                     ROOT\HVSERVICE…
OK         Net             Hyper-V Virtual Switch Extension Adapter                                         ROOT\VMS_VSMP\…
OK         Net             Hyper-V Virtual Switch Extension Adapter #2                                      ROOT\VMS_VSMP\…
OK         Net             Hyper-V Virtual Switch Extension Adapter #3                                      ROOT\VMS_VSMP\…
OK         System          Microsoft Hyper-V Virtualization Infrastructure Driver                           ROOT\VID\0000
OK         System          Microsoft Hyper-V PCI Server                                                     ROOT\VPCIVSP\0…
OK         System          Microsoft Hyper-V Virtual Disk Server                                            ROOT\STORVSP\0…

# Mount
# Now we need to dismount the device from the host by using the Dismount-VmHostAssignableDevice cmdlet. 
# To specify a location of the device, we need to get a specific property that is not presented in the device object by using Get-PnpDeviceProperty.
locationPath = (Get-PnpDeviceProperty -KeyName DEVPKEY_Device_LocationPaths -InstanceId $dev.InstanceId).Data[0] Dismount-VmHostAssignableDevice -LocationPath $locationPath -Force –Verbose

Now if you refresh the device object, you can see that something changed: Device is described as "Dismounted":
(Get-PnpDevice -PresentOnly).Where{ $_.InstanceId -like $instanceId }


# The last step is to attach an assignable device to the VM by using Add-VMAssignableDevice like this:
Add-VMAssignableDevice -VM $vm -LocationPath $locationPath –Verbose

# Dynamic memory is allowed, but minimum and startup memory have to be equal. Let’s fix it, and finally attach our device.
Set-VM -VM $vm -DynamicMemory -MemoryMinimumBytes 1024MB -MemoryMaximumBytes 4096MB -MemoryStartupBytes 1024MB -AutomaticStopAction TurnOff 
Add-VMAssignableDevice -VM $vm -LocationPath $locationPath –Verbose

####################################
# Full code
$vmName = 'VMDDA0'
$instanceId = '*VEN_168C&DEV_002B*'
$ErrorActionPreference = 'Stop'
$vm = Get-VM -Name $vmName
$dev = (Get-PnpDevice -PresentOnly).Where{ $_.InstanceId -like $instanceId } 
if (@($dev).Count -eq 1) {
    Disable-PnpDevice -InstanceId $dev.InstanceId -Confirm:$false
    $locationPath = (Get-PnpDeviceProperty -KeyName DEVPKEY_Device_LocationPaths -InstanceId $dev.InstanceId).Data[0]
    Dismount-VmHostAssignableDevice -LocationPath $locationPath -Force -Verbose
    Set-VM -VM $vm -DynamicMemory -MemoryMinimumBytes 1024MB -MemoryMaximumBytes 4096MB -MemoryStartupBytes 1024MB -AutomaticStopAction TurnOff
# If you want to play with GPUs: 
# Set-VM -VM $vm -StaticMemory -MemoryStartupBytes 4096MB -AutomaticStopAction TurnOff
# Set-VM -VM $vm -GuestControlledCacheTypes $true -LowMemoryMappedIoSpace 2048MB -HighMemoryMappedIoSpace 4096MB -Verbose
    Add-VMAssignableDevice -VM $vm -LocationPath $locationPath -Verbose
} else {
    $dev | Sort-Object -Property Class | Format-Table -AutoSize Write-Error -Message ('Number of devices: {0}' -f @($dev).Count)
}

# Restore configuration
# Remove all devices from a single VM 
Remove-VMAssignableDevice -VMName VMDDA0 -Verbose
# Return all to host 
Get-VMHostAssignableDevice | Mount-VmHostAssignableDevice -Verbose
# Enable it in devmgmt.msc 
(Get-PnpDevice -PresentOnly).Where{ $_.InstanceId -match 'VEN_168C&DEV_002B' } | Enable-PnpDevice -Confirm:$false -Verbose


########################################
########################################
#######                         ########
#######      VMs Hyper-V        ########
#######                         ########
########################################
########################################

	get-vm  | select  * | Out-GridView
	Get-VM Barclays* | fl *
	
    Get-VM Barclays1 | % {  $vm=$_; 
		$vm.HardDrives | % { $Hd=$_; $Vhd = Get-VHD -Path $hd.Path; 
			[pscustomobject]@{ VM=$Vm.Name; HdName = $Hd.Name; Type = $Vhd.VhdType; ProvisionedGB = ($Vhd.Size / 1GB); CommittedGB = ($Vhd.FileSize / 1GB) }
		}
	}

	Get-VM * | select @{N='VM'; E={$VM=$_; $VMName=$VM.VMName; $VMId=$VM.VMId; $Vm.Name}}, @{N='HDs'; E={$HDs=$vm.HardDrives;$HDs}},  @{N='VHDs'; E={$VHDs=Get-VHD $VMId;$HDs}}, @{N='NICs'; E={$NICs=$vm.NetworkAdapters; $NICs}}, @{N='Services'; E={$Services=$vm.VMIntegrationService;$Services}} | fl
 
	Function Get-MyVM( [parameter(ValueFromPipeline=$True)]  [string[]] $VMNames='*') {
		Write-Host "[$($MyInvocation.MyCommand)] VMNames[$(($VMNames).Count)]: $($VMNames -join '; ')"
		$Global:LastVMVHDs=@(); $Global:LastVMHDs=@(); $Global:LastVMNICs=@(); $Global:LastVMServices=@()
		
		Get-VM -Name:$VMNames | select `
			  @{N='VM'; E={$Global:LastVM=$_; $LastVM}} `
			, @{N='VMHDsNo'; E={$Global:LastVMHDs=$LastVM.HardDrives; $Global:LastVMHDs.Count}} `
			, @{N='VMHDs'; E={$LastVMHDs}} `
			, @{N='VMVHDsNo'; E={$Global:LastVMVHDs=Get-VHD $_.VMId; $Global:LastVMVHDs.Count}} `
			, @{N='VMVHDs'; E={$LastVMVHDs}} `
			, @{N='VMNICsNo'; E={$Global:LastVMNICs=$LastVM.NetworkAdapters; $Global:LastVMNICs.Count}} `
			, @{N='VMNICs'; E={$LastVMNICs}} `
			, @{N='VMServicesNo'; E={$Global:LastVMServices=$LastVM.VMIntegrationService; $Global:LastVMServices.Count}} `
			, @{N='VMServices'; E={$LastVMServices}} `
			, *
	}

	Function Get-MyVMInfo( [parameter(ValueFromPipeline=$True)]  [string[]] $SourceParam='*', 
	    [ScriptBlock] $Source={Get-MyVM}
		[System.Object] $ExpandProperty,  [System.Object[]] $ExcludeProperty, [System.Object[]] $Property=@('*')) {
		Write-Host  "[$($MyInvocation.MyCommand)] VMNames[$(($VMNames).Count)]: $($VMNames -join '; ')"
		if (-not $ExpandProperty -and $Property[0] -eq '*' ) { $ExcludeProperty+=@("VM","VMHDsNo","VMHDs","VMVHDsNo","VMVHDs","VMNICsNo","VMNICs","VMNICsNo","VMNICs","VMServicesNo","VMServices") }
		$SelectParams=@{}
		if ($Property) { $SelectParams+=@{Property=$Property} }
		if ($ExpandProperty) { $SelectParams+=@{ExpandProperty=$ExpandProperty} }
		if ($ExcludeProperty) { $SelectParams+=@{ExcludeProperty=$ExcludeProperty} }
		if ($First) { $SelectParams+=@{First=$First} }
		
		$parameters = @{
			ComputerName = 'Server01'
			ScriptBlock  = {
				Param ($param1, $param2)
				Get-ChildItem -Name $param1 -Include $param2
			}
			ArgumentList = 'a*', '*.pdf'
		}
		Invoke-Command @parameters
		Write-Host -nonewline "[$($MyInvocation.MyCommand)]"
		Write-Host -nonewline " VMNames[$(($VMNames).Count)]: $($VMNames -join '; ')"
		Write-Host -nonewline " ExcludeProperty[$(($ExcludeProperty).Count)]: $($ExcludeProperty -join '; ')"
		Write-Host -nonewline " ExpandProperty: $ExpandProperty"
		Write-Host -nonewline " Property[$(($Property).Count)]: $($Property -join '; ')"
		Write-Host 
		Get-MyVM -VMNames:$VMNames |  select -ExcludeProperty:$ExcludeProperty -Expand:$ExpandProperty $Property
	}

	
	Function Get-MyVMHDs( [parameter(ValueFromPipeline=$True)] [string[]] $VMNames='*',
		$ExcludeProperty=@("VMName","VMId","Path","Id","Name","CimSession","ComputerName","IsDeleted"),
		$ExpandProperty='VMHDs'
	) {
		Write-Host  "[$($MyInvocation.MyCommand)] VMNames[$(($VMNames).Count)]: $($VMNames -join '; ')"
		Get-MyVMInfo -VMNames:$VMNames -Expand:"VMServices"
	}
		
	Function Get-MyVMServices( [parameter(ValueFromPipeline=$True)]  [string[]] $VMNames='*',
		$ExcludeProperty=@("OperationalStatus","PrimaryOperationalStatus","SecondaryOperationalStatus","PrimaryStatusDescription","SecondaryStatusDescription",
		                   "VMCheckpointId","VMCheckpointName","Name","Id","VMId","VMName","VMSnapshotId","VMSnapshotName","CimSession","ComputerName", "IsDeleted","IsClustered"),
		$ExpandProperty='VMHDs'
	) {
		Write-Host  "[$($MyInvocation.MyCommand)] VMNames[$(($VMNames).Count)]: $($VMNames -join '; ')"
		$ExcludeProperty+=@("VM","VMHDsNo","VMHDs","VMNICsNo","VMNICs","VMNICsNo","VMNICs")
		Get-MyVMInfo $VMNames -Exclude:$ExcludeProperty -Expand:"VMServices"
	}

	Function Get-MyVMServices( [parameter(ValueFromPipeline=$True)]  [string[]] $VMNames='*') {
		"[$($MyInvocation.MyCommand)] VMNames[$(($VMNames).Count)]: $($VMNames -join '; ')"
		
		Get-MyVM -VMNames:$VMNames | 
		   select -expand VMHDs *| 
		   select -exclude ComputerName,Path,DiskNumber -expand VMVHDs * | 
		   select -exclude ComputerName,Name,Id,VMSnapshotId,VMSnapshotName,VMCheckpointId,VMCheckpointName,IsDeleted,CimSession,OperationalStatus,PrimaryOperationalStatus,SecondaryOperationalStatus,PrimaryStatusDescription,SecondaryStatusDescription `
		           -expand VMServices *
	}
	
    $VMs=
		
	$VMs
		| 
		   select -exclude VMName,VMId -expand VMHDs * | 
		   select -exclude ComputerName,Path,DiskNumber -expand VMVHDs * | 
		   select -exclude ComputerName,Name,Id,VMName,VMId,VMSnapshotId,VMSnapshotName,VMCheckpointId,VMCheckpointName,IsDeleted,CimSession -expand VMServices *
		   
		| Select VMName, VMHDs.Name VhdType, Size, FileSize
			



	
PS C:\home> Enable-VMResourceMetering Barclays1
PS C:\home> Measure-VM -Name Barclays1

VMName    AvgCPU(MHz) AvgRAM(M) MaxRAM(M) MinRAM(M) TotalDisk(M) NetworkInbound(M) NetworkOutbound(M)
------    ----------- --------- --------- --------- ------------ ----------------- ------------------
Barclays1 0           0         0         0         0            0                 0

PS C:\home> Measure-VM Barclays1

VMName    AvgCPU(MHz) AvgRAM(M) MaxRAM(M) MinRAM(M) TotalDisk(M) NetworkInbound(M) NetworkOutbound(M)
------    ----------- --------- --------- --------- ------------ ----------------- ------------------
Barclays1 0           0         0         0         0            0                 0

PS C:\home> Disable-VMResourceMetering Barclays1
PS C:\home> Measure-VM Barclays1
Measure-VM: Resource metering is not enabled for this virtual machine. Use the Enable-VMResourceMetering cmdlet to enable data collection for this virtual machine.

	
PS C:\home> Get-VM -VMName Barclays1 | fl *

ParentCheckpointId                  : ea1f5e5b-5221-4f89-88af-9fbe0f6cd277
ParentCheckpointName                : Barclays - (8/19/2022 - 9:00:57 AM)
VMName                              : Barclays1
VMId                                : 9e56e4a0-f16d-46a9-bbab-7b1f04ec80bf
CheckpointFileLocation              : H:\
ConfigurationLocation               : H:\
SmartPagingFileInUse                : False
SmartPagingFilePath                 : H:\
SnapshotFileLocation                : H:\
AutomaticStartAction                : Nothing
AutomaticStartDelay                 : 0
AutomaticStopAction                 : Save
AutomaticCriticalErrorAction        : Pause
AutomaticCriticalErrorActionTimeout : 30
AutomaticCheckpointsEnabled         : True
CPUUsage                            : 0
MemoryAssigned                      : 0
MemoryDemand                        : 0
MemoryStatus                        :
NumaAligned                         :
NumaNodesCount                      : 1
NumaSocketCount                     : 1
Heartbeat                           :
IntegrationServicesState            :
IntegrationServicesVersion          : 0.0
Uptime                              : 00:00:00
OperationalStatus                   : {Ok}
PrimaryOperationalStatus            : Ok
SecondaryOperationalStatus          :
StatusDescriptions                  : {Operating normally}
PrimaryStatusDescription            : Operating normally
SecondaryStatusDescription          :
Status                              : Operating normally
ReplicationHealth                   : NotApplicable
ReplicationMode                     : None
ReplicationState                    : Disabled
ResourceMeteringEnabled             : False
CheckpointType                      : Standard
EnhancedSessionTransportType        : VMBus
Groups                              : {}
Version                             : 10.0
VirtualMachineType                  : RealizedVirtualMachine
VirtualMachineSubType               : Generation2
Notes                               :
State                               : Off
ComPort1                            : VMComPort (Name = 'COM 1', VMName = 'Barclays1') [Id = 'Microsoft:9E56E4A0-F16D-46A9-BBAB-7B1F04EC80BF\8E3A359F-559A-4B6A-98A9-1690A6100ED7\0', VMId = '9e56e4a0-f16d-46a9-bbab-7b1f04ec80bf']
ComPort2                            : VMComPort (Name = 'COM 2', VMName = 'Barclays1') [Id = 'Microsoft:9E56E4A0-F16D-46A9-BBAB-7B1F04EC80BF\8E3A359F-559A-4B6A-98A9-1690A6100ED7\1', VMId = '9e56e4a0-f16d-46a9-bbab-7b1f04ec80bf']
DVDDrives                           : {}
FibreChannelHostBusAdapters         : {}
FloppyDrive                         :
HardDrives                          : {Hard Drive on SCSI controller number 0 at location 0}
RemoteFxAdapter                     :
VMIntegrationService                : {Guest Service Interface, Heartbeat, Key-Value Pair Exchange, Shutdown…}
DynamicMemoryEnabled                : False
MemoryMaximum                       : 12582912000
MemoryMinimum                       : 6291456000
MemoryStartup                       : 8539602944
ProcessorCount                      : 4
BatteryPassthroughEnabled           : True
Generation                          : 2
IsClustered                         : False
ParentSnapshotId                    : ea1f5e5b-5221-4f89-88af-9fbe0f6cd277
ParentSnapshotName                  : Barclays - (8/19/2022 - 9:00:57 AM)
Path                                : H:\
SizeOfSystemFiles                   : 69632
GuestControlledCacheTypes           : False
LowMemoryMappedIoSpace              : 134217728
HighMemoryMappedIoSpace             : 536870912
HighMemoryMappedIoBaseAddress       : 68182605824
LockOnDisconnect                    : Off
CreationTime                        : 6/6/2022 2:25:55 PM
Id                                  : 9e56e4a0-f16d-46a9-bbab-7b1f04ec80bf
Name                                : Barclays1
NetworkAdapters                     : {Network Adapter}
CimSession                          : CimSession: .
ComputerName                        : WIN11-2
IsDeleted                           : False

PS C:\home> Get-VM -VMName Barclays1 | Select-Object VMId | Get-VHD

ComputerName            : WIN11-2
Path                    : H:\Virtual Hard Disks\Barclays1_9E0D37A6-D020-4E36-8FF8-F4A623C623CA.avhdx
VhdFormat               : VHDX
VhdType                 : Differencing
FileSize                : 21298675712
Size                    : 136365211648
MinimumSize             : 136363131392
LogicalSectorSize       : 512
PhysicalSectorSize      : 512
BlockSize               : 2097152
ParentPath              : H:\Virtual Hard Disks\Barclays1_FA7B975E-3D35-48A0-9962-1B24BEA18C57.avhdx
DiskIdentifier          : FF20FD4A-FAB5-4AA3-8D69-5A2846765715
FragmentationPercentage :
Alignment               : 1
Attached                : False
DiskNumber              :
IsPMEMCompatible        : False
AddressAbstractionType  : None
Number                  :



    
	Get-VHD | select vhdtype,path,@{label='Size(GB)';expression={$_.filesize/1gb -as [int]}}
	
	get-vm | % { 
	[pscustomobject] @{
		Name=$_.Name
		MemoryGB=$_.Name
	Select-Object Name, MemoryGB, NumCpu, @{ n="TotalHDSizeGB"; e={[math]::round((Get-HardDisk -vm $_ | 
		    Measure-Object -Sum CapacityGB).Sum)}}, @{n="Network"; e={(Get-NetworkAdapter -VM $_ | sort-object NetworkName | Select -unique -expand NetworkName) -join ', '}} # | Export-Csv -Path vms.csv
			
	# vmware alternative requires module: Install-Module VMware.VimAutomation.Core  ( not installed because ms native tools are ok)
	get-vm | Select-Object Name, MemoryGB, NumCpu, @{ n="DiskUsedGB"; e={[math]::round( $_.UsedSpaceGB )}}, @{ n="TotalHDSizeGB"; e={[math]::round((Get-HardDisk -vm $_ | 
		    Measure-Object -Sum CapacityGB).Sum)}}, @{n="Network"; e={(Get-NetworkAdapter -VM $_ | sort-object NetworkName | Select -unique -expand NetworkName) -join ', '}} # | Export-Csv -Path vms.csv

	PS C:\home> Find-Command Get-HardDisk 

Name                                Version    ModuleName                          Repository
----                                -------    ----------                          ----------
Get-HardDisk                        13.0.0.20… VMware.VimAutomation.Core           PSGallery


########################################
########################################
#######                         ########
#######      Bios               ########
#######                         ########
########################################
########################################

Set a number of host logical processors  (verify in Task Manager / Performance )
runas.exe /user:Administrator "bcdedit /set hypervisorrootproc 10"

########################################
########################################
#######                         ########
#######      Services           ########
#######                         ########
########################################
########################################

see services.txt

#############################################################################
# Running Services
Get-Service      | Where-Object {$_.Status -eq "Running"}
Get-Service -ea 0| Where-Object Status -eq "Running"
Get-Service      | Format-Table -view ansi

#############################
# Stop Service
# Stop-Service "SERVICE-NAME"

############################################################################
# disable service
Set-Service <ServiceName> -Status stopped -StartupType disabled
sc config <ServiceName> start=auto
 
# disable service with system permissions

Set-Service klvssbridge64_21.3 -Status stopped -StartupType disabled
# Set-Service: Service 'Kaspersky Volume Shadow Copy Service Bridge 21.3 (klvssbridge64_21.3)' cannot be configured due to the following error: Access is denied.
C:\home\apps\SysinternalsSuite\PsExec.exe -nobanner -s pwsh -Command { $PSStyle.OutputRendering="PlainText"; Set-Service klvssbridge64_21.3 -Status stopped -StartupType disabled }
# Set-Service: Service 'Kaspersky Volume Shadow Copy Service Bridge 21.3 (klvssbridge64_21.3)' cannot be configured due to the following error: Access is denied.
sc config klvssbridge64_21.3 start=Disabled 
# [SC] ChangeServiceConfig FAILED 5:
# Access is denied.

C:\home\apps\SysinternalsSuite\PsExec.exe -nobanner -s pwsh -Command { sc config klvssbridge64_21.3 start=Disabled }
# [SC] ChangeServiceConfig FAILED 5:
# Access is denied.

# change registry
reg query "HKLM\SYSTEM\CurrentControlSet\Services\klvssbridge64_21.3" /s
reg query "HKLM\SYSTEM\CurrentControlSet\Services\klvssbridge64_21.3" /v Start
#    Start    REG_DWORD    0x3
# Boot = 0 | System = 1 | Automatic = 2 | Manual = 3 | Disabled = 4

reg add "HKLM\SYSTEM\CurrentControlSet\Services\klvssbridge64_21.3" /v "Start" /t REG_DWORD /d 4 /f
# ERROR: Access is denied.
C:\home\apps\SysinternalsSuite\PsExec.exe -nobanner -s pwsh -Command { reg add "HKLM\SYSTEM\CurrentControlSet\Services\klvssbridge64_21.3" /v "Start" /t REG_DWORD /d 4 /f }
# ERROR: Access is denied.

Set-ItemProperty "HKLM:\SYSTEM\CurrentControlSet\Services\klvssbridge64_21.3" -Name 'Start' -Value '4' -Force
# Set-ItemProperty: Attempted to perform an unauthorized operation.

C:\home\apps\SysinternalsSuite\PsExec.exe -nobanner -s pwsh -Command { Set-ItemProperty "HKLM:\SYSTEM\CurrentControlSet\Services\klvssbridge64_21.3" -Name 'Start' -Value '4' -Force }
# Set-ItemProperty: Attempted to perform an unauthorized operation.

$acl = Get-Acl HKLM:\SYSTEM\CurrentControlSet\Services\klvssbridge64_21.3
$rule = New-Object System.Security.AccessControl.RegistryAccessRule ("Administrator","FullControl","Allow")
$acl.SetAccessRule($rule)
$acl | Set-Acl -Path HKLM:\SOFTWARE\ChangeThisKey

(Get-Acl HKLM:\SYSTEM\CurrentControlSet\Services\klvssbridge64_21.3).Access | Out-GridView

PS > $acl = Get-Acl HKLM:\SYSTEM\CurrentControlSet\Services\klvssbridge64_21.3
PS > $acl | fl *

PSPath                  : Microsoft.PowerShell.Core\Registry::HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\klvssbridge64_21.3
PSParentPath            : Microsoft.PowerShell.Core\Registry::HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services
PSChildName             : klvssbridge64_21.3
PSDrive                 : HKLM
PSProvider              : Microsoft.PowerShell.Core\Registry
CentralAccessPolicyId   :
Path                    : Microsoft.PowerShell.Core\Registry::HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\klvssbridge64_21.3
Owner                   : BUILTIN\Administrators
Group                   : NT AUTHORITY\SYSTEM
Access                  : {System.Security.AccessControl.RegistryAccessRule, System.Security.AccessControl.RegistryAccessRule, System.Security.AccessControl.RegistryAccessRule, System.Security.AccessControl.RegistryAccessRule…}
Sddl                    : O:BAG:SYD:AI(A;CIID;KR;;;BU)(A;CIID;KA;;;BA)(A;CIID;KA;;;SY)(A;CIIOID;KA;;;CO)(A;CIID;KR;;;AC)(A;CIID;KR;;;S-1-15-3-1024-106536, 5936-1281604716-3511738428-1654721687-432734479-3232135806-4053264122-3456934681)
AccessToString          : BUILTIN\Users Allow  ReadKey, BUILTIN\Administrators Allow  FullControl, NT AUTHORITY\SYSTEM Allow  FullControl
                          CREATOR OWNER Allow  FullControl, APPLICATION PACKAGE AUTHORITY\ALL APPLICATION PACKAGES Allow  ReadKey
                          S-1-15-3-1024-1065365936-1281604716-3511738428-1654721687-432734479-3232135806-4053264122-3456934681 Allow  ReadKey
AuditToString           :
AccessRightType         : System.Security.AccessControl.RegistryRights
AccessRuleType          : System.Security.AccessControl.RegistryAccessRule
AuditRuleType           : System.Security.AccessControl.RegistryAuditRule
AreAccessRulesProtected : False
AreAuditRulesProtected  : False
AreAccessRulesCanonical : True
AreAuditRulesCanonical  : True


############################################################################
# Win32_Service
Get-CimInstance Win32_Service  | Select * | Sort @('StartMode','State','Name') | Out-GridView

# Get-CimProperties Win32_Service

# DisplayName,@{N='User';E='StartName'}
[wmi]"root\cimv2:win32_service.Name='spooler'"
# -replace('(\w+)=([0-9]\w*)  (.+)','$1=$2; $1_INFO="$3"') -replace('(\w+)=([0-9]\w*).*','$1=$2') 

sc.exe query type=driver state=inactive # state=active doesn't work
sc.exe query state=inactive type=all
sc.exe query state=inactive type=service  | findstr.exe -i '.*app.*info'
( (sc.exe query state=inactive | Out-String -stream ).Trim() |? {$_} | select -first 8).Trim() -replace('([\w:]+)\W*:\W*','$1=') -replace('(\w+)=([0-9]\w*)  (.+)','$1=$2; $1_EXTRA="$3"') -replace('^(\w+)=([^0-9].*)','$1="$2"')
(sc.exe query state=inactive | Out-String).Trim() -Replace("`r","") -replace(" *([^ :]*) *: *([^`n]+)*`n",'$1="$2"; ') -replace(' *"','"') -Split("`n")  | select -first 1 
(sc.exe query state=inactive | Out-String).Trim() -Replace("`r","") -Split("`n`n") -replace(" *: *([^ `n]+)",'=$1') | select -first 1 | % { ConvertFrom-StringData $_; '--';'val:@{{{0}}}' -f $_ }
(sc.exe query state=inactive | Out-String).Trim() -Replace("`r","") -replace(":","=") -Split("`n`n") | select -first 1 | % { 'val:{0}' -f $($_ -replace("`n",'\n')); ConvertFrom-StringData $_ -Delimiter ';' }
(sc.exe query state=inactive | Out-String).Trim() -Replace("`r","") -replace(" *([^ :]*) *: *([^`n]+)*`n",'$1="$2"; ') -replace(' *"','"') -Split("`n")  | select -first 1 


############################################################################
# Service Report
Get-Service Bits,Winrm | Convertto-Markdown -title "Service Check" -precontent "## $($env:computername)" -postcontent "_report $(Get-Date)_"
Get-Service Bits,Winrm | ConvertTo-Markdown -title "Service Check" -PreContent "## $($env:computername)" -postcontent "_Confidential_" -AsList


###############################################################################
# Commands: sc tasklist
sc queryex type=service state=all | findstr.exe /i 'SERVICE_NAME'
tasklist /svc /fi "services eq StateRepository"

#############################################################################
# Win32_Service
$service_name="sysmo%"
Get-CimInstance -Class Win32_Service -Filter "Name LIKE '$service_name'
Get-CimInstance -Class Win32_Service -Filter "Name LIKE '$service_name' and ProcessID>0" 
Get-WmiObject -Query "select * from win32_service where name like '$service_name'" 

#############################################################################
# Service Owner
 Get-Service workstation | select  Username,Starttype,BinaryPathName
 Get-Service * | ft DisplayName,Username,Status,Starttype,BinaryPathName,Description


########################################
########################################
#######                         ########
#######   Scheduled Tasks       ########
#######   Autoruns              ########
#######   Run Automatically     ########
#######                         ########
########################################
########################################

# $MyTasks=Get-ScheduledTask |% { $t=$_; $i=Get-ScheduledTaskInfo $t; [pscustomobject] @{
   TaskName=$t.TaskPath+$t.TaskName; State=$t.State; LastRunTime=$i.LastRunTime; 
   Cnt=$t.Triggers.Count; Triggers=($t.Triggers -join '; ') -replace "(?<=.{50}).+","..";
   Description=$t.Description -replace "[`r`n]+",'\n' -replace '\s+',' ' -replace "(?<=.{80}).+",".."}; 
} |? LastRunTime -gt (Get-Date).AddDays(-400)
# Output  November 19, 2022 8:50 PM: see scheduled_tasks.txt file.


Get-ScheduledTask |? TaskPath -match 'Windows' | ? Description -match  'Update|Licen|Securit|Integr|Monitor|App|Store' |? State -ne Disabled |% {
    $t=$_; $i=Get-ScheduledTaskInfo $t;
    [pscustomobject] @{ 
      TaskName=$t.TaskName; State=$t.State;
      LastRunTime=$i.LastRunTime; TaskPath=$t.TaskPath; 
      Triggers=$t.Triggers; Description=$t.Description; NextRunTime=$i.NextRunTime; Settings=$t.Settings; Date=$t.Date; }
   } |? LastRunTime -gt (Get-Date).AddDays(-30) | sort LastRunTime -desc | ft -a

TaskName                          State LastRunTime           TaskPath                                   Triggers                                                                                                         Description
--------                          ----- -----------           --------                                   --------                                                                                                         -----------
Scheduled Start                   Ready 8/11/2022 7:29:29 PM  \Microsoft\Windows\WindowsUpdate\          {MSFT_TaskTimeTrigger, MSFT_TaskSessionStateChangeTrigger, MSFT_TaskSessionStateChangeTrigger, MSFT_TaskTrigger} This task is used to start the Windows Update service when needed to perform scheduled operat…
PcaPatchDbTask                    Ready 8/11/2022 4:39:39 PM  \Microsoft\Windows\Application Experience\ {MSFT_TaskTimeTrigger}                                                                                           Updates compatibility database
DmClient                          Ready 8/11/2022 2:17:17 PM  \Microsoft\Windows\Feedback\Siuf\                                                                                                                           Update SIUF strings
TempSignedLicenseExchange         Ready 8/11/2022 2:17:17 PM  \Microsoft\Windows\License Manager\                                                                                                                         Exchanges temporary preinstalled licenses for Windows Store licenses.
appuriverifierdaily               Ready 8/11/2022 2:17:17 PM  \Microsoft\Windows\ApplicationData\                                                                                                                         Verifies AppUriHandler host registrations.
Calibration Loader                Ready 8/11/2022 12:56:56 PM \Microsoft\Windows\WindowsColorSystem\     {MSFT_TaskLogonTrigger, MSFT_TaskSessionStateChangeTrigger}                                                      This task applies color calibration settings.
MsCtfMonitor                      Ready 8/11/2022 12:56:56 PM \Microsoft\Windows\TextServicesFramework\  {MSFT_TaskLogonTrigger}                                                                                          TextServicesFramework monitor task
ExploitGuard MDM policy Refresh   Ready 8/11/2022 12:55:55 PM \Microsoft\Windows\ExploitGuard\           {MSFT_TaskTrigger, MSFT_TaskTrigger, MSFT_TaskBootTrigger}                                                       Task for applying changes to the machine's Exploit Protection settings.
ResolutionHost                    Ready 8/11/2022 12:03:03 PM \Microsoft\Windows\WDI\                                                                                                                                     The Windows Diagnostic Infrastructure Resolution host enables interactive resolutions for sys…
MapsUpdateTask                    Ready 8/11/2022 12:19:19 AM \Microsoft\Windows\Maps\                   {MSFT_TaskTimeTrigger}                                                                                           This task checks for updates to maps which you have downloaded for offline use. Disabling thi…
appuriverifierinstall             Ready 8/10/2022 12:47:47 AM \Microsoft\Windows\ApplicationData\        {MSFT_TaskTrigger}                                                                                               Verifies AppUriHandler host registrations.
DmClientOnScenarioDownload        Ready 8/9/2022 6:21:21 PM   \Microsoft\Windows\Feedback\Siuf\          {MSFT_TaskTrigger}                                                                                               Update SIUF strings
BgTaskRegistrationMaintenanceTask Ready 8/9/2022 12:10:10 PM  \Microsoft\Windows\BrokerInfrastructure\                                                                                                                    Maintains registrations for background tasks for Universal Windows Platform applications.
Scheduled                         Ready 8/7/2022 12:08:08 PM  \Microsoft\Windows\Diagnosis\                                                                                                                               The Windows Scheduled Maintenance Task performs periodic maintenance of the computer system b…
PerformRemediation                Ready 8/7/2022 12:01:01 PM  \Microsoft\Windows\WaaSMedic\              {MSFT_TaskTimeTrigger}                                                                                           Helps recover update-related services to the supported configuration.
SynchronizeTimeZone               Ready 8/6/2022 11:33:33 AM  \Microsoft\Windows\Time Zone\                                                                                                                               Updates timezone information. If this task is stopped, local time may not be accurate for som…
Backup

C:> C:\home\apps\SysinternalsSuite\PsExec.exe -nobanner -s pwsh -Command { $PSStyle.OutputRendering="PlainText"; Get-ScheduledTask |? TaskPath -match 'Device Setup'   }
C:> C:\home\apps\SysinternalsSuite\PsExec.exe -nobanner -s pwsh -Command { Get-ScheduledTask |? TaskPath -match 'Device Setup' | Disable-ScheduledTask  }


VM C:> \\tsclient\C\home\apps\SysinternalsSuite\PsExec.exe -nobanner -s pwsh -Command { Get-ScheduledTask |? TaskPath -match 'Windows\\WaaSMedic' |Disable-ScheduledTask  }
TaskPath                                       TaskName                          State
--------                                       --------                          -----
\Microsoft\Windows\WaaSMedic\                  PerformRemediation                Disabled

PS C:\Users\User> Get-ScheduledTask |? TaskPath -match 'Windows' | ? Description -match  'Update|Licen|Securit|Integr|Monitor|App|Store' |? State -ne Disabled | Disable-ScheduledTask
TaskPath                                       TaskName                          State
--------                                       --------                          -----
\Microsoft\Windows\Active Directory Rights Ma… AD RMS Rights Policy Template Ma… Disabled
\Microsoft\Windows\ApplicationData\            appuriverifierdaily               Disabled
\Microsoft\Windows\Application Experience\     PcaPatchDbTask                    Disabled
\Microsoft\Windows\BrokerInfrastructure\       BgTaskRegistrationMaintenanceTask Disabled
\Microsoft\Windows\ApplicationData\            appuriverifierinstall             Disabled
\Microsoft\Windows\AppListBackup\              Backup                            Disabled
\Microsoft\Windows\Feedback\Siuf\              DmClient                          Disabled
\Microsoft\Windows\ExploitGuard\               ExploitGuard MDM policy Refresh   Disabled
\Microsoft\Windows\Diagnosis\                  Scheduled                         Disabled
\Microsoft\Windows\Feedback\Siuf\              DmClientOnScenarioDownload        Disabled
\Microsoft\Windows\License Manager\            TempSignedLicenseExchange         Disabled
\Microsoft\Windows\Maps\                       MapsUpdateTask                    Disabled
\Microsoft\Windows\PI\                         Secure-Boot-Update                Disabled
\Microsoft\Windows\Shell\                      FamilySafetyMonitor               Disabled
\Microsoft\Windows\TextServicesFramework\      MsCtfMonitor                      Disabled
\Microsoft\Windows\Time Zone\                  SynchronizeTimeZone               Disabled
Disable-ScheduledTask: Access is denied.       # \Microsoft\Windows\WaaSMedic\ PerformRemediation, to disable use PsExec.exe, see above 
\Microsoft\Windows\Windows Media Sharing\      UpdateLibrary                     Disabled
\Microsoft\Windows\WindowsUpdate\              Scheduled Start                   Disabled
\Microsoft\Windows\WDI\                        ResolutionHost                    Disabled
\Microsoft\Windows\WindowsColorSystem\         Calibration Loader                Disabled

Get-ScheduledTask |? TaskPath -match 'Windows' | ? Description -match  'Update|Licen|Securit|Integr|Monitor|App|Store' |? State -ne Disabled 


Get-ScheduledTask |? TaskPath -match 'Windows\\StateRepository' |? State -ne Disabled | Disable-ScheduledTask

TaskPath                                       TaskName                          State
--------                                       --------                          -----
\Microsoft\Windows\StateRepository\            MaintenanceTasks                  Disabled

PS C:\Users\User> Get-ScheduledTask |? TaskPath -notmatch 'Windows' |? State -ne Disabled | Disable-ScheduledTask
TaskPath                                       TaskName                          State
--------                                       --------                          -----
\                                              OneDrive Reporting Task-S-1-5-21… Disabled
\Microsoft\Office\                             Office Automatic Updates          Disabled
\Microsoft\Office\                             Office ClickToRun Service Monitor Disabled
\                                              OneDrive Standalone Update Task-… Disabled
\Microsoft\VisualStudio\                       VSIX Auto Update                  Disabled
\Microsoft\VisualStudio\Updates\               UpdateConfiguration_S-1-5-21-454… Disabled
\Mozilla\                                      Firefox Background Update 308046… Disabled
\Microsoft\XblGameSave\                        XblGameSaveTask                   Disabled
\                                              GoogleUpdateTaskMachineCore{B5BA36BF-5EC8-4E17-98C1-17BDC9B57310}            Disabled
\                                              GoogleUpdateTaskMachineUA{7B98A0CB-ED07-4D9C-8F21-BBB49F033ACC}              Disabled
\                                              MicrosoftEdgeUpdateTaskMachineCore                                           Disabled
\                                              MicrosoftEdgeUpdateTaskMachineUA                                             Disabled
\                                              OneDrive Reporting Task-S-1-5-21-454062999-803709901-3569341773-1001         Disabled
\                                              OneDrive Standalone Update Task-S-1-5-21-454062999-803709901-3569341773-1001 Disabled

PS C:\Users\User> Get-ScheduledTask |? TaskPath -match 'Windows\\UpdateOrchestrator'  | ft -a

TaskPath                               TaskName                  State
--------                               --------                  -----
\Microsoft\Windows\UpdateOrchestrator\ Report policies           Ready
\Microsoft\Windows\UpdateOrchestrator\ Schedule Maintenance Work Disabled
\Microsoft\Windows\UpdateOrchestrator\ Schedule Scan             Ready
\Microsoft\Windows\UpdateOrchestrator\ Schedule Scan Static Task Ready
\Microsoft\Windows\UpdateOrchestrator\ Schedule Wake To Work     Disabled
\Microsoft\Windows\UpdateOrchestrator\ Schedule Work             Disabled
\Microsoft\Windows\UpdateOrchestrator\ Start Oobe Expedite Work  Ready
\Microsoft\Windows\UpdateOrchestrator\ StartOobeAppsScan         Ready
\Microsoft\Windows\UpdateOrchestrator\ UpdateModelTask           Ready
\Microsoft\Windows\UpdateOrchestrator\ USO_UxBroker              Ready
\Microsoft\Windows\UpdateOrchestrator\ UUS Failover Task         Ready

\\tsclient\C\home\apps\SysinternalsSuite\PsExec.exe -nobanner -sid  pwsh -Command { Get-ScheduledTask |? TaskPath -match 'Windows\\UpdateOrchestrator'  }


#####################
# schtasks.exe 
# schtasks.exe /Query /V /FO CSV

$SCHEDULED_ARR=schtasks.exe /Query /V /FO CSV |% { [regex]::replace($_,'[^\x20-\x7F]','').Trim() } |? { $_ } | ConvertFrom-Csv
$SCHEDULED_ARR.Count # >> 392


# 'Task To Run', 'Run As User', 'Start In', 'Start Date', 'Start Time', 'End Date', 'Days', 'Months','Author', 'Comment Idle Time'
$OutCols=@( 'TaskName',
  @{N='LastRun';E={[DateTime]$_.'Last Run Time'}},
  @{N='TaskToRun';E={$_.'Task To Run'}},
  @{N='RunAsUser';E={$_.'Run As User'}},
  @{N='PowerMgmt';E={$_.'Power Management'}},
  @{N='NextRun';E={[DateTime]$_.'Next Run Time'}},
  @{N='ScheduleType';E={ switch -wildcard ($_.'Schedule Type') { 
      'At idle time' {'IDLE'} 
	  'At logon time' {'LOGON'} 
	  'At system start up' {'BOOT'}  
      'Daily*' {'DAILY'} 
	  'On demand only' {'ONDEMAND'} 
	  'One Time Only' {'ONCE'}  'One Time Only, Hourly*' {'EVERY HOUR'} 'One Time Only, Minute*' {'EVERY MINUTE'}
	  'When an event occurs' {'EVENT'} 
	  'Undefined' {'UNDEF'}
	  default {$_} }}},	  
  @{N='Mode';E={ switch($_.'Logon Mode') { 'Interactive/Background' {'USER/BG'} 'Interactive only' {'USER'} default {$_} }}},
  @{N='Comment'; E={$_.Comment.SubString(0,100)+$(if($_.Comment.Length -gt 100){'..'})}},
  'Start In','Author', 
  'Idle Time',
  @{N='LastRunDay';E={([DateTime]$_.'Last Run Time').ToString('yyyy/MM/dd')}},
  @{N='Type';E={ switch -wildcard ($_.'Schedule Type') { 
      'At idle time' {'IDLE'} 
	  'At logon time' {'LOGON'} 
	  'At system start up' {'BOOT'}  
	  'On demand only' {'ONDEMAND'} 
	  'When an event occurs' {'EVENT'} 
	  'Undefined' {'UNDEF'}
	  default {'PERIODIC'} }}},  
  'Status')
$filter={$_.TaskName -ne 'TaskName'}
$type='.*'; $mode='.*'; $status='.*'; $name='.*'; 
$status='Running|Ready';
$where_script={$_.Type -match $type -and $_.Mode -match $mode -and $_.Status -match $status -and ( $_.TaskName -match $name -or  $_.Comment -match $name  ) }

$SCHEDULED_ARR |? $filter | Select $OutCols |? $where_script | Sort LastRun | Group Type,Status | Sort Name,Count | ft -auto
Count Name              Group
----- ----              -----
   14 BOOT, Ready       {@{TaskName=\Microsoft\Windows\SpacePort\SpaceAgentTask; LastRun=11/30/1999; NextRun=; Task To Run=%windir%\system32\SpaceAgent.exe ; Run As User=SYSTEM; Start In=N/A; Author=Microsoft Corporation; PowerMgmt=; Idle Time=Disabled; Comment=; ScheduleType=BOOT; Mode=USER/BG; Type=BOOT; Status=Ready}, @{TaskName=\Microsoft\Windows\SpacePort\SpaceManagerTask; LastRun=11/30/1999; NextRun=; Task To Run=%windir%\system32\spaceman.exe /Wo…
   18 EVENT, Ready      {@{TaskName=\Microsoft\Windows\Windows Filtering Platform\BfeOnServiceStartTypeChange; LastRun=11/30/1999; NextRun=; Task To Run=%windir%\system32\rundll32.exe bfe.dll,BfeOnServiceStartTypeChange; Run As User=SYSTEM; Start In=N/A; Author=Microsoft Corporation; PowerMgmt=; Idle Time=Disabled; Comment=This task adjusts the start type for firewall-triggered services when the start type of the Base Fil..; ScheduleType=EVENT; Mode=USE…
    1 IDLE, Ready       {@{TaskName=\Microsoft\XblGameSave\XblGameSaveTask; LastRun=11/30/1999; NextRun=; Task To Run=%windir%\System32\XblGameSaveTask.exe standby; Run As User=SYSTEM; Start In=N/A; Author=Microsoft; PowerMgmt=No Start On Batteries; Idle Time=Only Start If Idle for  minutes, If Not Idle Retry For  minutes Stop the task if Idle State end; Comment=; ScheduleType=IDLE; Mode=USER/BG; Type=IDLE; Status=Ready}}
   18 LOGON, Ready      {@{TaskName=\Microsoft\Windows\Active Directory Rights Management Services Client\AD RMS Rights Policy Template Management (Manual); LastRun=11/30/1999; NextRun=; Task To Run=COM handler; Run As User=Everyone; Start In=N/A; Author=Microsoft Corporation; PowerMgmt=Stop On Battery Mode, No Start On Batteries; Idle Time=Disabled; Comment=Updates the AD RMS rights policy templates for the user. This job provides a credential prompt i…
    2 LOGON, Running    {@{TaskName=\Microsoft\Windows\Wininet\CacheTask; LastRun=5/26/2022 ; NextRun=; Task To Run=COM handler; Run As User=Users; Start In=N/A; Author=Microsoft; PowerMgmt=; Idle Time=Disabled; Comment=; ScheduleType=LOGON; Mode=USER/BG; Type=LOGON; Status=Running}, @{TaskName=\Microsoft\Windows\Multimedia\SystemSoundsService; LastRun=5/26/2022 ; NextRun=; Task To Run=COM handler; Run As User=Users; Start In=N/A; Author=N/A; PowerMgmt=…
   52 ONDEMAND, Ready   {@{TaskName=\Microsoft\Windows\UPnP\UPnPHostConfig; LastRun=11/30/1999; NextRun=; Task To Run=sc.exe config upnphost start= auto; Run As User=SYSTEM; Start In=N/A; Author=Microsoft; PowerMgmt=; Idle Time=Disabled; Comment=; ScheduleType=ONDEMAND; Mode=USER/BG; Type=ONDEMAND; Status=Ready}, @{TaskName=\Microsoft\Windows\Data Integrity Scan\Data Integrity Scan; LastRun=11/30/1999; NextRun=; Task To Run=COM handler; Run As User=SYST…
   25 PERIODIC, Ready   {@{TaskName=\Microsoft\Windows\DeviceDirectoryClient\RegisterDeviceWnsFallback; LastRun=11/30/1999; NextRun=6/1/2022 9; Task To Run=COM handler; Run As User=SYSTEM; Start In=N/A; Author=N/A; PowerMgmt=; Idle Time=Disabled; Comment=; ScheduleType=ONCE; Mode=USER/BG; Type=PERIODIC; Status=Ready}, @{TaskName=\Microsoft\Windows\SoftwareProtectionPlatform\SvcRestartTask; LastRun=11/30/1999; NextRun=5/3/2122 1; Task To Run=COM handler;…
    1 PERIODIC, Running {@{TaskName=\Microsoft\Windows\DeviceDirectoryClient\RegisterDevicePeriodic24; LastRun=5/26/2022 ; NextRun=5/28/2022 ; Task To Run=COM handler; Run As User=SYSTEM; Start In=N/A; Author=N/A; PowerMgmt=; Idle Time=Only Start If Idle for 1 minutes, If Not Idle Retry For 1920 minutes; Comment=; ScheduleType=EVERY HOUR; Mode=USER/BG; Type=PERIODIC; Status=Running}}
  113 UNDEF, Ready      {@{TaskName=\Microsoft\Windows\USB\Usb-Notifications; LastRun=11/30/1999; NextRun=; Task To Run=COM handler; Run As User=INTERACTIVE; Start In=N/A; Author=Microsoft Corporation; PowerMgmt=; Idle Time=Disabled; Comment=; ScheduleType=UNDEF; Mode=USER/BG; Type=UNDEF; Status=Ready}, @{TaskName=\Microsoft\Windows\UpdateOrchestrator\UUS Failover Task; LastRun=11/30/1999; NextRun=; Task To Run=%systemroot%\system32\usoclient.exe Handle…

$SCHEDULED_ARR |? $filter | Select $OutCols |? $where_script | Group LastRunDay | Sort -desc Values | ft -a *

$SCHEDULED_ARR |? $filter | Select $OutCols |? $where_script | Sort LastRun | Group LastRunDay,Type | Sort -desc Values | Select * -Expand Group  -ea 0 | 
 ft -auto -group @{n='Group';e={ 'Count:{0} Type:{1}' -f $_.Count,$_.Name }} TaskName, LastRun, NextRun, TaskToRun, RunAsUser, Mode, Comment


$PSStyle.OutputRendering="PlainText"
PS C:\Users\alexe> $SCHEDULED_ARR |? $filter | Select $OutCols | Sort LastRun > C:\home\data\Registry\all_tasks.txt
$PSStyle.OutputRendering="ansi"


$SCHEDULED_ARR |? $where_script | Select @($OutCols+$GroupCols) | Sort $GroupCols | Group $GroupCols | select -Property Count,Name -Expand Group -first 1 -erroraction 0 | Select -exclude $ExcludeCols+$GroupCols | ft -auto -group @{n='Group';e={ 'Count:{0} Schedule Type:{1}' -f $_.Count,$_.Name }} *
echo "type:$type mode:$mode status:$status state:$state name:$name"

$DRIVER_ARR |? $where_script | Sort $GroupCols| Group $GroupCols | select -Property Count,Name -Expand Group -erroraction 0 | ft -group @{n='Group';e={ 'Count:{0} StartMode:{1}' -f $_.Count,$_.Name.Replace(', ',' State:') }} -a; echo "mode:$mode state:$state name:$name"


#######################################
#  driverquery /v /fo CSV
$DRIVER_ARR=driverquery /v /fo CSV |% { [regex]::replace($_,'[^\x20-\x7F]','').Trim() } |? { $_ } | ConvertFrom-Csv
$DRIVER_SI_ARR=driverquery /si /fo CSV |% { [regex]::replace($_,'[^\x20-\x7F]','').Trim() -replace 'Intel[^,]*,','Intel' } |? { $_ } | ConvertFrom-Csv
$CutList="Intel|Kaspersky|Logitech|Dell|Realtek|Plex|WireGuard"
$DRIVER_SI_ARR=driverquery /si /fo CSV |% { [regex]::replace($_,'[^\x20-\x7F]','').Trim() -replace "($CutList)[^`"]*",'$1' } |? { $_ } | ConvertFrom-Csv

$DRIVER_ARR.Count # >>> 441

$DRIVER_ARR | Group 'Start Mode',State
Count Name              Group
----- ----              -----
   16 Auto, Running     {@{Module Name=bindflt; Display Name=Windows Bind Filter Driver; Description=Windows Bind Filter Driver; Driver Type=File System ; Start Mode=Auto; State=Running; Status=OK; Accept Stop=TRUE; Accept Pause=FALSE; Paged Pool(bytes)=94,208; Code(bytes)=24,576; BSS(bytes)=0; Link Date=; Path=C:\Windows\system32\drivers\bindflt.sys; Init(bytes)=4,096}, @{Module Name=CldFlt; Display Name=Windows Cloud Files Filter Driver; Description=W…
   48 Boot, Running     {@{Module Name=ACPI; Display Name=Microsoft ACPI Driver; Description=Microsoft ACPI Driver; Driver Type=Kernel ; Start Mode=Boot; State=Running; Status=OK; Accept Stop=TRUE; Accept Pause=FALSE; Paged Pool(bytes)=180,224; Code(bytes)=442,368; BSS(bytes)=0; Link Date=; Path=C:\Windows\system32\drivers\ACPI.sys; Init(bytes)=24,576}, @{Module Name=acpiex; Display Name=Microsoft ACPIEx Driver; Description=Microsoft ACPIEx Driver; Driv…
    2 Boot, Stopped     {@{Module Name=hwpolicy; Display Name=Hardware Policy Driver; Description=Hardware Policy Driver; Driver Type=Kernel ; Start Mode=Boot; State=Stopped; Status=OK; Accept Stop=FALSE; Accept Pause=FALSE; Paged Pool(bytes)=4,096; Code(bytes)=4,096; BSS(bytes)=0; Link Date=; Path=C:\Windows\system32\drivers\hwpolicy.sys; Init(bytes)=4,096}, @{Module Name=klelam; Display Name=klelam; Description=klelam; Driver Type=Kernel ; Start Mode=…
    6 Disabled, Stopped {@{Module Name=cdfs; Display Name=CD/DVD File System Reader; Description=CD/DVD File System Reader; Driver Type=File System ; Start Mode=Disabled; State=Stopped; Status=OK; Accept Stop=FALSE; Accept Pause=FALSE; Paged Pool(bytes)=69,632; Code(bytes)=12,288; BSS(bytes)=0; Link Date=; Path=C:\Windows\system32\DRIVERS\cdfs.sys; Init(bytes)=4,096}, @{Module Name=cnghwassist; Display Name=CNG Hardware Assist algorithm provider; Descri…
   88 Manual, Running   {@{Module Name=acpitime; Display Name=ACPI Wake Alarm Driver; Description=ACPI Wake Alarm Driver; Driver Type=Kernel ; Start Mode=Manual; State=Running; Status=OK; Accept Stop=TRUE; Accept Pause=FALSE; Paged Pool(bytes)=8,192; Code(bytes)=4,096; BSS(bytes)=0; Link Date=; Path=C:\Windows\system32\drivers\acpitime.sys; Init(bytes)=4,096}, @{Module Name=bowser; Display Name=Browser; Description=Browser; Driver Type=File System ; Sta…
  235 Manual, Stopped   {@{Module Name=1394ohci; Display Name=1394 OHCI Compliant Host Controller; Description=1394 OHCI Compliant Host Controller; Driver Type=Kernel ; Start Mode=Manual; State=Stopped; Status=OK; Accept Stop=FALSE; Accept Pause=FALSE; Paged Pool(bytes)=4,096; Code(bytes)=229,376; BSS(bytes)=0; Link Date=; Path=C:\Windows\system32\drivers\1394ohci.sys; Init(bytes)=4,096}, @{Module Name=3ware; Display Name=3ware; Description=3ware; Drive…
   45 System, Running   {@{Module Name=AFD; Display Name=Ancillary Function Driver for Winsock; Description=Ancillary Function Driver for Winsock; Driver Type=Kernel ; Start Mode=System; State=Running; Status=OK; Accept Stop=TRUE; Accept Pause=FALSE; Paged Pool(bytes)=143,360; Code(bytes)=311,296; BSS(bytes)=0; Link Date=; Path=C:\Windows\system32\drivers\afd.sys; Init(bytes)=8,192}, @{Module Name=afunix; Display Name=afunix; Description=afunix; Driver …
    1 System, Stopped   {@{Module Name=dam; Display Name=Desktop Activity Moderator Driver; Description=Desktop Activity Moderator Driver; Driver Type=Kernel ; Start Mode=System; State=Stopped; Status=OK; Accept Stop=FALSE; Accept Pause=FALSE; Paged Pool(bytes)=49,152; Code(bytes)=8,192; BSS(bytes)=0; Link Date=; Path=C:\Windows\system32\drivers\dam.sys; Init(bytes)=4,096}}


PS C:\Windows\System32> 'Date: {0} | No of Drivers: {1}/{2}' -f (Get-Date).ToString('yy-MM-dd'), $DRIVER_ARR.Count, $DRIVER_SI_ARR.Count
Date: 23-01-17 | No of Drivers: 446/303
PS C:\Windows\System32> $DRIVER_ARR | Group 'Start Mode',State
Count Name                      Group
----- ----                      -----
   14 Auto, Running             {@{Module Name=bindflt; Display Name=Windows Bind Filter Driver; Description=Windows Bind Filter Driver; Driver Type=File System ; Start Mode=Auto; State=Running; Status=OK; Accept Stop=TRUE; Accept Pause=FALSE; Paged Pool(bytes)=94,208; Code(bytes)=24,576;…
   47 Boot, Running             {@{Module Name=ACPI; Display Name=Microsoft ACPI Driver; Description=Microsoft ACPI Driver; Driver Type=Kernel ; Start Mode=Boot; State=Running; Status=OK; Accept Stop=TRUE; Accept Pause=FALSE; Paged Pool(bytes)=180,224; Code(bytes)=442,368; BSS(bytes)=0; L…
    2 Boot, Stopped             {@{Module Name=hwpolicy; Display Name=Hardware Policy Driver; Description=Hardware Policy Driver; Driver Type=Kernel ; Start Mode=Boot; State=Stopped; Status=OK; Accept Stop=FALSE; Accept Pause=FALSE; Paged Pool(bytes)=4,096; Code(bytes)=4,096; BSS(bytes)=0…
    8 Disabled, Stopped         {@{Module Name=BthHFEnum; Display Name=Microsoft Bluetooth Hands-Free Profile driver; Description=Microsoft Bluetooth Hands-Free Profile driver; Driver Type=Kernel ; Start Mode=Disabled; State=Stopped; Status=OK; Accept Stop=FALSE; Accept Pause=FALSE; Paged…
   94 Manual, Running           {@{Module Name=acpitime; Display Name=ACPI Wake Alarm Driver; Description=ACPI Wake Alarm Driver; Driver Type=Kernel ; Start Mode=Manual; State=Running; Status=OK; Accept Stop=TRUE; Accept Pause=FALSE; Paged Pool(bytes)=8,192; Code(bytes)=4,096; BSS(bytes)=…
  237 Manual, Stopped           {@{Module Name=1394ohci; Display Name=1394 OHCI Compliant Host Controller; Description=1394 OHCI Compliant Host Controller; Driver Type=Kernel ; Start Mode=Manual; State=Stopped; Status=OK; Accept Stop=FALSE; Accept Pause=FALSE; Paged Pool(bytes)=4,096; Cod…
   43 System, Running           {@{Module Name=AFD; Display Name=Ancillary Function Driver for Winsock; Description=Ancillary Function Driver for Winsock; Driver Type=Kernel ; Start Mode=System; State=Running; Status=OK; Accept Stop=TRUE; Accept Pause=FALSE; Paged Pool(bytes)=143,360; Cod…
    1 System, Stopped           {@{Module Name=dam; Display Name=Desktop Activity Moderator Driver; Description=Desktop Activity Moderator Driver; Driver Type=Kernel ; Start Mode=System; State=Stopped; Status=OK; Accept Stop=FALSE; Accept Pause=FALSE; Paged Pool(bytes)=49,152; Code(bytes)…

PS C:\Windows\System32>  $DRIVER_SI_ARR | group Manufacturer
Count Name                      Group
----- ----                      -----
    1 (Standard computers)      {@{DeviceName=ACPI x64-based PC; InfName=hal.inf; IsSigned=TRUE; Manufacturer=(Standard computers)}}
    3 (Standard disk drives)    {@{DeviceName=Disk drive; InfName=disk.inf; IsSigned=TRUE; Manufacturer=(Standard disk drives)}, @{DeviceName=Disk drive; InfName=disk.inf; IsSigned=TRUE; Manufacturer=(Standard disk drives)}, @{DeviceName=Disk drive; InfName=disk.inf; IsSigned=TRUE; Manufa…
    1 (Standard display types)  {@{DeviceName=Microsoft Basic Display Driver; InfName=basicdisplay.inf; IsSigned=TRUE; Manufacturer=(Standard display types)}}
    4 (Standard keyboards)      {@{DeviceName=Standard PS/2 Keyboard; InfName=keyboard.inf; IsSigned=TRUE; Manufacturer=(Standard keyboards)}, @{DeviceName=HID Keyboard Device; InfName=keyboard.inf; IsSigned=TRUE; Manufacturer=(Standard keyboards)}, @{DeviceName=HID Keyboard Device; InfNa…
    5 (Standard monitor types)  {@{DeviceName=Generic PnP Monitor; InfName=monitor.inf; IsSigned=TRUE; Manufacturer=(Standard monitor types)}, @{DeviceName=Generic PnP Monitor; InfName=monitor.inf; IsSigned=TRUE; Manufacturer=(Standard monitor types)}, @{DeviceName=Generic PnP Monitor; In…
    1 (Standard port types)     {@{DeviceName=Communications Port; InfName=msports.inf; IsSigned=TRUE; Manufacturer=(Standard port types)}}
   39 (Standard system devices) {@{DeviceName=Plug and Play Software Device Enumerator; InfName=swenum.inf; IsSigned=TRUE; Manufacturer=(Standard system devices)}, @{DeviceName=Microsoft System Management BIOS Driver; InfName=mssmbios.inf; IsSigned=TRUE; Manufacturer=(Standard system devi…
    2 (Standard USB Host Contr… {@{DeviceName=USB Composite Device; InfName=usb.inf; IsSigned=TRUE; Manufacturer=(Standard USB Host Controller)}, @{DeviceName=USB Composite Device; InfName=usb.inf; IsSigned=TRUE; Manufacturer=(Standard USB Host Controller)}}
    3 (Standard USB HUBs)       {@{DeviceName=Generic USB Hub; InfName=usbhub3.inf; IsSigned=TRUE; Manufacturer=(Standard USB HUBs)}, @{DeviceName=Generic SuperSpeed USB Hub; InfName=usbhub3.inf; IsSigned=TRUE; Manufacturer=(Standard USB HUBs)}, @{DeviceName=USB Root Hub (USB 3.0); InfNam…
    1 (Standard)                {@{DeviceName=Trusted Platform Module 2.0; InfName=tpm.inf; IsSigned=TRUE; Manufacturer=(Standard)}}
    2 Dell                      {@{DeviceName=Dell; InfName=oem28.inf; IsSigned=TRUE; Manufacturer=Dell}, @{DeviceName=System Firmware 1.13.0; InfName=oem35.inf; IsSigned=TRUE; Manufacturer=Dell}}
    1 Generic USB xHCI Host Co… {@{DeviceName=USB xHCI Compliant Host Controller; InfName=usbxhci.inf; IsSigned=TRUE; Manufacturer=Generic USB xHCI Host Controller}}
  120 INTEL                     {@{DeviceName=Intel; InfName=oem12.inf; IsSigned=TRUE; Manufacturer=INTEL}, @{DeviceName=Intel; InfName=oem12.inf; IsSigned=TRUE; Manufacturer=INTEL}, @{DeviceName=Intel; InfName=oem12.inf; IsSigned=TRUE; Manufacturer=INTEL}, @{DeviceName=Intel; InfName=oem…
    1 Kaspersky                 {@{DeviceName=Kaspersky; InfName=oem37.inf; IsSigned=TRUE; Manufacturer=Kaspersky}}
    2 Logitech                  {@{DeviceName=Logitech; InfName=oem42.inf; IsSigned=TRUE; Manufacturer=Logitech}, @{DeviceName=Logitech; InfName=oem14.inf; IsSigned=TRUE; Manufacturer=Logitech}}
  101 Microsoft                 {@{DeviceName=WAN Miniport (SSTP); InfName=netsstpa.inf; IsSigned=TRUE; Manufacturer=Microsoft}, @{DeviceName=Generic software device; InfName=c_swdevice.inf; IsSigned=TRUE; Manufacturer=Microsoft}, @{DeviceName=Hyper-V Virtual Switch Extension Adapter; Inf…
    2 NVIDIA                    {@{DeviceName=NVIDIA Quadro M2000; InfName=oem36.inf; IsSigned=TRUE; Manufacturer=NVIDIA}, @{DeviceName=NVIDIA NVS 315; InfName=oem50.inf; IsSigned=TRUE; Manufacturer=NVIDIA}}
    1 Plex                      {@{DeviceName=Generic software device; InfName=c_swdevice.inf; IsSigned=TRUE; Manufacturer=Plex}}
    6 Razer Inc                 {@{DeviceName=HID-compliant consumer control device; InfName=oem22.inf; IsSigned=TRUE; Manufacturer=Razer Inc}, @{DeviceName=Razer DeathAdder V2; InfName=oem43.inf; IsSigned=TRUE; Manufacturer=Razer Inc}, @{DeviceName=Razer DeathAdder V2; InfName=oem18.inf;…
    4 Realtek                   {@{DeviceName=Realtek; InfName=oem16.inf; IsSigned=TRUE; Manufacturer=Realtek}, @{DeviceName=Realtek; InfName=oem3.inf; IsSigned=TRUE; Manufacturer=Realtek}, @{DeviceName=TP-Link Wireless MU-MIMO USB Adapter; InfName=netrtwlanu.inf; IsSigned=TRUE; Manufactu…
    2 Western Digital Corporat… {@{DeviceName=Digital Media Device; InfName=digitalmediadevice.inf; IsSigned=TRUE; Manufacturer=Western Digital Corporation}, @{DeviceName=Generic software device; InfName=c_swdevice.inf; IsSigned=TRUE; Manufacturer=Western Digital Corporation}}
    1 WireGuard                 {@{DeviceName=WireGuard; InfName=oem8.inf; IsSigned=TRUE; Manufacturer=WireGuard}}
	

PS C:\Windows\System32>  $DRIVER_SI_ARR |? { ! $_.IsSigned -eq 'TRUE' } | group Manufacturer # nothing, all signed

$where_script={$_.'Start Mode' -match $mode -and $_.State -match $state -and ( $_.'Module Name' -match $name -or $_.Description -match $name ) }
$mode='.*'; $state='.*'; $name='.*'; # $mode='Boot|Auto'; $state='Running'; $name='dtrace|filt|tcp'
$DRIVER_ARR |? $where_script | Group 'Start Mode',State | select -Property Count,Name -Expand Group -erroraction 0 | ft -group @{n='Group';e={ 'Count:{0} StartMode:{1}' -f $_.Count,$_.Name.Replace(', ',' State:') }} -a; 
echo "mode:$mode state:$state name:$name"



####################################
# SysInternal autorunsc64 -a * -c -h -s -nobanner '*'
$autorunsc='C:\home\apps\SysinternalsSuite\autorunsc64.exe'
$AUTORUN_ARR=& $autorunsc /accepteula -a * -c -h -s -nobanner |% { [regex]::replace($_,'[^\x20-\x7F]','').Trim() } |? { $_ } | ConvertFrom-Csv
$AUTORUN_ARR.Count # >>> 1541
$exclude='disabled|^$'; $match='P9'; $AUTORUN_ARR |? {$_.Enabled -notmatch $exclude -and $_.'Image Path' -match $match } | Select -First 2000 'Entry Location', Entry, Enabled, Category, 'Image Path'| ft -group 'Image Path' -auto


########################################
# List programs which start automatically:
PS C:\Users\alexe> Get-ItemProperty HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\run

SecurityHealth              : C:\Windows\system32\SecurityHealthSystray.exe            # deleted 
RtHDVCpl                    : "C:\Program Files\Realtek\Audio\HDA\RtkNGUI64.exe" /s    # deleted   
RtHDVBg_PushButton          : "C:\Program Files\Realtek\Audio\HDA\RAVBg64.exe" /IM     # deleted 
WavesSvc                    : "C:\Program Files\Waves\MaxxAudio\WavesSvc64.exe" -Jack  # deleted 
Logitech Download Assistant : C:\Windows\system32\rundll32.exe C:\Windows\System32\LogiLDA.dll,LogiFetch # deleted 
PSPath                      : Microsoft.PowerShell.Core\Registry::HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\run
PSParentPath                : Microsoft.PowerShell.Core\Registry::HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion
PSChildName                 : run
PSDrive                     : HKLM
PSProvider                  : Microsoft.PowerShell.Core\Registry

################################################
# Same as Get-ItemProperty HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\run
reg query HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\run /s

#############################################################
# Get running scheduled tasks on a Windows system.
#
(get-scheduledtask).where({$_.state -eq 'running'})
PS C:\Users\alexe> (get-scheduledtask).where({$_.state -eq 'running'})

TaskPath                                       TaskName                          State
--------                                       --------                          -----
\Microsoft\Windows\Multimedia\                 SystemSoundsService               Running
\Microsoft\Windows\Wininet\                    CacheTask                         Running

########################################
########################################
#######                         ########
#######   logman                ########
#######                         ########
########################################
########################################

https://renenyffenegger.ch/notes/Windows/dirs/Windows/System32/logman_exe

Get-Date; logman query -ets
PS C:\Program Files\PowerShell\7\Modules> logman query -ets
Friday, December 30, 2022 8:25:50 PM
Data Collector Set                      Type                          Status
-------------------------------------------------------------------------------
Circular Kernel Context Logger          Trace                         Running
Eventlog-Security                       Trace                         Running
DiagLog                                 Trace                         Running
Diagtrack-Listener                      Trace                         Running
EventLog-Application                    Trace                         Running
EventLog-ForwardedEvents                Trace                         Running
EventLog-System                         Trace                         Running
iclsClient                              Trace                         Running
iclsProxy                               Trace                         Running
IntelPTTEKRecertification               Trace                         Running
LwtNetLog                               Trace                         Running
Microsoft-Windows-Rdp-Graphics-RdpIdd-Trace Trace                         Running
NetCore                                 Trace                         Running
NtfsLog                                 Trace                         Running
RadioMgr                                Trace                         Running
NetCfgTrace                             Trace                         Running
ReFSLog                                 Trace                         Running
SocketHeciServer                        Trace                         Running
TPMProvisioningService                  Trace                         Running
UBPM                                    Trace                         Running
WdiContextLog                           Trace                         Running
WiFiSession                             Trace                         Running
Admin_PS_Provider                       Trace                         Running
SleepStudyTraceSession                  Trace                         Running
CldFltLog                               Trace                         Running
SgrmEtwSession                          Trace                         Running
SHS-12302022-163325-7-1ff               Trace                         Running
MpWppTracing-20221230-163325-00000003-ffffffff Trace                         Running
ScreenOnPowerStudyTraceSession          Trace                         Running
89BAA1B9-8E5B-4D3F-982C-7CE23F606B6E    Trace                         Running
MMA-ETW-Livecapture-b3aab4e2-f914-42cb-b9fc-35d6a84a03c9 Trace                         Running
MMA-ETW-Livecapture-9bfea4b3-3c78-4fa4-b206-6f965adda527 Trace                         Running
SHS-12302022-194219-7-1ff               Trace                         Running
NOCAT                                   Trace                         Running


##################################################
# https://learn.microsoft.com/en-us/dynamics-nav/how-to--use-logman-to-collect-event-trace-data
# View trace event data
# There are various industry tools available for viewing data in .etl files.
# For example, from the command line, you can use the tracerpt command to create dump files, summary, and report files. The following code creates files for the MyTelemetryTraceData_000001.etl file:
tracerpt c:\perflogs\MyTelemetryTraceData_000001.etl -o c:\perflogs\MyTelemetry-dmp.xml -of XML -su


 Get-EtwTraceProvider 
# Error: Failed to open autolloger configuration in registry. to read AutoLogger must have permissions, see windows-10-privacy-settings.txt


##################################################
# Windows 10 RUN commands | Windows 10 URI commands
# https://4sysops.com/wiki/list-of-ms-settings-uri-commands-to-open-specific-settings-in-windows-10/
# https://pureinfotech.com/windows-11-mssettings-uri-commands/
** How to use the URI commands
Here some different examples for using ms-setting commands:
    Press Win+R to open the Run dialog and type the ms-settings:<command>
    Press WIN+I keys or from Start menu and type the ms-settings:<command>
    Open a command prompt or Powershell and type "Start ms-settings:URI command"
    In the Windows Explorer address bar, type the ms-settings command
    Create a Windows shortcut and in the create shortcut window type "ms-settings:URI command"
	
Settings home page          - ms-settings:
Display	                    - ms-settings:display 
Connect to wireless display	- ms-settings-connectabledevices:devicediscovery
Graphics settings           - ms-settings:display-advancedgraphics
Manage sound devices        - ms-settings:sound-devices
Storage	Sense               - ms-settings:storagesense
Notifications & actions     - ms-settings:notifications
Power & sleep               - ms-settings:powersleep
Configure Storage Sense     - ms-settings:storagepolicies
new content saved to        - ms-settings:savelocations
Tablet mode                 - ms-settings:tabletmode
Multitasking                - ms-settings:multitasking
Bluetooth & other devices   - ms-settings:bluetooth | ms-settings:connecteddevices
Mouse                       - ms-settings:mousetouchpad
Text suggestions            - ms-settings:devicestyping-hwkbtextsuggestions
Shared experiences          - ms-settings:crossdevice
Clipboard                   - ms-settings:clipboard
Remote Desktop              - ms-settings:remotedesktop
Device Encryption           - ms-settings:deviceencryption
About                       - ms-settings:about
** Devices
AutoPlay                    - ms-settings:autoplay
Wheel (where available)     - ms-settings:wheel
USB                         - ms-settings:usb
** Network
Network & Internet          - ms-settings:network
Status                      - ms-settings:network-status
Show available networks     - ms-availablenetworks:
Cellular & SIM              - ms-settings:network-cellular
Wi-Fi                       - ms-settings:network-wifi
Show available networks     - ms-availablenetworks:
Manage known networks       - ms-settings:network-wifisettings
Wi-Fi Calling               - ms-settings:network-wificalling
Ethernet                    - ms-settings:network-ethernet
Dial-up                     - ms-settings:network-dialup
DirectAccess                - ms-settings:network-directaccess
VPN                         - ms-settings:network-vpn
Airplane mode               - ms-settings:network-airplanemode, OR ms-settings:proximity
Mobile hotspot              - ms-settings:network-mobilehotspot
NFC                         - ms-settings:nfctransactions
Data usage                  - ms-settings:datausage
Proxy                       - ms-settings:network-proxy
Phone
ms-settings:deviceusage

Captures                    - ms-settings:gaming-gamedvr
Ease of Access 
Magnifier                   - ms-settings:easeofaccess-magnifier
Keyboard                    - ms-settings:easeofaccess-keyboard
Keyboard                    - ms-settings:easeofaccess-keyboard

Search 
Search                      - ms-settings:search
Permissions & history       - ms-settings:search-permissions
More details                - ms-settings:search-moredetails
Search Permissions          - ms-settings:search-permissions

Privacy      	
Account info	            - ms-settings:privacy-accountinfo
Tasks                       - ms-settings:privacy-tasks
Advertising ID              - ms-settings:privacy-advertisingid
App diagnostics             - ms-settings:privacy-appdiagnostics
Contacts                    - ms-settings:privacy-contacts
Messaging                   - ms-settings:privacy-messaging
Radios                      - ms-settings:privacy-radios


########################################
########################################
#######                         ########
#######  Data Collector Set     ########
#######                         ########
########################################
########################################

 
########################################
#######                         ########
####### Event Tracing           ########
#######                         ########
########################################
########################################

 https://stackoverflow.com/questions/21012622/get-windows-event-provider-information?rq=1
There is another .NET namespace called System.Diagnostics.Eventing.Reader, which contains a lot more .NET classes with information about Event Tracing for Windows (ETW) providers and event logs.
Most of these types are defined in the System.Core.dll .NET Assembly in the .NET Global Assembly Cache (GAC).

** ETW Provider Names
Here is an example of retrieving the provider names from the local computer:

$EventSession = [System.Diagnostics.Eventing.Reader.EventLogSession]::GlobalSession;
$EventProviderNames = $EventSession.GetProviderNames();
$EventProviderNames;

Here is an example of retrieving the ETW provider names from a remote computer using an alternate constructor:

$EventSession = New-Object -TypeName System.Diagnostics.Eventing.Reader.EventLogSession -ArgumentList server01.contoso.com;
$EventProviderNames = $EventSession.GetProviderNames();
$EventProviderNames;

** ETW Provider Metadata
In addition to retrieving ETW provider names, you might also wish to retrieve more detailed information about them. You can do this using the ProviderMetadata class in the System.Diagnostics.Eventing.Reader .NET class. Information provided by the ProviderMetadata class includes:
    Provider display name
    Help link (URL)
    Keywords for the provider
    ETW provider ID (GUID)
    Message file path
    Resource file path
    Parameter file path
    Tasks exposed by the provider
    Event metadata for each event declared by the provider
Similar to the ETW provider and ETW log names, you can retrieve provider metadata from the local or remote system. In the latter case, you must establish an EventLogSession instance before you attempt to instantiate the ProviderMetadata class.
Here is an example of retrieving ETW provider metadata from the local system:


# Note: You might get some exceptions when you instantiate ProviderMetadata objects through authenticated connections:
#    New-Object : Exception calling ".ctor" with "3" argument(s): "Attempted to perform an unauthorized operation."
# Get the EventLogSession object
$EventSession = [System.Diagnostics.Eventing.Reader.EventLogSession]::GlobalSession;
# Get the ETW provider names
$EventProviderNames = $EventSession.GetProviderNames();

# Create an empty array to hold the ProviderMetadata instances
$ProviderMetadataList = @();
# For each ETW provider name ...
foreach ($EventProvider in $EventProviderNames) {
    # Add each ProviderMetadata instance to the array
    $ProviderMetadataList += New-Object -TypeName System.Diagnostics.Eventing.Reader.ProviderMetadata -ArgumentList $EventProvider;
}

# Explore the 16th item from the ProviderMetadata array
$ProviderMetadataList[15];


########################################
########################################
#######                         ########
#######      Processes          ########
#######                         ########
########################################
########################################

#########################################
# Kill Process Stop Process

tasklist.exe /FI "IMAGENAME eq Mozilla*"
# Image Name                     PID Session Name        Session#    Mem Usage
# ========================= ======== ================ =========== ============
# MozillaVPN.exe                3640 Services                   0      8,088 K

(sc.exe queryex state= all type= service | Out-String -stream) | Select-String Service.*Mozi
# SERVICE_NAME: MozillaMaintenance
# SERVICE_NAME: MozillaVPNBroker
# SERVICE_NAME: WireGuardTunnel$MozillaVPN

sc.exe queryex WireGuardTunnel`$MozillaVPN

taskkill.exe /IM MozillaVPN.exe /T /F
# ERROR: The process with PID 3640 (child process of PID 660) could not be terminated.
# Reason: There is no running instance of the task.

wmic process where "name='MozillaVPN.exe'" call terminate
# Method execution successful.

##########################################################
# Find Active Processes with tasklist
# tasklist.exe
tasklist /v /fi    "CPUTIME gt 00:01:00"
tasklist /apps /fi "CPUTIME gt 00:01:00"
tasklist /v /fi    "MODULES eq WSOCK32.dll"
tasklist /v /fi    "PID eq 10264"
tasklist /svc /fi  "PID eq 10264"
tasklist /m /fi    "PID eq 10264"
tasklist /v /fi "STATUS eq RUNNING"
tasklist /v /fi "CPUTIME gt 00:00:10"

#############################################
# Win32_Process | Check process class details
Get-CimInstance -ClassName Win32_Process | select -first 1 *
Get-CimInstance -ClassName Win32_Process | select -first 1 | gm
Get-CimInstance -ClassName Win32_Process -filter 'name LIKE "notepad%"'


############################################################################################
# Get all of the PowerShell processes that have an encoded command:
$powerShellProcesses = Get-CimInstance -ClassName Win32_Process -Filter 'CommandLine LIKE "%EncodedCommand%"'


########################################
########################################
#######                         ########
#######      Group Policy       ########
#######                         ########
########################################
########################################

######################################################################################
# Gpresult is a command-line tool that shows the Resultant Set of Policy (RSoP) for a user or computer based on applied Group Policy settings. 
gpresult /r # show all GPO

########################################
########################################
#######                         ########
#######      Audit              ########
#######      auditpol           ########
########################################
########################################

###########################################
# disable the log entries of type "Audit Success" and log only the Audit Failures entries. This will substantially reduce the size of the log files.
# https://developer.milestonesys.com/s/article/Base-Filtering-Engine-generates-very-large-log-files
PS C:\Windows\System32> auditpol /set /subcategory:"Filtering Platform Connection" /success:disable /failure:enable
The command was successfully executed.

To check:
auditpol /get /subcategory:"Filtering Platform Connection" /r
Machine Name,Policy Target,Subcategory,Subcategory GUID,Inclusion Setting,Exclusion Setting
W11B,System,Filtering Platform Connection,{0CCE9226-69AE-11D9-BED3-505054503030},Failure,

To ENABLE:
Auditpol /set /category:"System" /SubCategory:"Filtering Platform Connection" /success:enable /failure:enable # 5157
Auditpol /set /category:"System" /SubCategory:"Filtering Platform Packet Drop" /success:enable /failure:enable # 5152
To DISABLE:
Auditpol /set /category:"System" /SubCategory:"Filtering Platform Connection" /success:disable /failure:disable # 5157
Auditpol /set /category:"System" /SubCategory:"Filtering Platform Packet Drop" /success:disable /failure:disable # 5152




########################################
########################################
#######                         ########
#######      Applications       ########
#######      Features           ########
#######    WindowsCapability    ########
#######                         ########
########################################
########################################

######################################################################
# Provisioned apps installed with the Windows client OS (Settings > Apps > Apps & Features 
# https://docs.microsoft.com/en-us/windows/application-management/provisioned-apps-windows-client-os
Get-AppxProvisionedPackage -Online | Format-Table DisplayName, PackageName
 
#################
# Microsoft.ScreenSketch
Get-AppxPackage -AllUser |? Name -like '*ScreenSketch*'
Get-ProvisionedAppxPackage -Online |? DisplayName -like '*ScreenSketch*'

#####################################################
# List installed Applications:
 wmic product get name,version,vendor

###################################
# WindowsOptionalFeature
Get-WindowsOptionalFeature -online | Sort -desc State,Name | Out-GridView
Get-WindowsOptionalFeature -Online | ? FeatureName -notmatch ^IIS | Sort -desc State,FeatureName | select * | Out-GridView
Get-WindowsOptionalFeature -Online | ? FeatureName -notmatch ^IIS | Sort -desc State,FeatureName | ft

###################################
# WindowsCapability
Get-WindowsCapability -Online | ? Name -notmatch ^Lang | Sort -desc State,Name | select * | Out-GridView
Get-WindowsCapability -Online | ? Name -notmatch ^Lang | ft

################
# CIM_ApplicationSystemSoftwareFeature
([wmisearcher]'select * from CIM_ApplicationSystemSoftwareFeature').Get() | select *
# empty
$Products=gcim win32_product | Sort-Object -property Vendor,Name  <# -ComputerName $env:computername #> 

$Products | ft Name,Version,
@{Name="Installed";Expression = {($_.InstallDate.Insert(4,"-").insert(7,"-") -as [datetime]).ToShortDateString()}},
@{Name="InstallSource";Expression = {$_.InstallSource+$_.PackageName}},
InstallLocation


############################################
# Dism Get-Features
 Dism.exe /Online /Get-Features > C:\home\data\Reports\Apps\DismFeatures-2022-06-04.txt

##############################################
# Dism.exe /Get-Apps
Dism.exe /Online /Get-Apps
Error: 0x80004001
#######################################
# Sideload Apps with DISM
# https://docs.microsoft.com/en-us/windows-hardware/manufacture/desktop/sideload-apps-with-dism-s14?view=windows-11
 Dism.exe /Online /Get-Features > C:\home\data\Reports\Apps\DismFeatures-2022-06-04.txt
 
 
PS C:\Users\alexe> DISM /Online /Add-ProvisionedAppxPackage
Deployment Image Servicing and Management tool
Version: 10.0.22000.653
Image Version: 10.0.22000.708
Error: 0x80004005
Unspecified error
The DISM log file can be found at C:\Windows\Logs\DISM\dism.log

 
#############################################
# Installed Applications Appx packages 
# Get-AppxPackage
 $AppxPackages=Get-AppxPackage -AllUser
 $AppxPackages | ft RunspaceId, PublisherId, PackageFullName, PackageUserInformation , InstallLocation # see output in C:\home\data\Reports\Apps\Get-AppxPackage-2022-05-18.txt
 # to removed Appx Package
 # Remove-AppxPackage -Package <packagefullname>
 
 $AppxPackages|? RunspaceId -eq '8f9ea8d1-6fd3-42a0-b83d-9ad8365c7d36' | select Status, Publisher, InstallLocation , PackageUserInformation
 $AppxPackages|? Status -ne 'OK' | select Status, @{N='Publisher';E={$_.Publisher.Split(' ')[0].Substring(3)}}, InstallLocation , PackageUserInformation
 $AppxPackages|? Status -ne 'OK' | select Status, InstallLocation, 
   @{N='Publisher';E={$_.Publisher.Split(' ')[0].Substring(3)}},
   @{N='UserInstallStatus';E={$_.PackageUserInformation -replace '.+?(\[[^:]+\]): (.+?)','$1:$2' -join '; ' }}



####
# Win32_ApplicationService
gcim -query 'select * from Win32_ApplicationService where not Caption like "sc%" and not Caption like "prod%" and not Caption like "%shortcut%" ' | select -first 10 

Get-CimClass Win32_ApplicationService

Get-CimInstance Win32_ApplicationService | select -first 1
 Get-CimInstance Win32_ApplicationCommandLine | select -first 1
 
######
# CIM_Product
Get-CimClass *Product*
gcim -query 'select * from CIM_Product where Name like "%Intel%"' | ft -a *^C
# ([wmisearcher]'select * from meta_class').Get() | select * | ft -auto Name,@{n='SuperClass';e={$_.__SUPERCLASS}},@{n='Dynasty';e={$_.__DYNASTY}},@{n='Props';e={$_.__PROPERTY_COUNT}}

$META_CLASS=([wmisearcher]'select * from meta_class').Get() | select *
$META_CLASS |? Name -notlike 'Win32_Perf*' |? Name -notlike 'Msft_WmiProvider*' |? Name  -like '*Provider*' | ft

#############################################################
# List installed applications and a few details. But use with caution. It is slow, not necessarily complete, and could have unexpected consequences. 
# Heres a good link about using this class and alternatives.
#
# Get-WmiObject -Class Win32_Product
# Get-CimInstance Win32_Product # Get-CimInstance is gcim


#############################################################
# Get details about all external scripts in your %PATH%.
#
gcm -commandtype externalscript | Get-Item | 
Select-Object Directory,Name,Length,CreationTime,LastwriteTime,
@{name="Signature";Expression={(Get-AuthenticodeSignature $_.fullname).Status }}


########################################
########################################
#######                         ########
#######       etl viewer        ########
#######                         ########
########################################
########################################

Use Event Viewer!

###########################
# Parsing ETL traces yourself, part 1: wpaexporter
# https://devblogs.microsoft.com/oldnewthing/20201209-00/?p=104530
# 1. install Windows Performance Toolkit  https://docs.microsoft.com/en-us/windows-hardware/test/wpt/windows-performance-analyzer
$wpaexe='C:\Program Files (x86)\Windows Kits\10\Windows Performance Toolkit\wpaexporter.exe'
$etldir='C:\Users\User\Documents\DiagnosticTool_20220906_203303501\CTXReceiverLogs\1\'
$etlfile=ls $etldir\SelfService.* | sort LastWriteTime | select -last 1
echo "ETLFILE: $etlfile"
& $wpaexe -i $etlfile

########################################
########################################
#######                         ########
#######      Cleanup Events     ########
#######                         ########
########################################
########################################
# https://www.tenforums.com/tutorials/16588-clear-all-event-logs-event-viewer-windows.html#option3
# CMD
for /F "tokens=*" %1 in ('wevtutil.exe el') DO wevtutil.exe cl "%1"
#  PowerShell
Get-WinEvent -ListLog * | where {$_.RecordCount -gt 50 } | ForEach-Object -Process { [System.Diagnostics.Eventing.Reader.EventLogSession]::GlobalSession.ClearLog($_.LogName) }
OR
Get-EventLog -LogName * | ForEach { Clear-EventLog $_.Log } 
OR
wevtutil el | Foreach-Object {wevtutil cl "$_"}

########################################
########################################
#######                         ########
#######      Events Nice Print  ########
#######                         ########
########################################
########################################
# Use C:\home\src\Scripts\Get-MyEvents.ps1 
# C:\home\src\Scripts\Get-MyEvents.ps1 -Minutes 110 -errors -warnings
# C:\home\src\Scripts\Get-MyEvents.ps1 -reload -errors -warnings
# C:\home\src\Scripts\Get-MyEvents.ps1 -match connect
# C:\home\src\Scripts\Get-MyEvents.ps1 12

#############################################################
# XML nice print
$XmlQuery="*[System[(EventID=5031 or EventID=5150 or EventID=5151 or EventID=5154 or EventID=5155 or EventID=5156 or EventID=5157 or EventID=5158 or EventID=5159 or EventID=5152 or EventID=5153)]]"
$x=[xml]( wevtutil qe Security /q:"$XmlQuery" /f:xml /e:firewall /c:2 )
$x.Save([Console]::Out)

([xml](Invoke-WebRequest 'https://api.geoiplookup.net/?query=173.205.85.55').Content).Save([Console]::Out)

########################
# Export into .evtx files
$XmlFile="C:\home\txt\w\events\FireWall_Base_Filter.xml"
## C:\home\txt\w\events\FireWall_Base_Filter.xml
<QueryList>
  <Query Id="0" Path="Security">
    <Select Path="Security">*[System[(EventID=5031 or EventID=5150 or EventID=5151 or EventID=5154 or EventID=5155 or EventID=5156 or EventID=5157 or EventID=5158 or EventID=5159 or EventID=5152 or EventID=5153) and TimeCreated[timediff(@SystemTime) &lt;= 86400000]]]</Select>
  </Query>
</QueryList>
##########################################

$EvtxFile="C:\home\log\"+$("FireWall",$(Get-Date).ToString('yyyyMMdd_HHmmss'),"evtx" -join ".")
echo "XmlFile   : $XmlFile"
echo "EvtxFile  : $EvtxFile"
wevtutil export-log   "$XmlFile" "$EvtxFile" /sq:true
wevtutil query-events "$EvtxFile" /f:text /lf:true

#################
# Show .evtx files
# $env:SystemRoot >> C:\WINDOWS

Get-WinEvent -ListLog *  | sort LastWriteTime -Descending | select -first 10 LastWriteTime, RecordCount, LogName, ProviderNames, LogIsolation, LogFilePath | ft -a
# LastWriteTime       RecordCount LogName                                        ProviderNames                        LogIsolation LogFilePath
# -------------       ----------- -------                                        -------------                        ------------ -----------
# 9/6/2022 5:43:36 PM        1013 Microsoft-Windows-Windows Defender/Operational {Microsoft-Windows-Windows Defender}       System %SystemRoot%\System32\Winevt\Logs\Microsoft-Windows-Windows Defender%4Operational.evtx

$EvtxFile='C:\WINDOWS\System32\Winevt\Logs\Microsoft-Windows-Windows Defender%4Operational.evtx'
wevtutil query-events "$EvtxFile" /f:text /lf:true | select -first 25

########################################
########################################
#######                         ########
#######      Events             ########
#######                         ########
########################################
########################################
# Last 40 updated event log files ( sorted by LastWriteTime )
Get-WinEvent -ListLog * | where {$_.RecordCount -gt 50 }  | sort LastWriteTime -Descending | select -first 40 LastWriteTime, RecordCount, LogName, ProviderNames, LogIsolation, LogFilePath | ft -a

############################################################# 
# Get events during last 2 hours from all logs 
# FilterHashtable LogName="*" is available in PowerShell 5 ; '{0}.{1}' -f $PSVersionTable.PSVersion.Major, $PSVersionTable.PSVersion.Minor 
# FilterHashtable can't search by EventRecordID
$Level=@(0,1,2);  # 0 - LogAlways, 1-Critical, 2-Error, 3-Warning, 4-Informational, 4-Verbose
 
$StartTM=((Get-Date).AddMinutes(-30)); $EndTM=((Get-Date).AddMinutes(-1));
$EVENTS=Get-WinEvent -FilterHashtable @{LogName="*"; StartTime=$StartTM; EndTime=$EndTM;} -ErrorAction Ignore
'There {0} events from {1} till {2}, see $EVENTS ' -f $EVENTS.Count, $StartTM, $EndTM

## best multi-string ######################

function Get-MyEvents($No, [int[]]$RecordId, $MinutesAgo=20, $DisplayCount=5, [switch] $Reload, [switch] $Research  [switch] $Xml) {
	if ( $Reload -or !$Global:EventCnt -or ! $Global:Events -or $Global:StartTime -lt (Get-Date).AddMinutes(-1000) ) {
		$Global:StartTime=(Get-Date).AddMinutes(-$MinutesAgo),
		$Global:EventCnt=0
		$Global:Events=Get-WinEvent -FilterHashtable @{LogName="*"; StartTime=$StartTime; } -Max 60 | 
		   Select @{N='No';E={$Global:EventCnt++; $Global:EventCnt}},
		   RecordId, TimeCreated, ProviderName, Id, 
		   @{N='Level';E={$_.LevelDisplayName -replace '5','Verbose' }},
		   @{N='MessageDetails';E={@( ($_.TaskDisplayName), ($_.OpCodeDisplayName -replace '0'), ($_.KeywordsDisplayNames -replace '{0}') ) -join ' ' }},
		   @{N='Message';E={ $_.Message -replace "[`r`n]+",'\n' -replace '\s+',' ' -replace "(?<=.{100}).+",".."}},
		   @{N='WinEvent';E={$_}}
		   
		Write-Host "$($Global:Events.Count) objects in `$Global:Events"
	}
	if ($No) {
		if (!$RecordId) { $RecordId=$Events[$No].RecordID; }
		$LogName=$Events[$No].LogName; $ProviderName=$Events[$No].ProviderName; $EventId=$Events[$No].Id
		$StartTime=$StartTime.AddMinutes(-5); $EndTime=$StartTime.AddMinutes(5)
		Write-Host "RecordId:$RecordId LogName:$LogName"
		if ($Research) {
			$Global:Result=(Get-WinEvent -FilterHashtable @{ ProviderName=$ProviderName; StartTime=$StartTime; EndTime=$EndTime; })
		} else {
			$Global:Result=($Global:Events |? ProviderName -eq $ProviderName |? StartTime -ge $StartTime |? EndTime -le $EndTime)
		}
		Write-Host "$($Global:Result.Count) objects in `$Global:Result"
		$Output=[ref] $Global:Result
	} else {
		$Output=[ref] $Global:Events
		$RecordId=$Null
	}
	
	$Global:Output=$Output.Value | Where { $RecordId -eq $null -or $_.RecordId -in $RecordId } 
	if ( $DisplayCount -gt $Global:Output.Count ) {  
		$Global:OutputDisplay=$Global:Output
	} else {
		$Global:Display=$Output.Output[0..($DisplayCount-2)],$Output.Value[-1]
	}


	if ($Xml) {
		$FormatSB={Select -First:1 }
		$PrintSB={ ([xml]$_.ToXml()).Save( [Console]::Out ) }}
	} else {
		$FormatSB={ Select *}
		$PrintSB={ $_ }
	}

	if ($RecordId) {
		$HighlightSB={ Select-String -all ($Record -join '|') ) }
	} else {
		$HighlightSB={ Out-String }
	}
	
	$Global:OutputDisplay | & $FormatSB | & $PrintSB | & $HighlightSB

}

$EVENTS | Sort TimeCreated -desc | Select TimeCreated,ProviderName,LevelDisplayName,TaskDisplayName,OpCodeDisplayName,KeywordsDisplayNames,LogName,RecordId,Id,ActivityId,UserId,ProcessId,ThreadId,Message | Out-GridView
$EVENTS |? LogName -notmatch "Microsoft-Windows-Store" | Sort TimeCreated -desc | 
   Select TimeCreated,ProviderName,TaskDisplayName,OpCodeDisplayName,KeywordsDisplayNames,RecordId,Id,ProcessId,Message | ft -a
( [xml] ($EVENTS[0].ToXml()) ).Save( [Console]::Out )
( [xml] ($EVENTS[1].ToXml()) ).Save( [Console]::Out )
( [xml] ( $EVENTS | Sort -desc TimeCreated )[0].ToXml() ).Save( [Console]::Out )
$EVENTS | Sort -desc TimeCreated | Select -First 1 @{N='XmlNode';E={ ([xml]$_.ToXml()).Save( [Console]::Out ) }}

## best objects ######################
$EVENTS | Sort -desc TimeCreated | select -first 2 @{N='System';E={([xml]$_.ToXml()).Event.System }}, @{N='EventData';E={([xml]$_.ToXml()).Event.EventData}}  | ft -a

$EVENTS | Sort -desc TimeCreated | 
    select -first 3 @{N='System';E={([xml]$_.ToXml()).Event.System }}, @{N='EventName';E={([xml]$_.ToXml()).Event.EventData.Name}}, @{N='EventData';E={([xml]$_.ToXml()).Event.EventData.Data}} | 
	  select EventName, EventData -expand System | ft -a *

## best single-string ######################
$EVENTS[0].ToXml()
$EVENTS[1].ToXml()

##############

( ([xml]$EVENTS[0]).ToXml()).Save([Console]::Out)
( ([xml]$EVENTS[0].ToXml()).Event.EventData).GetEnumerator() | select Name,'#text'
( ([xml]$EVENTS[0].ToXml()).Event.EventData).GetEnumerator() | select Name, @{ N='Lines'; E={($_.InnerXml -split "`n+").Length }}, @{ N='XmlText'; E={$_.InnerXml -replace "`n+",' \n ' }}
( ([xml]$EVENTS[0].ToXml()).Event.EventData).GetEnumerator() | select @{ N='Node'; E={$_.OuterXml -replace " xmlns=`"$_.NamespaceURI`"" }}

[xml](( $EVENTS[0] ).ToXml())  | % { "<Event Type='{0}' EventDataName='{1}'>`n{2}</Event>" -f $_.Event.System, $_.Event.EventData.Name, $( ( $_.Event.EventData.Data | % { "  <{0}>{1}</{0}>`n" -f $_.Name, $(( $_."#text" | Out-String -stream ) -split "`n" -join ";" -replace '(;)+',"; ")} ) -join " ") }

# not so good:

($EVENTS[0] | ConvertTo-Xml -NoTypeInformation -As Document).Objects.Object| select -ExpandProperty property

[xml](( $EVENTS[0] ).ToXml())  | % { $_.Event.System; 'EventData:{0}' -f $_.Event.EventData.Name; $( ( $_.Event.EventData.Data |% { '{0} -- {1}' -f $_.Name, $_."#text" } | Out-String ) -join '; '  ); }

$EVENTS[0] | ConvertTo-Xml -As "String" -Depth 3 
$EVENTS | Sort TimeCreated | select -first 5 * | ConvertTo-Xml -As "String" -Depth 3

#############################################################
# Firewall events
* ENABLE:
Auditpol /set /category:"System" /SubCategory:"Filtering Platform Connection" /success:enable /failure:enable # 5157
Auditpol /set /category:"System" /SubCategory:"Filtering Platform Packet Drop" /success:enable /failure:enable # 5152
* DISABLE:
Auditpol /set /category:"System" /SubCategory:"Filtering Platform Connection" /success:disable /failure:disable # 5157
Auditpol /set /category:"System" /SubCategory:"Filtering Platform Packet Drop" /success:disable /failure:disable # 5152

* Read by known eventids 
# Last 3 Firewall events
$XmlQuery="*[System[(EventID=5031 or EventID=5150 or EventID=5151 or EventID=5154 or EventID=5155 or EventID=5156 or EventID=5157 or EventID=5158 or EventID=5159 or EventID=5152 or EventID=5153)]]"
# To filter out last 24 hours change to $XmlQuery="*[System[(TimeCreated[timediff(@SystemTime) <= 86400000] and (EventID=5031 or EventID=5150 ... EventID=5153)]]"

([xml](wevtutil qe Security /q:"$XmlQuery" /f:xml /c:3 /e:Events)).Save([Console]::Out)
( Get-WinEvent Security -FilterXPath $XmlQuery -maxevent 1 -ea 0).ToXml()
(( Get-WinEvent Security -FilterXPath $XmlQuery -maxevent 1 -ea 0) | ConvertTo-Xml -As Document).Save([Console]::Out) ## too bad

( Get-WinEvent Security -FilterXPath $XmlQuery -maxevent 3 -ea 0) | ConvertTo-Xml -As "String" -Depth 3

$EVENTS=Get-WinEvent -FilterHashtable @{LogName="*"; Level=(0,1,2); StartTime=((Get-Date).AddHours(-2))} -ErrorAction Ignore ; $EVENTS | sort-Object TimeCreated

#############################################################
# Convert to Json
# 
( Get-WinEvent -ProviderName 'Service Control Manager' -FilterXPath "*[System[EventRecordID=11035]]" -maxevent 2 -ea 0) | ConvertTo-Json 
( Get-WinEvent -ProviderName 'Service Control Manager' -FilterXPath "*[System[EventRecordID=11035]]" -maxevent 2 -ea 0) | ConvertTo-Json -Compress


#############################################################
# Get event logs changed during 4 hours
get-winevent -listlog * -ea 0 | where-object {$_.recordcount -gt 0 -and $_.LastWriteTime -gt ((Get-Date).AddHours(-4))}
(get-winevent -listlog * -ea 0 | where-object {$_.recordcount -gt 0 -and $_.LastWriteTime -gt ((Get-Date).AddHours(-4))}).LogName

#############################################################
# Get events during last 2 hours from 'System','Application','Setup','Security' logs
Get-WinEvent -FilterHashtable @{LogName=('System','Application','Setup','Security'); Level=(0,1,2,3); StartTime=((Get-Date).AddHours(-2))} -ErrorAction Ignore | sort-Object ProviderName,TimeCreated

#############################################################
# List the error events during last 2 hours
#
(get-winevent -FilterHashtable @{Logname = (get-winevent -listlog * -ea 0 | where-object {$_.recordcount -gt 0 -and $_.LastWriteTime -gt ((Get-Date).AddHours(-4))}).LogName;Level=(0,1,2); StartTime=((Get-Date).AddHours(-2))}) | sort-Object -Descending TimeCreated,ProviderName

#############################################################
# Since PowerShell Core and PowerShell 7 do not include the Get-Eventlog cmdlet, heres a one-liner to list the last 10 errors in the System event log. A level value of 3 will give you warnings.
get-winevent -FilterHashtable @{Logname = 'System';Level=2} -MaxEvents 10 | sort-Object ProviderName,TimeCreated


########################################
########################################
#######                         ########
#######   XML Nice Print      ########
#######   Console Print, Tee    ########
#######                         ########
########################################
########################################

#############################################################
# Get XML of Event by RecID and Proiders
# Get-EventXmlByRecIdAndProvider  <RecId>,<Providers>
# Examples: Get-XmlEvent 90867 613
# 

#############################################################
# XML nice print
$x=[xml]( wevtutil qe Security /q:"$XmlQuery" /f:xml /e:firewall /c:2 )
$x.Save([Console]::Out)

######################################################################
# Tee to file and stdout
# Generic function name modeled after Tee-Object, which outputs to console and file
Function Tee-PowerShellOut ([parameter(ValueFromPipeline=$True)] $InputObject ) {
	if (! $Script:stream) { $Script:stream=[System.IO.StreamWriter] "powershell.out" }
    [void]$Script:Stream.Write($_); # Write to stream
    Write-Host "$_"; # Write to console
}

"test string" | Tee-PowerShellOut


#############################################################
# Convert to XML
# see also https://powershellmagazine.com/2013/08/19/mastering-everyday-xml-tasks-in-powershell/ 
( Get-WinEvent -ProviderName 'Service Control Manager' -FilterXPath "*[System[EventRecordID=11035]]" -maxevent 2 -ea 0) | ConvertTo-Xml -As "String" -Depth 3
# Get-WinEvent -ProviderName 'Service Control Manager' -FilterXPath "*[System[EventRecordID=11035]]" -maxevent 2 -ea 0 | % {$_.ToXml() -replace("><",">`n<")}
    
$RecId=11035; $Prvds=('Service Control Manager'); $eNo=0; $EVENTS=Get-WinEvent -ProviderName $Prvds -FilterXPath "*[System[EventRecordID=$RecId]]" -maxevent 100 -ea 0; $EVENTS | 
  % {$pad=1;$eNo++; $_.ToXml() -replace("><",">`n<") -replace("^<Event","<Event #$eNo of $(($EVENTS).Count)") -split("`n")} |
  % { $str=$_; if($str -match "^</.*>") {$pad-=2} ; "{0,$pad}{1}" -f "","$str"; if( -not ($str -replace "'[^']+'","'X'" -replace '"[^"]+"','"X"' -match "<[^>]*>[^<]*</[^ ].*>|<.*/>|^</.*>")) {$pad+=2} }
"Total: $eNo Event$(if ($eNo -ne 1) {'s'}) "



########################################
########################################
#######                         ########
#######    Event Watchers       ########
#######    Event Consumers      ########
#######                         ########
########################################
########################################

# https://www.blackhat.com/docs/us-15/materials/us-15-Graeber-Abusing-Windows-Management-Instrumentation-WMI-To-Build-A-Persistent%20Asynchronous-And-Fileless-Backdoor-wp.pdf
# WMI Defense, Existing Detection Utilities
Get-WmiObject -Class __FilterToConsumerBinding -Namespace:'root\subscription'
Get-WmiObject -Class __EventFilter
Get-WmiObject -Class __EventConsumer

# WMI Attack Detection with WMI-To-Build-A-Persistent%20Asynchronous-And-Fileless-Backdoor-wp
$Credential = Get-Credential 'WIN11-2\Administrator'

##############################################################################################################
#PS C:\Users\alexe> Get-WmiObject -Class __FilterToConsumerBinding -Namespace:'root\subscription'
__GENUS                 : 2
__CLASS                 : __FilterToConsumerBinding
__SUPERCLASS            : __IndicationRelated
__DYNASTY               : __SystemClass
__RELPATH               : __FilterToConsumerBinding.Consumer="NTEventLogEventConsumer.Name=\"SCM Event Log Consumer\"",Filter="__EventFilter.Name=\"SCM Event Log Filter\""
__PROPERTY_COUNT        : 7
__DERIVATION            : {__IndicationRelated, __SystemClass}
__SERVER                : WIN11-2
__NAMESPACE             : ROOT\subscription
__PATH                  : \\WIN11-2\ROOT\subscription:__FilterToConsumerBinding.Consumer="NTEventLogEventConsumer.Name=\"SCM Event Log Consumer\"",Filter="__EventFilter.Name=\"SCM Event Log Filter\""
Consumer                : NTEventLogEventConsumer.Name="SCM Event Log Consumer"
CreatorSID              : {1, 2, 0, 0...}
DeliverSynchronously    : False
DeliveryQoS             :
Filter                  : __EventFilter.Name="SCM Event Log Filter"
MaintainSecurityContext : False
SlowDownProviders       : False
PSComputerName          : WIN11-2


#########################################################
# Get-CimInstance  -Class __FilterToConsumerBinding -Namespace:'root\subscription'
PS C:\Users\alexe> Get-CimInstance  -Class __FilterToConsumerBinding -Namespace:'root\subscription'
Consumer                : NTEventLogEventConsumer (Name = "SCM Event Log Consumer")
CreatorSID              : {1, 2, 0, 0...}
DeliverSynchronously    : False
DeliveryQoS             :
Filter                  : __EventFilter (Name = "SCM Event Log Filter")
MaintainSecurityContext : False
SlowDownProviders       : False
PSComputerName          :

########################################
########################################
#######                         ########
#######       OPERATORS         ########
#######                         ########
#######                         ########
########################################
########################################

############################################
# foreach  |%
"one",$null,0 |% `
   -begin { $cnt=0; echo "begin: `$_:$_ `$input:$input `$PSItem:$PSItem" } `
   -process { $cnt++; echo "[$cnt] process:'`$_:$_' `$input:'$input' `$PSItem:'$PSItem'" } `
   -end { echo "end: total:$cnt `$_:'$_' `$input:'$input' `$PSItem:'$PSItem'" }

############################################################
# Tentary if operator available in version 7 
# https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_Operators?view=powershell-7.2#ternary-operator--if-true--if-false
#
#  
$PSVersionTable.PSVersion.Major # must be 7+
#($condition ? $valueIfTrue : $valueIfFalse) 

##############################################################
# A Reusable File System Event Watcher for PowerShell
# https://devblogs.microsoft.com/powershell-community/a-reusable-file-system-event-watcher-for-powershell/

# To create the watcher that sends notifications to PowerShell’s engine event queue using the source identifier 
New-FileSystemWatcher -SourceIdentifier "MyEvent" -Path C:\Tempfiles

# To consume the event by registering an event handler for the same source identifier. 
# The following example just writes the whole event converted to JSON to the console:

Register-EngineEvent -SourceIdentifier "MyEvent" -Action { $event | ConvertTo-Json | Write-Host }
# to generate event
 "XYZ" >> C:\Tempfilesxyz

# To suspend the notification temporarily and to resume it later the following two commands can be used:
 Suspend-FileSystemWatcher -SourceIdentifier "MyEvent"
 Resume-FileSystemWatcher -SourceIdentifier "MyEvent"

# To keep track of all the filesystem watchers created in the current PowerShell process
 Get-FileSystemWatcher
# to dispose one watcher
Remove-FileSystemWatcher -SourceIdentifier "MyEvent"

# to dispose all 
Get-FileSystemWatcher | Remove-FileSystemWatcher


###########################
###########################
###########################
######              #######
###### Accelerators #######
######              #######
###########################
###########################
###########################

#####################################
# Type Accelerators
# https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_type_accelerators?view=powershell-7.2
Usefull: adsi; adsisearcher; wmisearcher; Environment


#######################################
# All type acceletators
# 
$accs=[psObject].Assembly.GetType('System.Management.Automation.TypeAccelerators')::Get | % keys | sort -top 300 | % {
 $name=$_; 
 $type=(Invoke-Expression "[$name]"); 
 $tdomain=$type.FullName -replace('System\.Management\.Automation\..*','Automation') -replace('Microsoft.Management.Infrastructure.*','Infrastructure') -replace('Microsoft.PowerShell.Commands','Commands') -replace('([^.]*)\..*','$1');
 $tbase=$type.FullName -replace('.*\.([^.]*)','$1');
 $tpath=$type.FullName -replace("^.*$tdomain") -replace("\.*$tbase$") -replace('\.+','.') -replace('^\.');
 $methods=($type.GetMethods()).Name| sort -uniq;
 [pscustomobject] @{ 
   Name=$name; Domain=$tdomain; BaseType=$tbase; Path=$tpath; Type=$type;
   Methods5=$(($methods|? { $_ -NotMatch '^(Add|Append|Clone|Compare|Copy|Clear|Delete|Equals|Get(.*)Type|Is|ToString).*$' } | select -first 5 ) -join(','));}
}
$accs| select -first 30 | ft
$accs|? Name -match '.*search.*'

### original : https://renenyffenegger.ch/notes/Windows/PowerShell/language/object/type/accelerators  
$accels = [psObject].Assembly.GetType('System.Management.Automation.TypeAccelerators')::Get
$names  = $accels.keys | sort-object
foreach ($name in $names) { '{0, -30} {1}' -f $name, $accels[$name].FullName }

([Environment].GetMembers()) | select Name |? Name -like '*Var*'

#########################
# C# Type: System.Management.Automation.TypeAccelerators 
[psObject].Assembly.GetType('System.Management.Automation.TypeAccelerators').GetMembers() | select Name
Name
----
get_Get
Add
Remove
GetType
ToString
Equals
GetHashCode
Get


#################################################
# wmisearcher Type Accelerators
# 
([wmisearcher]"select * from Win32_Process where name like 'pwsh%exe' ").Get() | select *

([wmisearcher]'select * from meta_class').Get() | select * | ft -auto Name,@{n='SuperClass';e={$_.__SUPERCLASS}},@{n='Dynasty';e={$_.__DYNASTY}},@{n='Props';e={$_.__PROPERTY_COUNT}}

([wmisearcher]'select * from meta_class').Get() | ? Name -notlike '*Perf*' | select * | ft -auto Name,@{n='SuperClass';e={$_.__SUPERCLASS}},@{n='Props';e={$_.__PROPERTY_COUNT}} -groupby @{n='Dynasty';e={$_.__DYNASTY}}

([wmisearcher]'select * from meta_class').Get() | ? Name -like '*Process*' |? Name -notlike 'Win32_Perf*' | select * | ft -auto Name,@{n='Props';e={$_.__PROPERTY_COUNT}} -groupby @{n='Dynasty';e={$_.__DYNASTY}}


#################################################
# Get Bios details
# wmisearcher
# https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_wql?view=powershell-5.1#long-description

[wmisearcher]$bios = "Select * from Win32_Bios"
$bios.get().Path.Path
$bios.get().Path.RelativePath

# all attributes (cached into $bios )
([wmisearcher]$bios="Select * from Win32_Bios").Get() | select *
$bios.get().Path
 
# Serial Number
([wmisearcher]$bios = "Select * from Win32_Bios").Get().SerialNumber
([wmisearcher]"select * from Win32_Process where name like 'pwsh%exe' ").Get() | select -first 1
Invoke-CimMethod -InputObject (([wmisearcher]"select * from Win32_Process where name like 'pwsh%exe' ").Get() | select -first 1) -MethodName GetOwner # error - wmi is not accepted, use cim like below
Invoke-CimMethod -InputObject (gcim -query "select * from Win32_Process where name like 'pwsh%exe'" | select -first 1) -MethodName GetOwner \


###########################
###########################
###########################
######              #######
###### WMI SQL WSQL #######
######              #######
###########################
###########################
###########################
<#

$WMI_META_PARAM=@{
	Property=@(
		"Name"
		,@{N='PCNT';E={$_.__PROPERTY_COUNT}}
		,@{N='CLASS';E={$.__CLASS}}
		,@{N='DERIVATION';E={$.__DERIVATION}}
		,@{N='DYNASTY';E={$.__DYNASTY}}
		,@{N='GENUS';E={$.__GENUS}}
		,@{N='SUPERCLASS';E={$.__SUPERCLASS}}
		,@{N='NAMESPACE';E={$.__NAMESPACE}}
		,@{N='PATH';E={$.__PATH}}
		,@{N='RELPATH';E={$.__RELPATH}}
	)
}

https://docs.microsoft.com/en-us/windows/win32/wmisdk/wql-sql-for-wmi
https://devblogs.microsoft.com/scripting/three-easy-ways-to-use-powershell-and-wql-to-get-wmi-data/
https://devblogs.microsoft.com/scripting/use-powershell-and-avoid-three-gotchas-with-wql-where-clauses/

WSQL
"Select * From meta_class Where __Superclass Is Null"

Get-WmiObject Win32_Process | gm

$SQL = "Select Name, Priority, Status, VM, WS, ParentProcessId,ProcessId,ThreadCount,UserModeTime,KernelModeTime,InstallDate,CreationDate,TerminationDate,Caption,Description,CommandLine from WIN32_SHARE_PROCESS"
$SQL = "Select *from WIN32_SHARE_PROCESS"
$SQL = "Select Name, Priority,Status,ExecutionState,VM,WS,ParentProcessId,ProcessId,ThreadCount,UserModeTime,KernelModeTime,InstallDate,CreationDate,TerminationDate,Caption,Description,ExecutablePath,CommandLine from Win32_Process where priority >= 11"

$SQL = "Select Name, Priority, Status, VM, WS, ExecutionState, ParentProcessId, CreationDate, ProcessId, Caption, CommandLine from Win32_Process where priority >= 11"

$W32_PROC_FMT=@{
    Property=@( 'Name', 'Status', @{N='ExecState';E={$_.ExecutionState}}, 'Priority', @{N='PPID';E={$_.ParentProcessId}}, 'ProcessId', 
    @{N='StartDt';E={$V=$_.CreationDate;'{0}-{1}-{2}' -f $V.Substring(0,4),$V.Substring(4,2),$V.Substring(6,2) }},
    @{N='StartTm';E={$V=$_.CreationDate;'{0}:{1}:{2}' -f $V.Substring(8,2),$V.Substring(10,2),$V.Substring(12,2) }},
    'VM', 'WS',
    @{N='PeakVS';E={$_.PeakVirtualSize}}, @{N='PeakWS';E={$_.PeakWorkingSetSize}},
    @{N='ReadOpCnt';E={$_.ReadOperationCount}}, @{N='ReadTrCnt';E={$_.ReadTransferCount}},@{N='WrtOpCnt';E={$_.WriteOperationCount}}, @{N='WrtTrCnt';E={$_.WriteTransferCount}}, @{N='OthOpCnt';E={$_.OtherOperationCount}}, @{N='OthTrCnt';E={$_.OtherTransferCount}}, 
    @{N='Threads';E={$_.ThreadCount}}, @{N='Handles';E={$_.HandleCount}} , 'Handle'
    @{N='Description';E={if($_.Description){$_.Description}else{$_.Caption}}}, 'ExecutablePath',
    @{N='PROPERTY_COUNT';E={$_.__PROPERTY_COUNT}},@{N='PATH';E={$.__PATH}},
    @{N='CLASS';E={$.__CLASS}},@{N='DERIVATION';E={$.__DERIVATION}},@{N='DYNASTY';E={$.__DYNASTY}},
    @{N='GENUS';E={$.__GENUS}},@{N='SUPERCLASS';E={$.__SUPERCLASS}},@{N='NAMESPACE';E={$.__NAMESPACE}}
)
}

$W32_PROC_TBL=@{ Auto=$true; Property='Name','Priority','ProcessID','WS','StartDT','StartTM','PPID','Threads','Handle','ExecutablePath' }
Get-WmiObject -Query "Select * from Win32_Process" | Select @W32_PROC_FMT | Sort | ft @W32_PROC_TBL

$SQL = "Select * from Win32_Process where priority >= 11"



# Get-WmiObject -Query $highPriority | Select -First 1 @Prop  
# Get-WmiObject -Query $SQL | select -first 1 | fl *
# Get-WmiObject -Query $highPriority | Select -First 1000  @Win32_Process_Param | ft -auto Name,Property,PPID,ProcessID,WS,StartDT,StartTM



PS C:\Users\alexe> ([wmisearcher]'select * from meta_class').Get() | ? Name -like '*Connect*' |? Name -notlike 'Win32_Perf*' | select * | ft -auto Name,@{n='Props';e={$_.__PROPERTY_COUNT}} -groupby @{n='Dynasty';e={$_.__DYNASTY}}

   Dynasty: __SystemClass

Name                                 Props
----                                 -----
MSFT_NCProvClientConnected               6
MSFT_NetConnectionTimeout                4
MSFT_NetServiceDifferentPIDConnected     5

   Dynasty: CIM_ManagedSystemElement

Name                    Props
----                    -----
CIM_PhysicalConnector      17
Win32_PortConnector        20
Win32_NetworkConnection    17
Win32_ServerConnection     12

   Dynasty: CIM_Component

Name                           Props
----                           -----
Win32_SystemNetworkConnections     2
CIM_LinkHasConnector               2
CIM_ConnectorOnPackage             3

   Dynasty: CIM_Dependency

Name                    Props
----                    -----
Win32_SessionConnection     2
CIM_ConnectedTo             2
Win32_ConnectionShare       2
CIM_DeviceConnection        4

   Dynasty: Win32_OfflineFilesConnectionInfo

Name                             Props
----                             -----


([wmisearcher]$wmidata="select * from Win32_PortConnector").Get() | select -expand properties | ? Value -notlike '' | select * | 
ft @{Name = "Name"; Expression={if ($_.Name -eq 'Name') { "$([char]0x1b)[1;91m$($_.Name)$([char]0x1b)[0m"} else {$_.Name} }},
   @{Name = "Value"; Expression={if ($_.Name -eq 'Name') { "$([char]0x1b)[1;91m{0}$([char]0x1b)[0m" -f $_.Value } else {$_.Value} }},
   @{Name = "Type"; Expression={if ($_.Name -eq 'Name') { "$([char]0x1b)[1;92m"+ $_.Type +"$([char]0x1b)[0m" } else {$_.Type} }},
   @{Name = "Qualifiers"; Expression={if (($_.Qualifiers).Name.Contains('key')) { "$([char]0x1b)[1;93m"+($_.Qualifiers).Name+"$([char]0x1b)[0m"} else { ($_.Qualifiers).Name } }}


([wmisearcher]$wmidata="select * from Win32_PortConnector").Get() | select -first 1 -expand properties | ? Value -notlike '' | select * | 
ft @{Name = "Name";  Expression={ ("$([char]0x1b)[{0}m{1}" -f $(if($_.Name -eq 'Name'){"1"}else{"0"}),$_.Name) } },
   Value,Type,
   @{Name = "Qual";  Expression={ '$([char]0x1b)[{0}m{1}' -f $(if($_.Name -eq 'Name'){"1"}else{"0"}),$(($_.Qualifiers).Name) } }

#>



########################################
########################################
#######                         ########
#######      ADSI               ########
#######                         ########
########################################
# Active Directory Service Interface   #
########################################

########################################
# ADSI WinNT provider
# https://docs.microsoft.com/en-us/windows/win32/adsi/adsi-winnt-provider
# accounts, groups and services
([ADSI] "WinNT://$Env:ComputerName").Children | select SchemaClassName,Name,Path


#############################################################
# OS Info - Users, Groups Services
#
 ([ADSI] "WinNT://$Env:ComputerName").Children | select SchemaClassName,Name,Path

#############################################################
# User Account Properties
#
([ADSI] "WinNT://$Env:ComputerName").Children | where { $_.SchemaClassName -eq 'User' }  | % {
    $hTbl=$_;
    "`n{0,35} : {1}" -f "UserName", $hTbl.Name.Value
    ForEach( $Prop in ($hTbl | Get-Member -MemberType Property).Name ) {
        try { if ($hTbl.$Prop) { $Val=[string]$hTbl.$Prop; if (($Val.Length -gt 0) -and ($Prop -ne "Name") ) { "{0,35} : {1}" -f $Prop, $(switch ($Key) { default { "$($hTbl.$Prop)"}; } ) } } } finally {}
    }
}

#############################################################
# User Accounts
#
# gcim win32_UserAccount | select *
 Get-LocalUser
 gcim win32_UserAccount | Format-Table -autosize Name,Caption,AccountType,SID,Domain,LocalAccount,Description
 gcim win32_UserAccount | Format-Table -autosize @{n='UserName';e={$_.Caption}},@{n='Local';e={if($_.LocalAccount -eq 'True') {'Yes'} else {'No'} }},Description
 gcim win32_UserAccount | Format-Table -autosize @{n='UserName';e={$_.Caption}},@{n='Local';e={if($_.LocalAccount -eq 'True') {'Yes'} else {'No'} }},Description,CimInstanceProperties,CimSystemProperties

 gcim win32_UserAccount | select-object -expand CimInstanceProperties

([ADSI] "WinNT://$Env:ComputerName")).Chidren | select SchemaClassName,Name,Path

([ADSI] "WinNT://$Env:ComputerName").Children | where { $_SchemaClassName -eq 'User' }  | % {
    $hTbl=$_; 
     "`n{0,35} : {1}" -f "UserName", $hTbl.Name.Value
     ForEach( $Key in $hTbl.Keys ) {
         $Val=$hTbl.$Key; if (($Val.Length -gt 0) -and ($Key -ne "Name") ) { "{0,35} : {1}" -f $key, $(switch ($key) { LoginHours {"tbd"}; default { "$($hTbl.$key)"}; } ) }
     }
} 


ForEach ( $Usr in ([ADSI] "WinNT://$env:computername") | where { $_.psbase.schemaclassname -match 'user' } ) {
     # $hTbl=$Usr.PsBase.Properties
     $hTbl=$Usr
     "`n{0,35} : {1}" -f "UserName", $hTbl.Name.Value
     ForEach( $Key in $hTbl.Keys ) {
         $Val=$hTbl.$Key; if (($Val.Length -gt 0) -and ($Key -ne "Name") ) { "{0,35} : {1}" -f $key, $(switch ($key) { LoginHours {"tbd"}; default { "$($hTbl.$key)"}; } ) }
     }
}

([ADSI] "WinNT://WORKGROUP/WIN11-2/alexe") | select *
([ADSI] "WinNT://WORKGROUP/WIN11-2/alexe").PsBase | select *
([ADSI] "WinNT://WORKGROUP/WIN11-2/alexe").PsBase.Properties

([ADSI] "WinNT://WORKGROUP/WIN11-2/Administrator").PsBase.Properties
([ADSI] "WinNT://WORKGROUP/WIN11-2/Guest").PsBase
([ADSI] "WinNT://WORKGROUP/WIN11-2/DefaultAccount").PsBase
([ADSI] "WinNT://WORKGROUP/WIN11-2/WDAGUtilityAccount").PsBase


 ([ADSI] "WinNT://WIN11-2").psbase.Children | where { $_.psbase.schemaclassname -match 'user' } |  <#Format-Table#> Select-Object -property `
             @{Name='Name';Expression= { $_.name }},`
             @{Name='Fullname';Expression= { $_.Fullname }},`
             @{Name='Description';Expression= { $_.Description }},`
             @{Name='AutoUnlockInterval';Expression= { $_.AutoUnlockInterval }},`
             @{Name='BadPasswordAttempts';Expression= { $_.BadPasswordAttempts }},`
             @{Name='HomeDirDrive';Expression= { $_.HomeDirDrive }},`
             @{Name='HomeDirectory';Expression= { $_.HomeDirectory }},`
             @{Name='LastLogin';Expression= { $_.LastLogin }},`
             @{Name='LockoutObservationInterval';Expression= { $_.LockoutObservationInterval }},`
             @{Name='LoginHours';Expression= { $_.LoginHours }},`
             @{Name='LoginScript';Expression= { $_.LoginScript }},`
             @{Name='MaxBadPasswordsAllowed';Expression= { $_.MaxBadPasswordsAllowed }},`
             @{Name='MaxPasswordAge';Expression= { $_.MaxPasswordAge }},`
             @{Name='MaxStorage';Expression= { $_.MaxStorage }},`
             @{Name='MinPasswordAge';Expression= { $_.MinPasswordAge }},`
             @{Name='MinPasswordLength';Expression= { $_.MinPasswordLength }},`
             @{Name='objectSid';Expression= { $_.objectSid }},`
             @{Name='Parameters';Expression= { $_.Parameters }},`
             @{Name='PasswordAge';Expression= { $_.PasswordAge }},`
             @{Name='PasswordExpired';Expression= { $_.PasswordExpired }},`
             @{Name='PasswordHistoryLength';Expression= { $_.PasswordHistoryLength }},`
             @{Name='PrimaryGroupID';Expression= { $_.PrimaryGroupID }},`
             @{Name='Profile';Expression= { $_.Profile }},`
             @{Name='UserFlags';Expression= { $_.UserFlags }}

#############################################################
# User LastLogin
# 
([ADSI] "WinNT://WORKGROUP/WIN11-2/alexe").LastLogin

#############################################################
# Recently Created User Accounts
# 
 
 wmic useraccount
 wmic useraccount where disabled='FALSE'
 wmic useraccount where disabled='FALSE' get sid

 whoami /all
$Prop=([ADSI] "WinNT://WORKGROUP/WIN11-2/Administrator").PsBase.Properties; 
" ** {0,31} : {1} **" -f "User", $Prop.Name.Value; 
$Prop.Keys | % { $k=$_;$v=$Prop.$k.value;$t=$v.GetType();switch($t) { int {$v=$v.ToString()}; string { if ($k -eq "Name") {$k="-";} }; default {$v="tbd"}}; if($k -ne "-") { "{0,35} : {1}" -f "$k($t)",$v }  }

#############################################################
# Account Logon History
# Query all logon events with id 4624 
# See Get-UserLogonHistory.ps1
# https://www.pdq.com/blog/history-of-logged-on-users/


	$LogonEvents=Get-EventLog -LogName "Security" -InstanceId 4624 -Newest 5000 -ErrorAction "SilentlyContinue"  | 
	select-object *,
	 @{n='SecurityId';e={$_.ReplacementStrings[4]}},
	 @{n='AccountName';e={$_.ReplacementStrings[5]}},
	 @{n='AccountDomain';e={$_.ReplacementStrings[6]}},
	 @{n='AccountType';e={$_.ReplacementStrings[8]}},
	 @{n='LogonProcess';e={$_.ReplacementStrings[9]}},
	 @{n='AuthPackage';e={$_.ReplacementStrings[10]}},
	 @{n='ProcessPath';e={$_.ReplacementStrings[17]}},
	 @{n='ProcessID';e={[uint32]$_.ReplacementStrings[16]}}	| 
	 Group-Object AccountName,AccountType,ProcessPath,LogonProcess

$LogonEvents | Select *, @{n='AccountName';e={$_.Values[0]}}, @{n='AccountType';e={$_.Values[1]}},
	@{n='ProcessPath';e={$_.Values[2]}},
	@{n='LogonProcess';e={$_.Values[3]}},
	@{n='FirsTime';e={$_.Group[$_.Count-1].TimeGenerated}},@{n='LastTime';e={$_.Group[0].TimeGenerated}},
	@{n='FirstPID';e={$_.Group[$_.Count-1].ProcessID}},@{n='LastPID';e={$_.Group[0].ProcessID}},
	@{n='FirstIndex';e={$_.Group[$_.Count-1].Index}},@{n='LastIndex';e={$_.Group[0].Index}} ,
	@{n='LstPid'    ;e={$_.Group[0].ProcessId}},
	@{n='CntPid'    ;e={($_.Group | Group-Object ProcessID).Length}},
	@{n='ListOfPids';e={($_.Group | Group-Object ProcessID| Sort-Object -Descending Count | select @{n='List';e={'{0}({1})' -f $_.Name,$_.Count}}).List -join (',')}},
	@{n='LstMessage'    ;e={$_.Group[0].Message2}} |
 Sort-Object AccountName, AccountType, ProcessPath, LogonProcess, Count | Select -exclude Group,Values,Name,LstMessage,FirstIndex,LastIndex | 
 Format-Table -auto *

([Environment].GetMembers()) | select Name |? Name -like '*Var*'

#############################################################
# Get Data Type Details
# 
 
'value member: {0}' -f "$($parameter.Value | Get-Member)"
# value member: bool Equals(System.Object obj) int GetHashCode() type GetType() string ToString() System.Collections.ObjectModel.Collection[string] Aliases {get;} System.Collections.ObjectModel.Collection[System.Attribute] Attributes {get;} bool IsDynamic {get;set;} string Name {get;set;} System.Collections.Generic.Dictionary[string,System.Management.Automation.ParameterSetMetadata] ParameterSets {get;} type ParameterType {get;set;} bool SwitchParameter {get;}
'value values: {0}' -f "$($parameter.Value | select-object *)"
# value values: @{Name=Arg1; ParameterType=System.Object; ParameterSets=System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterSetMetadata]; IsDynamic=False; Aliases=System.Collections.ObjectModel.Collection`1[System.String]; Attributes=System.Collections.ObjectModel.Collection`1[System.Attribute]; SwitchParameter=False}    
 
'property: {0}' -f "$(  (([ADSI] "WinNT://WORKGROUP/WIN11-2/Administrator").PsBase.Properties | Get-Member -MemberType Property).Name )"
# property: Count IsFixedSize IsReadOnly IsSynchronized Keys PropertyNames SyncRoot Values

'method: {0}' -f "$(  (([ADSI] "WinNT://WORKGROUP/WIN11-2/Administrator").PsBase.Properties | Get-Member -MemberType method ).Name -join('() ') )()"
# method: Add() Clear() Contains() CopyTo() Equals() GetEnumerator() GetHashCode() GetType() Remove() ToString()

'all : {0}' -f "$(  ([ADSI] "WinNT://WORKGROUP/WIN11-2/Administrator").PsBase.Properties | Get-Member  )"
# all : void IDictionary.Add(System.Object key, System.Object value) void IDictionary.Clear() bool Contains(string propertyName), bool IDictionary.Contains(System.Object key) void CopyTo(System.DirectoryServices.PropertyValueCollection[] array, int index), void ICollection.CopyTo(array array, int index) bool Equals(System.Object obj) System.Collections.IDictionaryEnumerator GetEnumerator(), System.Collections.IDictionaryEnumerator IDictionary.GetEnumerator(), System.Collections.IEnumerator IEnumerable.GetEnumerator() int GetHashCode() type GetType() void IDictionary.Remove(System.Object key) string ToString() System.DirectoryServices.PropertyValueCollection Item(string propertyName) {get;}, System.Object IDictionary.Item(System.Object key) {get;set;} int Count {get;} bool IsFixedSize {get;} bool IsReadOnly {get;} bool IsSynchronized {get;} System.Collections.ICollection Keys {get;} System.Collections.ICollection PropertyNames {get;} System.Object SyncRoot {get;} System.Collections.ICollection Values {get;}


# ([ADSI] "WinNT://WORKGROUP/WIN11-2/Administrator").PsBase.Properties | Get-Member -MemberType Properties
#   TypeName: System.DirectoryServices.PropertyCollection
# Name           MemberType Definition
# ----           ---------- ----------
# Count          Property   int Count {get;}
# ...

#############################################################
# Collect information about computer
# https://docs.microsoft.com/en-us/powershell/scripting/samples/collecting-information-about-computers?view=powershell-7.2
#
Get-CimInstance -ClassName Win32_OperatingSystem | Select-Object -expand CimInstanceProperties | Sort-Object Name |  Format-Table Name,Value,Flags


#############################################################
# Another way to get drive utilization using PSDrives.
#
Get-PSDrive -PSProvider filesystem | where-object {$_.used -gt 0} |
select-Object -property Root,@{name="SizeGB";expression={($_.used+$_.free)/1GB -as [int]}},
@{name="UsedGB";expression={($_.used/1GB) -as [int]}},
@{name="FreeGB";expression={($_.free/1GB) -as [int]}},
@{name="PctFree";expression={[math]::round(($_.free/($_.used+$_.free))*100,2)}}


#############################################################
# Work with quotes
#

$foo = 1,2,3
"$foo[1]"     # yields "1 2 3[1]"
"$($foo[1])"  # yields "2"

$bar = "abc"
"$bar.Length"    # yields "abc.Length"
"$($bar.Length)" # yields "3"


#############################################################
# Get Computer Serial Number
(Get-WmiObject win32_bios).serialnumber                   
GC70G73

PS C:\home\src\Scripts> (Get-WmiObject win32_bios) | Select *


#############################################################
# Get folder utilization for a given directory.
#
dir -path C:\home -file -recurse -force | 
measure-object length -sum -max -average | 
Select-Object @{name="Total Files";Expression={$_.count}},
@{name="Largest File(MB)";Expression={"{0:F2}" -f ($_.maximum/1MB)}},
@{name="Average Size(MB)";Expression={"{0:F2}" -f ($_.average/1MB)}},
@{name="Total Size(MB)";Expression={"{0:F2}" -f ($_.sum/1MB)}}

############################################################# 
# Get event log utilization for remote computers defined in $computers. The remote computers must be running PowerShell v3 or later.
#
gcim Win32_NTEventLogFile <#-computer $computers#> -filter  "NumberOfRecords > 0" | 
Select-Object @{Name="Computername";Expression={$_.CSName}},
LogFileName,
NumberOfRecords,
@{Name="Size(KB)";Expression={$_.FileSize/1kb}},
@{Name="MaxSize(KB)";Expression={($_.MaxFileSize/1KB) -as [int]}}, 
@{name="PercentUsed";Expression={[math]::round(($_.filesize/$_.maxFileSize)*100,2)}} | Sort Computername,PercentUsed | 
Format-Table -GroupBy Computername -property LogFileName,NumberOfRecords,*Size*,PercentUsed


###################################################
# Mount ISO image
$diskImage = Mount-DiskImage -ImagePath '<iso>' -NoDriveLetter -PassThru
$path = ('{0}\' -f $imgDevice.DevicePath)

#############################################################
# Get the last time your computer booted. Can be modified to query remote computers.
#
(gcim win32_operatingsystem).LastBootUpTime
# or modify to get uptime
(get-date) - ((gcim win32_operatingsystem).LastBootUpTime)

Get-CimInstance Win32_operatingsystem | Select-Object PSComputername,LastBootUpTime,@{Name="Uptime";Expression = {(Get-Date) - $_.LastBootUptime}}
<# -ComputerName $computers #> 

# Last BootUp day of the week
(gcim win32_operatingsystem).LastBootUpTime.Date.DayofWeek


#############################################################
# Get configured TrustedHosts.
#
(get-wsmaninstance wsman/config/client).trustedhosts

#############################################################
# Get all drives identified by a standard drive letter. Im suppressing errors to ignore non-existent drive letters.
#
get-volume -driveletter (97..122) -ErrorAction SilentlyContinue

#############################################################
# Get total physical memory formatted as GB.
#
gcim win32_computersystem <#-computer SRV1,SRV2 #> | Select PSComputername,@{Name="Memory";Expression={$_.TotalPhysicalMemory/1GB -as [int]}}

#############################################################
# Get IPv4 addresses on your local adapters.
#
Get-NetIPAddress -AddressFamily IPv4 | where-object IPAddress -notmatch "^(169)|(127)" | Sort-Object IPAddress | select IPaddress,Interface*
# or all ip-addresses
Get-NetIPAddress -AddressFamily IPv4 | Sort-Object IPAddress | select IPaddress,Interface* 

###########################################
# Process list
#
See ps-info.ps1

tasklist

Get-Process

Win+R resource monitor 

Win+R  task manager | Ctrl+Shift+Esc


###########################################
# Restore the original task manager after replacing it with the Sysinternals process explorer
# https://superuser.com/questions/1320561
# admin cmd:
reg delete "HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Image File Execution Options\taskmgr.exe" /v Debugger

#####################################
# Get-Process by Window Title
# http://woshub.com/managing-windows-processes-powershell/
Get-Process | Where-Object {$_.mainWindowTitle} | Format-Table Id, Name, mainWindowtitle

#############################################################
# Find all processes that use a given module (dll). You can filter by the dll name or use part of a path.
# https://www.pdq.com/blog/powershell-get-cpu-usage-for-a-process-using-get-counter/
get-process | Where { $_.Modules.filename -match "netapi32.dll"}

############################################################
# Get the list of process associated with TCP connections
# https://techexpert.tips/powershell/powershell-which-process-is-accessing-an-ip-address/

# https://docs.microsoft.com/en-us/previous-versions/windows/desktop/nettcpipprov/msft-nettcpconnection
# RequestedState TransitioningToState
# Unknown (0), Enabled (2), Disabled (3), Shut Down (4), No Change (5), Offline (6), Test (7), Defer (8), Quiesce (9), Reboot (10), Reset (11), Not Applicable (12), DMTF Reserved (13 65535)

function TcpConnectionState($state) {
    '{1}({0})' -f $state,$( switch($state) { 
       0 {'Unknown'}; 2 {'Enabled'}; 4 {'ShutDown'};  5 {'NoChange'}; 6 {'Offline'}; 7 {'Test'}; 
       8 {'Defere'};  9 {'Quiesce'}; 10  {'Reboot'}; 11 {'Reset'};   12 {'N/A'};    13 {'Reserved'} 
       default {'Undefined'} } )
}

$match="1332|1588"
$match=".*"
$Global:SomeCnt=0; $Global:Connections |? OwningProcess -match "$match" | 
   select @{N='No';E={($Global:SomeCnt++)}}, State,
   @{Name='InHost';E={$_.OffloadState -eq 'InHost'  }},
   @{Name='Inet';E={$_.AppliedSetting -eq 'Internet' }},
   @{N='LocalConn';E={$_.LocalAddress.Replace(':',''),$_.LocalPort -join(':')}},
   @{N='RemoteConn';E={if($_.RemotePort){$_.RemoteAddress.Replace(':',''),$_.RemotePort -join(':')}}},
   @{N='Open';E={'{0:F1}m'-f ((Get-Date)-$_.CreationTime).TotalMinutes}},
   @{N='ProcID';E='OwningProcess'},
   @{N='ParentID';E={$Global:Pids[[int]$_.OwningProcess].Parent.ID}},
   @{N='ProcName';E={$Global:Pids[[int]$_.OwningProcess].Name}},
   @{N='ParentName';E={$Global:Pids[[int]$_.OwningProcess].Parent.Name}},
   @{N='ProcUser';E={($Global:Pids[[int]$_.OwningProcess].UserName) -Replace('.*\\','')}},
   @{N='ProcStart';E={'{0:F1}m'-f ((Get-Date)-$Global:Pids[[int]$_.OwningProcess].StartTime).TotalMinutes}},
   @{N='ParentStart';E={'{0:F1}m'-f ((Get-Date)-$Global:Pids[[int]$_.OwningProcess].Parent.StartTime).TotalMinutes}},
   @{N='ProcCPU';E={'{0:N0}s' -f $Global:Pids[[int]$_.OwningProcess].CPU}},
   @{N='ProcWorkSet';E={'{0:N0} K' -f $($Global:Pids[[int]$_.OwningProcess].WS/1KB)}}, #  @{N='CommandLine';E={$Global:Pids[[int]$_.OwningProcess].CommandLine}},
   @{N='ProcExe';E={$Global:Pids[[int]$_.OwningProcess].Path}} | ft -a *

   
# find-myconnections -internet -SkipFormat | ft -a *
# use  C:\home\src\Scripts\find-myconnections.ps1
# C:\home\src\Scripts\find-myconnections.ps1 -DisplayCount 100 -internet  | ft -a *

function find-myconnections([string]$Port,[int]$ProcessID=0,$DisplayCount=20,[switch]$Reload,
   [switch]$internet,[switch]$Established,[switch]$Bound,[switch]$Listen,[switch]$CloseWait,[switch]$TimeWait,[switch]$Other,
   [switch]$SkipFormat,[switch]$SkipOutput) {
	if ( $Reload ) {
		$Global:PrevConnections = $Global:Connections 
		$Global:PrevProceses    = $Global:Proceses
		$Global:PrevPids        = $Global:Pids
		$Global:Connections     = @()
		$Global:Proceses        = @()
		$Global:Pids            = @()
	} 
	if (!$Global:Connections.Count) { 
		$Global:Connections=Get-NetTCPConnection
		'$Global:Connections Count:{0} | diff:{1}' -f $Global:Connections.Count,$($Global:Connections.Count-$Global:PrevConnections.Count)		
	} else {
		'$Global:Connections Count:{0}' -f $Global:Connections.Count
	}
	if (!$Global:Proceses.Count) { 
		$Global:Proceses=Get-Process -IncludeUserName
		'$Global:Proceses Count:{0} | diff:{1}' -f $Global:Proceses.Count,$($Global:Proceses.Count-$Global:PrevProceses.Count)
		foreach ($p in $Global:Proceses) { $Global:Pids[[int]$p.Id]=$p }
		'$Global:Pids     Count:{0} | diff: {1}' -f $Global:Pids.Count,$($Global:Pids.Count-$Global:PrevPids.Count)
	} else {
		'$Global:Proceses Count:{0}' -f $Global:Proceses.Count
		'$Global:Pids     Count:{0}' -f $Global:Pids.Count
	}
	
	'Search criterias: {0}' -f $PSBoundParameters.Count
	if($PSBoundParameters.Count) {$All=$false} else { $All=$true; }
	$Global:ConnCnt=0
	$Global:Data=$Global:Connections | Where-Object {
	    (
	       ( $Port.Length -eq 0 -or ( $_.LocalPort -match $Port -or $_.RemotePort -match $Port ) ) -and 
	       ( $ProcessID -eq 0 -or $_.OwningProcess -eq $ProcessID ) -and
		   ( ! $Internet -or $_.AppliedSetting -eq "Internet" ) -and
		   ( ! $Established -or $_.State -eq "Established" )    -and
		   ( ! $Bound -or $_.State -eq "Bound" )                -and
		   ( ! $CloseWait -or $_.State -eq "CloseWait" )        -and
		   ( ! $Listen -or $_.State -eq "Listen" )              -and
		   ( ! $TimeWait -or $_.State -eq "TimeWait" )          -and
		   ( ! $Other -or $_.State -notin "Internet","Established","Bound","CloseWait","Listen","TimeWait" ) 
		) -or ($All)
	} | select @{N='No';E={($Global:ConnCnt++)}},State,LocalAddress,LocalPort,RemoteAddress,RemotePort,OffloadState,AppliedSetting,CreationTime,InstanceID,
   @{N='LocalConn';E={$_.LocalAddress.Replace(':',''),$_.LocalPort -join(':')}},
   @{N='RemoteConn';E={if($_.RemotePort){$_.RemoteAddress.Replace(':',''),$_.RemotePort -join(':')}}},
   @{Name='InHost';E={$_.OffloadState -eq 'InHost'  }},
   @{Name='Inet';E={$_.AppliedSetting -eq 'Internet' }},
   @{N='Open';E={'{0:F1}m'-f ((Get-Date)-$_.CreationTime).TotalMinutes}},
   @{N='TransToStates'; E={(TcpConnectionState $_.TransitioningToState)}},
   @{N='ReqState';E={(TcpConnectionState $_.RequestedState)}},
   @{N='ProcID';E='OwningProcess'},
   @{N='ParentID';E={$Global:Pids[[int]$_.OwningProcess].Parent.ID}},
   @{N='ProcName';E={$Global:Pids[[int]$_.OwningProcess].Name}},
   @{N='ParentName';E={$Global:Pids[[int]$_.OwningProcess].Parent.Name}},
   @{N='ProcUser';E={($Global:Pids[[int]$_.OwningProcess].UserName) -Replace '.*\\'}},
   @{N='ParentUser';E={($Global:Pids[[int]$_.OwningProcess].Parent.UserName) -Replace '.*\\' }},
   @{N='ProcStart';E={'{0:F1}m'-f ((Get-Date)-$Global:Pids[[int]$_.OwningProcess].StartTime).TotalMinutes}},
   @{N='ParentStart';E={'{0:F1}m'-f ((Get-Date)-$Global:Pids[[int]$_.OwningProcess].Parent.StartTime).TotalMinutes}},
   @{N='ProcStartTM';E={$Global:Pids[[int]$_.OwningProcess].StartTime}},
   @{N='ParentStartTM';E={$Global:Pids[[int]$_.OwningProcess].Parent.StartTime.ToString('MM/dd HH:mm')}},
   @{N='ProcCPU';E={'{0:N0}s' -f $Global:Pids[[int]$_.OwningProcess].CPU}},
   @{N='ProcWorkSet';E={'{0:N0} K' -f $($Global:Pids[[int]$_.OwningProcess].WS/1KB)}},
   @{N='ParentCPU';E={'{0:N0}s' -f $Global:Pids[[int]$_.OwningProcess].Parent.CPU}},
   @{N='ParentWorkSet';E={'{0:N0} K' -f $($Global:Pids[[int]$_.OwningProcess].Parent.WS/1KB)}},
   @{N='Proc';E={$Global:Pids[[int]$_.OwningProcess]}},
   @{N='Parent';E={$Global:Pids[[int]$_.OwningProcess].Parent}} 
   ;

   'Fitered {0} $Global:Data of {1} $Global:Connections' -f $Global:Data.Count, $Global:Connections.Count
   if ( $SkipFormat) { 
		if ( ! $SkipOutput) { 
			'Display {0} of {1} from $Global:Data' -f $DisplayCount, $Global:Data.Count
			$Global:Data | 
			   select -first $DisplayCount No,LocalConn,RemoteConn,Open,InHost,Inet,State,
			                               ProcID,ProcUser,ProcName,ProcStart,ProcCPU,ProcWorkSet,
										   ParentID,ParentName,ParentStart,ParentCPU,ParentWorkSet,
										    @{N='ProcExe';E={$proc.Path}} 
			<#
			$Global:Data | select -first $DisplayCount *
			$Global:Data | select -first $DisplayCount No,LocalConn,RemoteConn,OffloadState,State,AppliedSetting,ConnCreated,TransToStates,ReqState,
			  ProcID,ParentID,ProcName,ParentName,ProcUser,ProcStartTM,ParentStartTM,ProcCPU,ProcWorkSet,Proc,ProcUser,CommandLine,Parent
			 #>
			'{0} of {1} from $Global:Data' -f $DisplayCount, $Global:Data.Count
		}
		return 
   
   }   
   
   $Global:Result=$Global:Data | select *,
   @{N='ProcExe';E={$_.Proc.Path}},
   @{N='ParentExe';E={$_.Parent.Path}},
   @{N='ProcArgs';E={ $m=126;$tmp=$_.Proc.CommandLine.Remove(0, $_.Proc.Path.Length+1) -replace '^" '; $tmp -replace "(?<=.{$m}).+" +$(if($tmp.Length -gt $m){'..'})}},
   @{N='CommandLine';E={ $_.Proc.CommandLine}}
   if ( $SkipOutput) { 
		'$Global:Result contains {0} rows' -f $Global:Result.Count
		return 
   }
   ## Output
	'Display {0} of {1} from $Global:Result' -f $DisplayCount, $Global:Result.Count
	$Global:Result | select -first $DisplayCount No,LocalConn,RemoteConn,InHost,Inet,State,ProcID,ParentID,CreationTime,ProcStartTM,ProcCPU,ProcExe,ProcArgs
	''
	'{0} of {1} from $Global:Result' -f $DisplayCount, $Global:Result.Count
	
	return 

}
 
 
function get-myconnections() {
	$Global:PrevConnections=$Global:Connections; $Global:PrevProceses=$Global:Proceses;
	$Global:PrevPids=$Global:Pids; $Global:PrevConnectedPids=$Global:ConnectedPids; 
	$Global:PrevServerPorts=$Global:ServerPorts; $Global:PrevClientPorts=$Global:ClientPorts
	$Global:Connections=Get-NetTCPConnection; $Global:Proceses=Get-Process -IncludeUserName
	'$Global:Connections   : {0} | diff: {1}' -f $Global:Connections.Count,$($Global:Connections.Count-$Global:PrevConnections.Count)
	'$Global:Proceses      : {0} | diff: {1}' -f $Global:Proceses.Count,$($Global:Proceses.Count-$Global:PrevProceses.Count)
	$Global:Pids=@{}; $Global:ConnectedPids=@{};  $Global:ServerPorts=@{}; $Global:ClientPorts=@{}
	foreach ($p in $Global:Proceses) { $Global:Pids[$p.Id]=$p }
	'$Global:Pids          : {0} | diff: {1}' -f $Global:Pids.Count,$($Global:Pids.Count-$Global:PrevPids.Count)
	foreach ($c in $Global:Connections) { 
	   $Global:ConnectedPids[$Global:ClientPids]+=@([int]$c.OwningProcess)
	   if ($c.RemotePort) { 
	     $rkey=$c.LocalAddress.Replace(':',''),$c.LocalPort -join(':'); 
		 $Global:ClientPorts[$rkey]+=@($c.InstanceID) 
	   } else { 
	     $lkey=$c.LocalAddress.Replace(':',''),$c.LocalPort -join(':'); 
	     $Global:ServerPorts[$lkey]+=@($c.InstanceID);
		}
	}
	'$Global:ConnectedPids : {0} | diff: {1}' -f $Global:ConnectedPids.Count,$($Global:ConnectedPids.Count-$Global:PrevConnectedPids.Count)
	'$Global:ServerPids    : {0} | diff: {1}' -f $Global:ServerPids.Count,$($Global:ServerPids.Count-$Global:PrevServerPids.Count)
	'$Global:LocalConn     : {0} | diff: {1}' -f $Global:LocalConn.Count,$($Global:LocalConn.Count-$Global:PrevLocalConn.Count)
 	 $Global:TcpState='Unknown','UnDef','Enabled','UnDef','ShutDown','NoChange','Offline','Test','Defere','Quiesce','Reboot','Reset','N/A','Reserved','UnDef'
}

function get-myremoteconn($filt,[switch]$remote,[switch]$local) { 
	$result=@()
	if ( ! $local -and ! $remote ) { $local=$true; $remote=$true; } 
	'local:{0} remote:{1}' -f $local, $remote
	$No=0
	if ($local) {
		$Keys=$Global:LocalConn.Keys
		'Local Keys: {0}' -f $Keys.Count
		foreach ($k in $Keys) {
			$c=$Global:LocalConn[$k]
			$pList=@()
			'$Global:ClientPids["{0}"] coint is {1}' -f $k, $Global:ClientPids[$k].Count
			[int]$id=0
			$No++
			foreach ( $id in $Global:ClientPids[$k]) {
				$p=$Global:Pids[$id]
				'$Global:Pids["{0}"] count is {1}' -f $id,$p.count
				'$Global:Pids["{0}"].id: {1}' -f $id,$p.Id
				'ProcessStart:{0}' -f $p.StartTime
				$pList+=@($p)
			}
			'$pList coint is {0}' -f $pList.Count
			$retcode=$c.LocalAddress.Replace(':',''),$c.LocalPort -join(':')
			$obj=[pscustomobject]@{
			    No=$No
				Type='Server'
				OpenAt = $c.CreationTime.ToString('MM/dd hh:ss')
				ServerPort=$c.LocalAddress.Replace(':',''),$c.LocalPort -join(':')
				ClientPort=$c.RemoteAddress.Replace(':',''),$c.RemotePort -join(':')
				State=$c.State
				OffloadState=$c.State
				FromState=$Global:TcpState[$c.RequestedState]
	            ToState=$Global:TcpState[$c.TransitioningToState]
				ProcessCnt=$pList.Cnt
				ProcessId=$pList[0].Id
				ParentId=$pList[0].Parent
				ProcessStart=$pList[0].StartTime
				CommandLine=$pList[0].CommandLine
				ProcessList=$pList
			}
			$result+=@($obj)
		}
		if ($No -gt 3) { break }
	}
	'Result: {0}'  -f $result.count
	$result
}



$No=0
foreach ($Conn in Get-NetTCPConnection) {
   $proc=Get-Process -IncludeUserName -Id $Conn.OwningProcess
   [pscustomobject]@{
		No=$(++$No)
		LocalAddress='{0}:{1}' -f $Conn.LocalAddress, $Conn.LocalPort
		RemoteAddress='{0}:{1}' -f $Conn.RemoteAddress, $Conn.RemotePort
		State  = $State
		OpenAt = $Conn.CreationTime.ToString('hh:mm:ss')
		Requested = $(TcpConnectionState $Conn.RequestedState)
		TransitioningTo =  $(TcpConnectionState $Conn.TransitioningToState)
		Conn=$Conn
		Process=$Proc
		Parent=$Proc.parent
	}
	if ($Proc.Id -or $No -gt 5) { break }
}



$Global:Connections | Select-Object @{name='ProcessID';expression={$proc=$Global:Pids[$_.OwningProcess]; $parent=$proc.parent; $_.OwningProcess}}, 
 @{name='ProcessName';expression={$proc.Name}},
 LocalAddress, LocalPort, RemoteAddress, RemotePort, State,
 @{N='OpenAt';E={$_.CreationTime.ToString('hh:mm:ss')}}, 
 @{N='Requested';E={ (TcpConnectionState $_.RequestedState)}},
 @{N='TransitioningTo'; E={(TcpConnectionState $_.TransitioningToState)}},
 @{name='ProcStartTime';expression={$proc.StartTime}},
 @{name='TotalProcessorTime';expression={$proc.TotalProcessorTime}},
 @{name='ParentPid';expression={$parent.ProcessId}},
 @{name='ParentName';expression={$parent.Name}},
 @{name='ParentStartTime';expression={$parent.StartTime.ToString('H:m:s')}},
 @{name='ParentProcessorTime';expression={$parent.TotalProcessorTime}},
 @{name='Parent';expression={$parent.Name}},
 @{name='ProcessCommand';expression={($proc.CommandLine)}},
 @{name='ProcessArgs';expression={$proc.CommandLine.Substring($parent.Path.Length) -replace('^[^ ]+ ') }},
 @{name='ParentCommand';expression={($parent.CommandLine)}},
 @{name='ParentArgs';expression={$parent.CommandLine.Substring($parent.Path.Length) -replace('^[^ ]+ ') }};
 
 $Global:Connections | ?{($true -or $_.RemoteAddress -ne '127.0.0.1') -and ($Pids.Count -eq 0 -or $_.OwningProcess -in $Pids)} | 
   Sort -Desc OwningProcess,LocalPort | ft -a


#############################################################################
# Get CPU Usage for a Process Using Get-Counter
# 
* Option A: This is if you just have the name of the process; partial name OK
$ProcessName = "cpu"

* Option B: This is for if you just have the PID; it will get the name for you
#$ProcessPID = "6860"

#$ProcessName = (Get-Process -Id $ProcessPID).Name
$CpuCores = (Get-WMIObject Win32_ComputerSystem).NumberOfLogicalProcessors
$Samples = (Get-Counter "\Process($Processname*)\% Processor Time").CounterSamples
$Samples | Select `
InstanceName,
@{Name="CPU %";Expression={[Decimal]::Round(($_.CookedValue / $CpuCores), 2)}}


#############################################################
# Get Process Owner

Get-Process pwsh* -IncludeUserName| select UserName,NPM,PM,WS,CPU,ID,Si,ProcessName | ft -auto

Invoke-CimMethod -InputObject (Get-CimInstance Win32_Process -Filter "name like 'notepad%'") -MethodName GetOwner
Invoke-CimMethod -InputObject (gcim -query "select * from Win32_Process where name like 'pwsh%exe'" | select -first 1) -MethodName GetOwner 
([wmisearcher]"select * from Win32_Process where name like 'pwsh%exe' ").Get().GetOwner().user


#############################################################
# expand object properties + where +format-table

PS C:\Users\alexe> ([wmisearcher]"select * from Win32_Process where name like 'pwsh%exe' ").Get() | select -expand Properties | ? Name -like '*User*' | ft
Name              Value   Type IsLocal IsArray Origin      Qualifiers
----              -----   ---- ------- ------- ------      ----------
UserModeTime 1558281250 UInt64    True   False CIM_Process {CIMTYPE}
UserModeTime   11093750 UInt64    True   False CIM_Process {CIMTYPE}


#################
# custom format data
# Export
Get-FormatData -TypeName System.Diagnostics.Process | Export-FormatData -Path C:\home\src\Format\Process.Format.ps1xml

# create
# https://jdhitsolutions.com/blog/powershell/7774/easy-powershell-custom-formatting/
# copied from the above html file:  C:\home\src\Format\wsprocess.format.ps1xml

Update-FormatData C:\home\src\Format\wsprocess.format.ps1xml
Get-Process | Where-Object WS -ge 100MB | Format-Table -View ws

#################################
# Calculatable Columns
# https://jdhitsolutions.com/blog/powershell/7774/easy-powershell-custom-formatting/


$props = @( "Handles",
    @{Name = "NPM(K)"; Expression = { [int]($_.npm / 1kb) } },
    @{Name = "PM(K)"; Expression = { [int]($_.pm / 1kb) } },
    @{Name = "WS(M)"; Expression = { if ($_.ws -ge 500MB) { "$([char]0x1b)[91m$([int]($_.ws/1mb))$([char]0x1b)[0m" } elseif ($_.ws -ge 250MB) { "$([char]0x1b)[93m$([int]($_.ws/1mb))$([char]0x1b)[0m" } else { [int]($_.ws / 1mb) } } },
    @{Name = "CPU"; Expression = { New-TimeSpan -Seconds $_.cpu } },
    "ID",
    @{Name = "ProcessName"; Expression = { if ($_.ws -ge 500MB) { "$([char]0x1b)[1;91m$($_.processname)$([char]0x1b)[0m" } elseif ($_.ws -ge 250MB) { "$([char]0x1b)[1;93m$($_.processname)$([char]0x1b)[0m" } else { $_.processname } } }
)

Get-Process | Where-Object WS -ge 100MB | Format-Table -Property $props -AutoSize


$props = @( "Handles",
    @{Name = "NPM(K)"; Expression = { [int]($_.npm / 1kb) } },
    @{Name = "PM(K)"; Expression = { [int]($_.pm / 1kb) } },
    @{Name = "WS(M)"; Expression = { if ($_.ws -ge 500MB) { "$([char]0x1b)[91m$([int]($_.ws/1mb))$([char]0x1b)[0m" } elseif ($_.ws -ge 250MB) { "$([char]0x1b)[93m$([int]($_.ws/1mb))$([char]0x1b)[0m" } else { [int]($_.ws / 1mb) } } },
    @{Name = "CPU"; Expression = { New-TimeSpan -Seconds $_.cpu } },
	@{Name = "RunTime"; Expression = { ((Get-Date) - $_.starttime).ToString("d\d\ hh\:mm\:ss") } }, 
	"UserName","ID",
    @{Name = "ProcessName"; Expression = {if ($_.ws -ge 500MB) { "$([char]0x1b)[1;91m$($_.processname)$([char]0x1b)[0m" } elseif ($_.ws -ge 250MB) { "$([char]0x1b)[1;93m$($_.processname)$([char]0x1b)[0m" } else { $_.processname } } }
)
# TimeSpan format: ("dd' days 'hh' hours 'mm' minutes 'ss' seconds'")
# "{0:dd}d:{0:hh}h:{0:mm}m:{0:ss}s" -f $up
Get-Process -IncludeUserName | Format-Table -Property $props -AutoSize

#####################################
# Get SHA1/MD5 hash of a file

Get-FileHash -Algorithm SHA1 file.txt
Get-FileHash -Algorithm MD5 file.txt


#############################################################
# Group process names and report memory
# get-process is gps
get-process | Group-Object name, {[int]($_.WorkingSet / 1MB)} -NoElement | sort name
gps | Group-Object {[int]($_.WorkingSet / 1MB)},name -NoElement | sort name

#############################################################
# Get cmdlets by using a parameter name and type
Get-Command -ParameterName *Auth* -ParameterType AuthenticationMechanism | format-table Name, Definition

#############################################################
# Get command parameters
 @((Get-Command Get-Command,Set-MyArgs).ParameterSets | ? Name -match '.*' | select -exclude Name -expand Parameters * | select -expand Attributes Name,ParameterType,Is*|? TypeId -notmatch 'Alias' | sort ParameterSetName, Name ) | Out-GridView
 $Commands=Get-Command Get-Command,Set-MyArgs
 $Commands | select * | ft
 
#############################################################
# Get a GUI interface for any PowerShell cmdlet
Show-Command Get-Something

#############################################################
# List all PowerShell profile script settings. You will see different values for different hosts, such as the PowerShell ISE, as well as between Windows PowerShell and PowerShell 7.
#
$profile | select *host* | format-list

#############################################################
# Show what PowerShell profile scripts exist.
#
($profile.psobject.properties).where({$_.name -ne 'length'}).where({Test-Path $_.value }) | Select-Object Name,Value

#############################################################
# Get the current date and time formatted as UTC time.
#
(get-date).ToUniversalTime()
# or pretty it up
"$((get-date).ToUniversalTime()) UTC"
"$((Get-Date).ToUniversalTime().tolongdatestring()) UTC"

#############################################################
# Get a formatted report of all commands with a synopsis.
#
(Get-Command).where({ $_.source -match "Wdac"}) | Sort-Object Source, CommandType, Name | Format-Table -AutoSize -GroupBy Source -Property CommandType, Name, 
    @{Name = "Synopsis"; Width=100; Expression = {(Get-Help $_.name).Synopsis  -replace "`r",'' -replace "`n",'' -replace '\s+',' '}} #  -replace '(?<=.{100}).+' 

(Get-Command).where({ $_.source }) | Format-Table -AutoSize -Property Source, CommandType, @{Name="Synopsis";Width=100;Expression={(Get-Help $_.name).Synopsis  -replace "[`r`n]",'' -replace '\s+',' '}} > all_commands.txt

#############################################################
# How long has your PowerShell session been running?
#
(Get-Date) - (get-process -id $pid).starttime


#########################################################
# Get the time and date as a string of numbers by using PowerShell
Get-Date -format "MM_dd_yyyy-HH_MM_ss"
04_28_2022-01_04_11


########################################
########################################
#######                         ########
#######      PSScriptTools      ########
#######                         ########
########################################
########################################
# Install : Install-Module PSScriptTools; "Y"
See c:\home\txt\ps1\PSScriptTools.txt

# Get-ChildItem 'C:\Program Files\WindowsPowerShell\Modules\PSScriptTools\2.43.0' *.ps1* -recurse | ForEach-object {Get-AuthenticodeSignature $_.FullName}

#####################################################################
# Find IP Search IP | Get-WhoIs
# This command will retrieve WhoIs information from the ARIN database for a given IPv4 address.
# https://github.com/jdhitsolutions/PSScriptTools/

PS C:\Users\alexe> Get-WhoIs 208.67.222.222 | Format-List

IP                     : 208.67.222.222
Name                   : OPENDNS-NET-1
RegisteredOrganization : Cisco OpenDNS, LLC
City                   : San Francisco
StartAddress           : 208.67.216.0
EndAddress             : 208.67.223.255
NetBlocks              : 208.67.216.0/21
Updated                : 12/14/2021 8:28:33 PM




##########################
##########################
##########################
######             #######
######  DISKS      #######
######             #######
##########################
##########################
##########################

##########################################
#############
# Performance of net mounts 
#
# You can disable SMB caching in the shared folder settings. Open the properties of the shared folder, and go to the Sharing tab -> Advanced Sharing -> Caching. 
# Select the second option “No files or programs from the shared folder are available offline”.

# Registry Network shared folder cache settings on the SMB client side
# REG HKLM\System\CurrentControlSet\Services\LanmanWorkstation\Parameters.
#    DirectoryCacheLifetime is the lifetime of the shared folder metadata cache (10 seconds by default);
#    FileNotFoundCacheLifetime – “File not found” response cache (5 seconds);
#    FileInfoCacheLifetime – the time of keeping the cache with the file info (10 seconds).

# list the current caching settings for the Windows SMB client with PowerShell:
Get-SmbClientConfiguration| select *cache*	

# Disabling network folder caching increases network traffic and reduces file-server performance. 
# Disable caching for SMB folders.
$regpath= "HKLM:\System\CurrentControlSet\Services\LanmanWorkstation\Parameters"
$Name1 = "DirectoryCacheLifetime"
$Name2 = "FileInfoCacheLifetime"
$Name3 = "FileNotFoundCacheLifetime"
New-ItemProperty -Path $regpath -Name DirectoryCacheLifetime -Value 0 -PropertyType DWORD -Force | Out-Null
New-ItemProperty -Path $regpath -Name FileInfoCacheLifetime -Value 0 -PropertyType DWORD -Force | Out-Null
New-ItemProperty -Path $regpath -Name FileNotFoundCacheLifetime -Value 0 -PropertyType DWORD -Force | Out-Null


# same wth the Set-SmbClientConfiguration cmdlet to fine-tune the SMB client:
Set-SmbClientConfiguration -DirectoryCacheLifetime 0
Set-SmbClientConfiguration -FileInfoCacheLifetime 0
Set-SmbClientConfiguration -FileNotFoundCacheLifetime 0


##################################################################


##########################
##########################
##########################
######             #######
######    FILES    #######
######             #######
##########################
##########################
##########################


# List filest and sort by update ti,e
# like "ls -tral | tail -10"
		
		ls C:\home\src\Scripts\ | sort -Descending LastWriteTime  | select -first 10

    Directory: C:\home\src\Scripts

Mode                 LastWriteTime         Length Name
----                 -------------         ------ ----
d----           1/19/2023  9:48 PM                tools
-a---           1/19/2023  7:35 PM           1444 subcommand_dynamic.ps1
d----           1/19/2023  7:34 PM                apps
-a---           1/19/2023  7:33 PM            262 subcommand_splat.ps1
-a---           1/19/2023  7:30 PM            214 splat.ps1
-a---           1/19/2023  6:58 PM           2423 Show-Devices.ps1
-a---           1/18/2023  2:13 PM           7993 Exec-Cmd.ps1
-a---           1/18/2023  1:31 AM          25300 Win32_PnPEntityScriptBlock.ps1
-a---           1/18/2023  1:20 AM          14535 find-typeassembly.ps1
-a---           1/15/2023  4:38 AM           7808 Search-Registry.ps1


		C:\home\src\Scripts\tools\Get-DirectoryTreeSize.ps1 C:\home\tmp\PSScriptTools -AllItemsAndAllFolders

Path             : C:\home\tmp\PSScriptTools\
TotalFileCount   : 303
TotalDirCount    : 12
TotalSizeInBytes : 29626125
TotalSizeInMB    : 28.254


		C:\home\src\Scripts\tools\Get-DirectoryTreeSize.ps1 C:\home\src\Scripts -AllItemsAndAllFolders

Path             : C:\home\src\Scripts\
TotalFileCount   : 324
TotalDirCount    : 137
TotalSizeInBytes : 4195843
TotalSizeInMB    : 4.001


# Directory size
		C:\home\src\Scripts\tools\Get-DirectoryTreeSize.ps1 C:\home\src -AllItemsAndAllFolders

Path             : C:\home\src\
TotalFileCount   : 379
TotalDirCount    : 160
TotalSizeInBytes : 4369283
TotalSizeInMB    : 4.167


# changed Get-DirectoryTreeSize.ps1 to show hidden folders ( Get-ChildItem -Force )
# PS C:\home\src> C:\home\src\Scripts\tools\Get-DirectoryTreeSize.ps1 C:\home\src -All

Path             : C:\home\src\
TotalFileCount   : 373
TotalDirCount    : 160
TotalSizeInBytes : 4288472
TotalSizeInMB    : 4.09


## Get-DirSize.ps1
	C:\home\src\Scripts\tools\Get-DirSize.ps1 -Path C:\home\tmp\empty,C:\home\src
One-Liner: [Linq.Enumerable]::Sum( [decimal[]] (gci -r -force 'C:\home\tmp\empty', 'C:\home\src' |? Size).Size)

DisplayName       Total NoOfDirs NoOfFiles SizeMB SizeBytes
-----------       ----- -------- --------- ------ ---------
C:\home\tmp\empty     0        0         0   0.00         0
C:\home\src         534      160       374   4.09   4292544


		C:\home\src\Scripts\tools\Get-DirSize.ps1 -Path ((ls C:\home\src).FullName) | ft
One-Liner: [Linq.Enumerable]::Sum( [decimal[]] (gci -r -force 'C:\home\src\Bash', 'C:\home\src\Format', 'C:\home\src\PSColor', 'C:\home\src\Scripts' |? Size).Size)

DisplayName         Total NoOfDirs NoOfFiles SizeMB SizeBytes
-----------         ----- -------- --------- ------ ---------
C:\home\src\Bash        7        0         7   0.04     46071
C:\home\src\Format      4        0         4   0.02     21561
C:\home\src\PSColor    63       19        44   0.10    105808
C:\home\src\Scripts   456      137       319   3.93   4119104

	C:\home\src\Scripts\tools\Get-DirSize.ps1 -Path C:\home\src  -Depth 1 | ft

DisplayName         Total NoOfDirs NoOfFiles SizeMB SizeBytes Modified            FileName              FileSizeMb FileCreated
-----------         ----- -------- --------- ------ --------- --------            --------              ---------- -----------
C:\home\src           534      160       374   4.10   4294188 2023/01/20 03:44:56 Get-DirSize.ps1             0.01 2023/01/20 12:33:50
C:\home\src\Bash        7        0         7   0.04     46071 2022/07/09 04:24:57 alias.sh                    0.02 2022/07/06 09:17:23
C:\home\src\Format      4        0         4   0.02     21561 2022/05/14 03:15:04 myThing.format.ps1xml       0.00 2022/05/14 03:04:39
C:\home\src\PSColor    63       19        44   0.10    105808 2022/04/11 05:32:54 build.ps1                   0.00 2022/04/11 05:32:54
C:\home\src\Scripts   456      137       319   3.93   4120748 2023/01/20 03:44:56 Get-DirSize.ps1             0.01 2023/01/20 12:33:50

C:\home\src\Scripts\tools\Get-DirSize.ps1 -Path C:\home\src  -Depth 1
 CALL [Get-DirSize.ps1:255 Set-Args()] {bound(2): -Path:'C:\home\src' -Depth:'1'}
One-Liner: [Linq.Enumerable]::Sum( [decimal[]] (gci -r -force 'C:\home\src' |? Size).Size)
2023-01-24 03:10:24 [Get-DirSize.ps1:315 Get-DirInfo()] Start
2023-01-24 03:10:25 [Get-DirSize.ps1:388 Get-DirInfo()] Done 5 objects in $Global:Data; 460 objects in $Global:RawData
2023-01-24 03:10:25 [Get-DirSize.ps1:410 Print-MyResult()] Start VARS[5] <[SwitchParameter]$Grid='False'> <[SwitchParameter]$List='False'> <[SwitchParameter]$Quiet='False'> <[Hashtable]$printParams='System.Collections.Hashtable'> <[ScriptBlock]$printScript=' $Global:Data | Select @printParams '>

DisplayName NoOfDirs NoOfFiles Hidden SizeMB LastWriteTime       FileName              FileSize FileCreated         FileModified
----------- -------- --------- ------ ------ -------------       --------              -------- -----------         ------------
C:\home\src      160       378      2   4.16 2023/01/24 03:10:23 Get-DirSize.ps1          21762 2023/01/20 12:33:50 2023/01/24 03:10:23
.\Bash             0         7      0   0.04 2022/07/09 04:24:57 alias.sh                 25688 2022/07/06 09:17:23 2022/07/09 04:24:57
.\Format           0         4      0   0.02 2022/05/14 03:15:04 myThing.format.ps1xml     5117 2022/05/14 03:04:39 2022/05/14 03:15:04
.\PSColor         19        44      1   0.10 2022/04/11 05:32:54 .git                           2022/04/11 05:32:53 2022/04/11 05:32:54
.\Scripts        137       323      1   3.99 2023/01/24 03:10:23 Get-DirSize.ps1          21762 2023/01/20 12:33:50 2023/01/24 03:10:23

Printed all 5 objects of  $Global:MyResult
2023-01-24 03:10:25 [Get-DirSize.ps1:427 Print-MyResult()] Done 5 objects in $Global:MyResult



		C:\home\src\Scripts\tools\Get-DirSize.ps1 -Path C:\home\src -SortBy Created -Short | ft
SortBy: Created
Short TimeFormat: hh:mm:ss
One-Liner: [Linq.Enumerable]::Sum( [decimal[]] (gci -r -force 'C:\home\src' |? Size).Size)

DisplayName Total NoOfDirs NoOfFiles SizeMB SizeBytes Created  FileName        FileSizeMb FileCreated
----------- ----- -------- --------- ------ --------- -------  --------        ---------- -----------
C:\home\src   534      160       374   4.10   4294188 12:33:50 Get-DirSize.ps1       0.01 12:33:50


		C:\home\src\Scripts\tools\Get-DirSize.ps1 -Path 'C:\Program Files'  -Depth 1 -Short | ft -a
Short TimeFormat: MM/dd hh:mm

DisplayName                                   Total NoOfDirs NoOfFiles  SizeMB  SizeBytes LastWriteTime FileName                                                   FileSizeMb FileCreated
-----------                                   ----- -------- ---------  ------  --------- ------------- --------                                                   ---------- -----------
C:\Program Files                              51166     7502     43664 7768.74 8146112327 01/20 12:42   Wireshark                                                        0.00 01/20 12:41
.\Common Files                                  379       91       288   71.41   74879836 01/19 12:49   KAVKISKTSWinUpgradeParams.cfg                                    0.00 06/05 02:09
.\Dell                                         3106      286      2820  742.35  778406095 01/20 12:42   dcsys64.xml                                                      0.24 07/21 04:22
.\dotnet                                        602       11       591  155.06  162591844 01/10 03:11   swidtag                                                          0.00 06/06 05:24
.\ENE                                             3        1         2    0.51     530688 12/20 01:27   Aac_ENE_QSI_Loki_HAL                                             0.00 12/20 01:27
.\Google                                        119       15       104  592.83  621632535 12/27 08:21   SetupMetrics                                                     0.00 11/20 08:09
.\Hyper-V                                        88       10        78   38.95   40842328 01/10 03:20   Microsoft.Virtualization.Client.RdpClientAxHost.dll              0.38 01/10 03:20
.\IIS Administration                            435       23       412   25.25   26475566 01/01 07:05   config                                                           0.00 11/19 09:24
.\Intel                                          14        3        11    9.74   10214176 11/23 11:40   iCLS                                                             0.00 11/23 11:40
.\Internet Explorer                              18        4        14    2.41    2524362 06/05 01:08   iexplore.exe                                                     0.81 06/05 01:08
.\LogiOptionsPlus                               164       14       150  297.84  312305683 06/09 01:11   debug.log                                                        0.00 06/09 01:11
.\Microsoft                                       1        1         0    0.00          0 06/07 02:22   EdgeUpdater                                                      0.00 06/07 02:22
.\Microsoft Corp                                 26        1        25    4.86    5100124 07/15 02:42   PayloadParserService.InstallState                                0.01 07/15 02:42
.\Microsoft Message Analyzer                   4321      379      3942  357.57  374944191 12/30 08:13   PEF                                                              0.00 07/15 11:11
.\Microsoft Network Monitor 3                    66        2        64   11.08   11616581 07/14 07:55   Help                                                             0.00 07/14 07:55
.\Microsoft Office                                2        0         2    0.00        584 06/05 11:10   filesystemmetadataRoaming.xml                                    0.00 06/05 11:07
.\Microsoft Update Health Tools                   0                                       06/05 11:10
.\ModifiableWindowsApps                           0                                       06/05 11:10
.\Mozilla                                        11        1        10   51.41   53909748 12/25 12:26   Mozilla VPN                                                      0.00 06/05 03:18
.\Mozilla Firefox                               103        9        94  214.09  224489844 01/17 09:22   installation_telemetry.json                                      0.00 12/19 10:16
.\MSBuild                                         8        4         4    0.02      25757 06/05 12:59   Microsoft                                                        0.00 06/05 12:59
.\NVIDIA Corporation                           1054       29      1025  569.68  597351006 01/18 09:56   Installer2                                                       0.00 06/05 09:44
.\Plex                                         3546      410      3136  528.99  554691083 01/06 01:22   Uninstall.exe                                                    0.13 01/06 01:22
.\PowerShell                                    943       58       885  257.46  269966983 12/30 08:07   Modules                                                          0.00 12/25 08:17
.\PuTTY                                          10        0        10    5.51    5777649 10/28 06:23   puttygen.exe                                                     0.58 10/28 06:23
.\Realtek                                        15        4        11  121.23  127123754 06/05 09:17   Waves                                                            0.00 06/05 09:17
.\Reference Assemblies                           98        8        90   33.20   34813609 12/16 02:55   v3.0                                                             0.00 06/05 12:59
.\Uninstall Information                           0                                       12/16 02:55
.\Update Services                                55        8        47   11.07   11609153 12/30 04:29   Schema                                                           0.00 12/30 04:29
.\VideoLAN                                      828      245       583  178.10  186752546 12/13 05:26   uninstall.exe                                                    0.23 06/05 02:03
.\Windows Admin Center                          214       22       192   88.04   92318266 01/01 06:36   ManagementTools                                                  0.00 01/01 06:36
.\Windows Defender                               58        4        54   16.37   17168414 06/05 02:04   Platform                                                         0.00 06/05 02:04
.\Windows Defender Advanced Threat Protection    30        4        26   70.11   73520029 11/22 05:24   en-US                                                            0.00 06/05 10:30
.\Windows Mail                                    3        0         3    0.68     708608 12/15 04:17   wabimp.dll                                                       0.07 12/15 04:17
.\Windows Media Player                           56        7        49    4.70    4929470 12/16 02:54   Skins                                                            0.00 06/05 10:30
.\Windows NT                                     15        5        10    6.22    6519128 06/05 01:10   Accessories                                                      0.00 06/05 10:21
.\Windows Photo Viewer                           13        2        11    5.89    6176232 06/05 04:44   PhotoViewer.dll                                                  1.62 06/05 04:44
.\Windows Sidebar                                 2        2         0    0.00          0 06/05 08:10   Gadgets                                                          0.00 06/05 08:10
.\WindowsApps                                 33265     5707     27558 3010.73 3156976804 01/18 02:11   NVIDIACorp.NVIDIAControlPanel_8.1.963.0_x64__56jybvy8sckqj       0.00 11/04 08:47
.\WindowsPowerShell                             215       58       157    2.59    2718574 01/01 06:38   MS-CredSSP-Admin.psrc                                            0.00 07/12 09:51
.\WireGuard                                       2        1         1    1.02    1064968 01/18 11:27   log.bin                                                          1.02 12/25 12:27
.\Wireshark                                    1188       31      1157  202.26  212088228 01/20 12:42   toolbar                                                          0.00 01/20 12:42
.\wiresharkdissect                               47        0        47   79.49   83347707 07/15 02:41   uninstall.exe                                                    0.04 07/15 02:41


PS C:\home> C:\home\src\Scripts\tools\Get-DirSize.ps1 -Path 'C:\'  -Depth 1 -Short | ft -a
Short TimeFormat: MM/dd hh:mm

DisplayName                  Total NoOfDirs NoOfFiles     SizeMB     SizeBytes LastWriteTime FileName                                      FileSizeMb FileCreated
-----------                  ----- -------- ---------     ------     --------- ------------- --------                                      ---------- -----------
C:\                         940109   171042    769067 1228801.57 1288491838656 01/20 04:24   FIREFOX.EXE-25E6B4BA.pf                             0.07 01/14 11:17
.\$Recycle.Bin                  32       14        18       0.79        823533 01/16 05:20   S-1-5-21-3101668316-195586092-1316055306-1004       0.00 12/25 11:50
.\$SysReset                     20        6        14      19.89      20857326 06/05 01:42   diagerr.xml                                         0.04 06/05 12:48
.\$WinREAgent                    0                                             06/05 01:42
.\Documents and Settings         0                                             06/05 01:42
.\Get-WACPMSavedLogs             0                                             06/05 01:42
.\home                       33341     3948     29393  121593.50  127500026205 01/20 04:30   Get-DirSize.ps1                                     0.01 01/20 12:33
.\inetpub                      171       19       152       1.80       1885178 01/18 11:18   appPools                                            0.00 07/14 10:16
.\OneDriveTemp                   3        3         0       0.00             0 06/20 03:44   S-1-5-21-3101668316-195586092-1316055306-1004       0.00 05/02 01:20
.\PerfLogs                       0                                             06/20 03:44
.\Program Files              51166     7502     43664    7768.74    8146112327 01/20 12:42   Wireshark                                           0.00 01/20 12:41
.\Program Files (x86)         7413     1271      6142    2825.78    2963046408 01/18 11:18   dummy.tmp                                           0.00 01/18 11:18
.\ProgramData                29782    10053     19729   14679.41   15392477590 01/20 04:28   storage_pure.kvdb-wal                              22.61 06/05 02:09
.\Recovery                      10        3         7     680.53     713590079 01/10 03:16   WindowsRE                                           0.00 03/07 06:05
.\symbols                       48       30        18     172.05     180408320 05/02 05:39   CBEF9EEBBF6CF821286A1DE4740FC05A1                   0.00 05/02 05:39
.\System Volume Information      0                                             05/02 05:39
.\temp                           2        0         2       7.40       7754891 12/28 02:59   nettrace-boot.cab                                   1.90 12/28 02:59
.\Users                     238434    29885    208549  946283.79  992250470103 01/20 04:31   session.xml                                         0.01 06/05 03:12
.\Windows                   429153   105182    323971   36214.80   37973971914 01/20 04:31   CONHOST.EXE-AE20F66C.pf                             0.00 12/25 04:34
.\Windows.old               150425    13107    137318   26538.43   27827564305 06/05 01:13   NTUSER.DAT                                          0.25 06/05 08:01


PS C:\home> C:\home\src\Scripts\tools\Get-DirSize.ps1 -Path 'C:\home\src' -reload | ft -a
One-Liner: [Linq.Enumerable]::Sum( [decimal[]] (gci -r -force 'C:\home\src' |? Size).Size)
5 objects in $Global:MyData

DisplayName Total NoOfDirs NoOfFiles SizeMB SizeBytes LastWriteTime         FileName FileSizeMb FileSize
----------- ----- -------- --------- ------ --------- -------------         -------- ---------- --------
C:\home\src   534      160       374   4.10   4296466 1/20/2023 12:19:35 PM                0.01     7994
.\Bash          7        0         7   0.04     46071 7/9/2022 4:24:57 PM                  0.02    25688
.\Format        4        0         4   0.02     21561 5/14/2022 3:15:04 PM                 0.00     5117
.\PSColor      63       19        44   0.10    105808 4/11/2022 5:32:54 PM                 0.00
.\Scripts     456      137       319   3.93   4123026 1/20/2023 12:19:35 PM                0.01     7994


### one liner

		(gci C:\home\src -r -force | measure -sum -property Length).Sum
4289883
		
		gci C:\home\src -r -force -include *.txt,*.ps1 | measure -sum -property Length | select Count,Sum

############################
############################
###                      ###
###   Samba  FileShare   ###
###                      ###
############################
############################
see c:\home\txt\w\network\Get-Samba.txt
Get-SmbShare
Get-SmbMapping
Get-SmbClientConfiguration
Get-SmbClientNetworkInterface
Get-SmbConnection
Get-SmbOpenFile
Get-SmbServerConfiguration

Get-FileShare

######################
######################
###                ###
###   DISK SPACE   ###
###                ###
######################
######################
# Get free space for drive C on the local computer formatted in GB
#
(gcim win32_logicaldisk -filter "deviceid =  C: ").FreeSpace/1gb
#or use the PSDrive
(gdr c).Free/1gb

# Get-PSDrive | sort root | ft -a; Get-PSDrive C

# 1. Show All Drives and Space Allocation on the Computer
# https://www.partitionwizard.com/resizepartition/powershell-get-disk-space.html
Get-Volume; Get-Volume -DriveLetter C
# 2.  Get Disk Space via the Get-PSDrive Command
# https://www.partitionwizard.com/resizepartition/powershell-get-disk-space.html
PS C:\home\src> Get-PSDrive| sort provider,name| ft -a; Get-PSDrive C

Name     Used (GB) Free (GB) Provider    Root                                       CurrentLocation
----     --------- --------- --------    ----                                       ---------------
Alias                        Alias
Env                          Environment
C          1237.23    263.75 FileSystem  C:\                                               home\src
D           270.86   2495.11 FileSystem  D:\
E          1019.08    868.75 FileSystem  E:\
F           138.22     37.56 FileSystem  F:\
G           175.78      0.00 FileSystem  G:\
H           156.77     19.01 FileSystem  H:\
I             0.10    175.68 FileSystem  I:\
J             0.10    175.68 FileSystem  J:\
K             0.10    175.68 FileSystem  K:\
L             0.10    175.68 FileSystem  L:\
M             0.10    175.68 FileSystem  M:\
N            24.45    346.64 FileSystem  N:\
Temp       1237.23    263.75 FileSystem  C:\Users\Administrator\AppData\Local\Temp\
Function                     Function
HKCU                         Registry    HKEY_CURRENT_USER
HKLM                         Registry    HKEY_LOCAL_MACHINE
Variable                     Variable
Cert                         Certificate \
WSMan                        WSMan


Name Used (GB) Free (GB) Provider   Root CurrentLocation
---- --------- --------- --------   ---- ---------------
C      1237.23    263.75 FileSystem C:\         home\src

# 3. Get Disk Space via the Get-WmiObject Command
# https://www.partitionwizard.com/resizepartition/powershell-get-disk-space.html
Get-WmiObject -Class win32_logicaldisk | Format-Table DeviceId, MediaType, @{n="Size";e={[math]::Round($_.Size/1GB,2)}},@{n="FreeSpace";e={[math]::Round($_.FreeSpace/1GB,2)}}



#######################################################
# Read file content with line numbers
Use     : C:\home\src\Scripts\read-file.ps1 <file> <maxlines> <first> <algo>
Example : C:\home\src\Scripts\read-file.ps1 C:\home\src\Scripts\read-file.ps1 12 41

#############################################################
# Diff files 
# Pwsh.exe : Compare-Object (diff) , Get-Content (cat ) 
# Cmd.exe  : fc.exe
# alias diff,cat: diff -> Compare-Object,  cat -> Get-Content, gc -> Get-Content

$f1='C:\home\src\Scripts\Get-MyVariable.ps1'
$f2='C:\home\src\Scripts\Get-MyVariable2.ps1'
$width=100
# https://serverfault.com/questions/5598/how-do-i-diff-two-text-files-in-windows-powershell
function mydiff($fname1, $fname2) {
	$dat1=gc $fname1; $tot1=$dat.Count; $lw1=(1+([string]$tot1).Length)
	$dat2=gc $fname2; $tot2=$dat.Count; $lw2=(1+([string]$tot2).Length)
	$lw=[math]::max($lw1,$lw1)
	$txt1=(gc $fname1 | % -begin { $ln=0 } -process { "{0,$lw} << {1}" -f ++$ln,$_ }) 
	$txt2=(gc $fname2 | % -begin { $ln=0 } -process { "{0,$lw} >> {1}" -f ++$ln,$_ }) 
	write-host "$tot1 <- $fname1"; 
	write-host "$tot2 -> $fname2"
	diff $txt1 $txt2 -property { $_.substring(($lw+4)) } -passthru | sort
}
mydiff $f1 $f2

# Diff with diff & cat 
$f1,$f2 | Get-FileHash
diff (cat $f1) (cat $f2)


#############################################################
# Find file | Search File | locate file
# Get-Alias -Definition Select-Get-ChildItem >> ls; Get-Alias -Definition Select-String >> sls; -recursive >> -r
ls C:\home\src\Scripts\ *ps1 -r | sls PSProfileLoad                       # find "PSProfileLoad" in all *ps1 files locate in C:\home\src\Scripts\ tree
ls C:\ 'PsGetSid*' -Recurse -ea 0                                         # find file 'PsGetSid*' in disk c:
ls C:\ -r -ea 0 'avp*' | select lastwritetime,length,attributes,fullname  # find file 'PsGetSid*' in disk c:
ls ($env:PSModulePath -split ';') 'PSDesiredStateConfiguration'           # find executable in the path 

Get-ChildItem C:\Users\User\Documents\DiagnosticTool_20220906_200208362\ -recurse  | Select-String -pattern '2022.* 16:0','2022.* 20:0'

####################################################################
# Get files last modified within a certain interval. The default is 24 hours.
# https://github.com/jdhitsolutions/PSScriptTools/

Get-LastModifiedFile *txt C:\home -Recurse -Interval Minutes -IntervalCount 60 # txt files in C:\home folders changed within last 60 minutes
Get-LastModifiedFile -Path C:\home -Recurse                                    # all files in C:\home folders changed within last 24 hours

##############################################
# Search String in Files aka Unix find <folder> -name '<mask>' -exec grep <pattern> {} \;
# Powershell grep
# https://adamtheautomator.com/powershell-grep/
# Search for 'nglauncher' recursively in the folder C:\Users\User\Documents\DiagnosticTool_20220906_165736076\ 
Get-ChildItem C:\Users\User\Documents\DiagnosticTool_20220906_200208362\ -recurse  | Select-String -pattern 'nglauncher'

# Search for 'nglauncher' recursively in the folder C:\Users\User\Documents\DiagnosticTool_20220906_165736076 and show only first match per file
Get-ChildItem C:\Users\User\Documents\DiagnosticTool_20220906_200208362\ -recurse  | Select-String -pattern 'nglauncher' -list

# Search for 'WebView2' recursively in the folder C:\Users\User\Documents\DiagnosticTool_20220906_165736076 and show only first match per file with context ( one line above and below)
Get-ChildItem C:\Users\User\Documents\DiagnosticTool_20220906_200208362\ -recurse  | Select-String -pattern 'nglauncher' -list -context 1
	
	
# Search for '9/6/2022.*16:0' recursively in the folder 
Get-ChildItem C:\Users\User\Documents\DiagnosticTool_20220906_200208362\ -recurse  | Select-String -pattern '9/6/2022.*16:0'

# Search for  '2022.* 16:0','2022.* 20:0' recursively in the folder - this is time 16:00 EST is 20:00 GMT
Get-ChildItem C:\Users\User\Documents\DiagnosticTool_20220906_200208362\ -recurse  | Select-String -pattern '2022.* 16:0','2022.* 20:0'

# Search in files changed within last 600 minutes (10 hours)
Get-LastModifiedFile -Path C:\Users\User\Documents -Recurse -Interval Minutes -IntervalCount 600 |? Extension -ne '.zip' | Select-String nsepa
ls C:\Users\User\Documents\DiagnosticTool_20220906_203303501\ -recurse | where LastWriteTime -gt '9/6/2022  4:29 PM' | select LastWriteTime, FullName


Get-LastModifiedFile -Path c:\home\src\Scripts -Recurse -Interval Years -IntervalCount 1 | Group-Object {$_.LastWriteTime.month} | Select-Object @{Name="Month";Expression = {"{0:MMM}" -f (Get-Date -Month $_.Name)}}, Count


# list files with times creation recursively
ls C:\Users\User\Documents\DiagnosticTool_20220906_203303501\ -recurse |? Attributes -notin Directory | Sort LastWriteTime | select LastWriteTime,LastAccessTime,Attributes,SizeKB,FullName | ft -a > .\search6.txt

# wevtutil query-events
####
# Search "Get-XmlEvent" file in the all recently changed files of folder "C:\home\src\Scripts\"
Get-LastModifiedFile * C:\home\src\Scripts\ -IntervalCount 600 | 
   Sort LastWriteTime | 
      Select -last 15 | 
	     Select-String Get-XmlEvent 


#############################################################
# Get-FileExtensionInfo DiskSpace
# This command will search a given directory and produce a report of all files based on their file extension.
# This command is only available in PowerShell 7. The extension with the largest total size will be highlighted
# See usage snapshots in C:\home\data\Reports\Disk\Get-FolderSizeInfo.txt
https://github.com/jdhitsolutions/PSScriptTools/blob/master/docs/Get-FileExtensionInfo.md
https://github.com/jdhitsolutions/PSScriptTools/blob/master/functions/Get-FileExtensionInfo.ps1
PS C:\Users\alexe> Get-FileExtensionInfo c:\home -Recurse | Sort  -desc TotalSize | Select -First 20

   Path: C:\home [WIN11-2]

Extension Count  TotalSize   Smallest      Average    Largest
--------- -----  ---------   --------      -------    -------
.iso          1 5567117312 5567117312   5567117312 5567117312
.jpg       1196 1983144134       7001   1658147.27    5711709
.exe       1098 1314694900       8704   1197354.19  232862640
.zip          7 1057575511       5218 151082215.86 1055212792
.dll       2216 1018870740       3584    459779.21   75001920
.lib       1852  958203934       1350    517388.73   86076926
.xlsx        60  681243531       9811  11354058.85   21282057
.mov        193  548696001     516429   2842984.46   12639985
.mp4          5  382669122   10276852   76533824.4  294438279
.h         3754  299209418        113     79704.16    9440135
.png        512  296160447         88    578438.37   27602064
.txt        516  283366556          4    549159.99   54443364
.msi         20  276521472     376832   13826073.6   78991360
.heic       136  213975020     794041   1573345.74    2657677
.xml       1141  202365791          0    177358.27   21034773
.pcapng       1  102317928  102317928    102317928  102317928
.eml         72   98968170      11353   1374557.92   21733794
.log          8   89159539          0  11144942.38   31117852
.PML          2   68991032   17780724     34495516   51210308
.js         208   62454062         72    300259.91   10759020


PS C:\Users\alexe> Get-FileExtensionInfo c:\home -Recurse | Sort Count -desc | Select -first 20

###################################################
# Get-FolderSizeInfo
# Use this command to quickly get the size of a folder. You also have an option to include hidden files. The command will measure all files in all subdirectories.
# The command includes a format file with an additional view to display the total size in KB, MB, GB, or TB.
# See usage snapshots in C:\home\data\Reports\Get-FolderSizeInfo.txt

PS C:\Users\alexe> Get-FolderSizeInfo  c:\home -Hidden
Computername    Path                                                TotalFiles     TotalSize
------------    ----                                                ----------     ---------
WIN11-2         C:\home                                                  23430   16001729959

PS C:\Users\alexe> Get-ChildItem C:\ -Directory | Get-FolderSizeInfo -Hidden | Where-Object TotalSize -gt 1gb | Sort-Object TotalSize -Descending | Format-Table -View gb
PS C:\Users\alexe> Get-ChildItem C:\Users\,C:\home  -Directory | Get-FolderSizeInfo -Hidden | Where-Object TotalSize -gt 1mb | Sort-Object TotalSize -Descending | Format-Table -View mb

Computername    Path                                                TotalFiles   TotalSizeMB
------------    ----                                                ----------   -----------
WIN11-2         C:\Users\alexe                                          150091    52576.7876
WIN11-2         C:\home\distro                                               7     5632.7331
WIN11-2         C:\Users\admin                                              15     4121.7354
WIN11-2         C:\home\apps                                             20665     3981.7836
WIN11-2         C:\home\archive                                           1712     3787.8696
WIN11-2         C:\home\crypto                                             709     1185.3026
WIN11-2         C:\Users\kirae                                            3422       530.684
WIN11-2         C:\home\txt                                                105      415.6121
WIN11-2         C:\home\data                                                 6      170.8541
WIN11-2         C:\home\tmp                                                  7       85.0172
WIN11-2         C:\Users\DefaultAppPool                                     60        2.6273
WIN11-2         C:\home\src                                                207        1.2347

#############################################################
# Find files created during last 60 days, aka newer than 60 days 
# 
$limit = (Get-Date).AddDays(-60)
$path = "Y:"
Get-ChildItem -Path $path -Recurse -Force | Where-Object { !$_.PSIsContainer -and $_.CreationTime -gt $limit }

##############################################
# Find Files by extention 
$ext_filt=@('ps1','msc')
Get-ChildItem 'C:\test' -Filter $ext_filt -depth 1 -Recurse | Where {$_.Name.substring($_.Name.length -3, 3)  -Match 'asp'} | % {$_.FullName}

#############################################################
# Find files accessed during last 60 days
# 
$limit = (Get-Date).AddDays(-60)
$path = "Y:\"
# LastAccessTime # LastWriteTime
Get-ChildItem -Path $path -Recurse -Force | Where-Object { !$_.PSIsContainer -and $_.LastAccessTime -gt $limit }

#############################################################
# Delete files and empty folders older than 150 days
# 
$limit = (Get-Date).AddDays(-150)
$path = "C:\Some\Path"
# Delete files older than the $limit.
Get-ChildItem -Path $path -Recurse -Force | Where-Object { !$_.PSIsContainer -and $_.CreationTime -lt $limit } | Remove-Item -Force -WhatIf
# Delete any empty directories left behind after deleting the old files.
Get-ChildItem -Path $path -Recurse -Force | Where-Object { $_.PSIsContainer -and (Get-ChildItem -Path $_.FullName -Recurse -Force | Where-Object { !$_.PSIsContainer }) -eq $null } | Remove-Item -Force -Recurse -WhatIf

############################################################################
# Find all empty sub-folders under C:\Work and pipe them to Remove-Item. This is one way to remove empty folders. 
# The example is piping objects to ForEach-Object so that Remove-Item can use the -LiteralPath parameter, because there may be a non-standard pathes like C:\work\[data]
# Test-EmptyFolder
Get-ChildItem c:\work -Directory | Test-EmptyFolder -passthru | Where-Object {$_.IsEmpty} | Foreach-Object { Remove-Item -LiteralPath $_.path -Recurse -force -whatif}


#########################################################
# Get-DirectoryInfo
# https://github.com/jdhitsolutions/PSScriptTools/
PS C:\Users\alexe> Get-DirectoryInfo ../

   Path: C:\Users

admin [0]            alexe [9]            DefaultAppPool [0]   kirae [0]           molant [0]

#########################################################
# Get-DirectoryInfo
# Get-FormatView
# PowerShell's formatting system includes a number of custom views that display objects in different ways. 
# Unfortunately, this information is not readily available to a typical PowerShell user. This command displays the available views for a given object type.

PS C:\Users\alexe> Get-FormatView *process

   Type: Microsoft.Management.Infrastructure.CimInstance#root/cimv2/Win32_Process

Format    Name
------    ----
Table     Microsoft.Management.Infrastructure.CimInstance#root/cimv2/Win32_Proc…
Table     Microsoft.Management.Infrastructure.CimInstance#root/cimv2/Win32_Proc…
Table     Microsoft.Management.Infrastructure.CimInstance#root/cimv2/Win32_Proc…

   Type: System.Diagnostics.Process

Format    Name
------    ----
Table     process
Table     Priority
Table     StartTime
Wide      process
Table     process
Wide      process
Table     process
Wide      process
Table     WS


#############################################################
# Find Command | Search Command
# 
Find-Command -Name Get-NetView | ft -auto *
(Find-Command -Name Get-NetView).Version

#############################################################
# Find Command in PSModulePath
$env:PSModulePath -split ';' | Get-ChildItem -ea 0 | where {$_.FullName -like '*PSDesiredStateConfiguration*'} | select -first 2 FullName, Attributes, CreationTime, LastAccessTime, LastWriteTime, Mode, LinkTarget
Get-ChildItem ($env:PSModulePath -split ';') 'PSDesiredStateConfiguration' -Recurse


##############################################################
# Add dir to PATH to execute PS1 scripts
$env:Path+=';c:\home\src\scripts'
Get-Command WinAdminCenter.ps1
# CommandType     Name                                               Version    Source
# -----------     ----                                               -------    ------
# ExternalScript  WinAdminCenter.ps1                                            c:\home\src\scripts\WinAdminCenter.ps1


#######################################################################
# Find Command in PATH like where.exe command. 
# You can search with a simple or regex pattern.
PS C:\Users\alexe> Get-FileItem ps-info.ps1
C:\home\src\Scripts\ps-info.ps1
$pat='*info*'; cmd='Get-FileItem'; "`nSearch for matching executables`nCmd : {0}`nPattern : {1}`nPATH : {2}`n" -f $cmd,$pat,$env:PATH; $Found=Get-FileItem $pat; $Found; echo "`nFound $($Found.Length) Items`n"


#############################################################
# Find Module Search Module 
# Find Commands and Modules by Verbs
# https://docs.microsoft.com/en-us/powershell/scripting/samples/using-format-commands-to-change-output-view?view=powershell-7.2
Get-Command -Verb Format -Module Microsoft.PowerShell.Utility
Get-Command -Verb Format | Format-Table -Wrap -AutoSize CommandType, Name, Source, @{n='Definition';e={$_.Definition -replace("`n","") }}

#############################################################
# Find module

Find-Module Azure*
Get-InstalledModule PSDesiredStateConfiguration
Get-InstalledModule PSDesiredStateConfiguration | select *


#############################################################
# Install/Unistall module
# 
Install-Module -Name PSDesiredStateConfiguration -AllowPrerelease
Uninstall-Module -Name PSDesiredStateConfiguration

#############################################################
# Copy a function to a remote computer using a PSSession.
#
$f = $(get-item function:\Get-Foo).scriptblock
Invoke-Command { New-Item -Name Get-Foo -Path Function: -Value $($using:f)} -session $s

#############################################################
# PowerShell Version
# 
$PSVersionTable.PSVersion
Get-PowerShellEngine -Detail
Get-PSLocation

################################################################
# Provider Drives
#
PS C:\home\src\Scripts>  Get-PSDrive

Name           Used (GB)     Free (GB) Provider      Root                                                                                                                                                                                 CurrentLocation
----           ---------     --------- --------      ----                                                                                                                                                                                 --------------- 
Alias                                  Alias
C                 946.72       8366.76 FileSystem    C:\                                                                                                                                                                                 home\src\Scripts 
Cert                                   Certificate   \
D                 198.23       2567.74 FileSystem    D:\
E                 286.54       9027.45 FileSystem    E:\
Env                                    Environment
Function                               Function
HKCU                                   Registry      HKEY_CURRENT_USER
HKLM                                   Registry      HKEY_LOCAL_MACHINE
Temp              946.72       8366.76 FileSystem    C:\Users\alexe\AppData\Local\Temp\
Variable                               Variable
W                1664.76        165.06 FileSystem    \\WDMyCloudEX4\v1-media
WSMan                                  WSMan
X                1736.47         93.35 FileSystem    \\WDMyCloudEX4\v2-media
Y                1056.32        773.50 FileSystem    \\WDMyCloudEX4\v3-data
Z                1769.24         60.58 FileSystem    \\WDMyCloudEX4\v4-data


##########################
##########################
##########################
######             #######
######  Registry   #######
######             #######
##########################
##########################
##########################

################################################################################
# Search-Registry
C:\home\src\Scripts\Search-Registry.ps1 -path 'HKLM:\SYSTEM\CurrentControlSet\Services' -Recurse -Search 'DHCPV6|DhcpNodeType' | ft -a
 
################################################################################
# Get-ItemProperty
Get-ItemProperty "HKLM:\SYSTEM\CurrentControlSet\Services\klvssbridge64_21.3"

################################################
# Test-Path
Test-Path "HKLM:\SYSTEM\CurrentControlSet\Services\klvssbridge64_21.3"


################################################
# Get-ItemProperty
Get-ItemProperty "HKLM:\SYSTEM\CurrentControlSet\Services\klvssbridge64_21.3" Start
 
 
################################################
# Set-ItemProperty
Set-ItemProperty "HKLM:\SYSTEM\CurrentControlSet\Services\klvssbridge64_21.3" Start 4 -Force

# Set-ItemProperty: Attempted to perform an unauthorized operation because of Tamper Protection
# https://bidouillesecurity.com/disable-windows-defender-in-powershell/
# There is not option to disable "Tamper Protection" in powershel (that’s the point ….).
# We can’t edit the configuration directly in the registry, even as SYSTEM.



################################################################################
# reg query
# read all subkeys
reg query "HKLM\SYSTEM\CurrentControlSet\Control\DeviceGuard\Scenarios\HypervisorEnforcedCodeIntegrity" /s
reg query "HKLM\SYSTEM\CurrentControlSet\Services\klvssbridge64_21.3" /s
# read specific value
reg query "HKLM\SYSTEM\CurrentControlSet\Services\klvssbridge64_21.3" /v Start



############################################
# permissions
# Managing Windows Registry with Scripting
# Method 1 – SetACL.exe

#  Current user  permissions
$myacl=Get-Acl HKCU:

# read permissions | https://devblogs.microsoft.com/powershell-community/understanding-get-acl-and-ad-drive-output/
(Get-Acl HKLM:\SYSTEM\CurrentControlSet\Services\klvssbridge64_21.3).Access | Out-GridView

# referenced site: http://superuser.com/questions/712392/change-registry-permissions-via-command-line-batch-file
SetACL.exe -on "HKEY_CLASSES_ROOT\CLSID\{20D04FE0-3AEA-1069-A2D8-08002B30309D}" -ot reg -actn setowner -ownr n:Administrators
SetACL.exe -on "HKEY_CLASSES_ROOT\CLSID\{20D04FE0-3AEA-1069-A2D8-08002B30309D}" -ot reg -actn ace -ace "n:Administrators;p:full"
reg import computername.reg

# Method 2 – PowerShell
# referenced site: http://powertoe.wordpress.com/2010/08/28/controlling-registry-acl-permissions-with-powershell/
$acl = Get-Acl HKLM:\SOFTWARE\ChangeThisKey
$rule = New-Object System.Security.AccessControl.RegistryAccessRule ("T-Alien\Tome","FullControl","Allow")
$acl.SetAccessRule($rule)
$acl | Set-Acl -Path HKLM:\SOFTWARE\ChangeThisKey

# Method 3 – Regini.exe
# Referenced site: http://support.microsoft.com/kb/264584 | https://learn.microsoft.com/en-us/troubleshoot/windows-client/application-management/change-registry-values-permissions
regini.exe -m \\remoteworkstation auoptions.txt HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\WindowsUpdate\Auto Update "ConfigVer"= REG_DWORD 1 "AUOptions"= REG_DWORD 4 "ScheduledInstallDay"= REG_DWORD 0 "ScheduledInstallTime"= REG_DWORD 1

## Method 4 – Subinacl.exe
# referenced site: http://arstechnica.com/civis/viewtopic.php?t=311764
subinacl /subkeyreg "HKEY_LOCAL_MACHINE\Software\Microsoft\Windows NT\CurrentVersion\ProfileList" /grant=Domain\GroupName=F
# The valid permissions for a registry key using subinacl are
# F : Full Control
# R : Read
# A : ReAd Control
# Q : Query Value
# S : Set Value
# C : Create SubKey
# E : Enumerate Subkeys
# Y : NotifY
# L : Create Link
# D : Delete
# W : Write DAC
# O : Write Owner
 
 
############################################
## export 
reg export HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\run C:\home\data\Registry\CurrentVersionRun.reg
ls C:\home\data\Registry\CurrentVersionRun.reg
Mode                 LastWriteTime         Length Name
----                 -------------         ------ ----
-a---           5/26/2022 10:52 PM            450 CurrentVersionRun.reg

reg export HKLM\System\CurrentControlSet\Services C:\home\data\Registry\Services.reg
ls C:\home\data\Registry\Services.reg
Mode                 LastWriteTime         Length Name
----                 -------------         ------ ----
-a---           5/26/2022 10:54 PM        8669082 Services.reg

reg export HKLM\SYSTEM\CurrentControlSet\Control\NetworkProvider  C:\home\data\Registry\NetworkProvider.reg
ls C:\home\data\Registry\NetworkProvider.reg
    Directory: C:\home\data\Registry
Mode                 LastWriteTime         Length Name
----                 -------------         ------ ----
-a---           5/27/2022  8:44 AM           1176 NetworkProvider.reg

################################################################################
# add
reg query "HKLM\SYSTEM\CurrentControlSet\Control\DeviceGuard\Scenarios\HypervisorEnforcedCodeIntegrity" /s
reg add "HKLM\SYSTEM\CurrentControlSet\Control\DeviceGuard\Scenarios\HypervisorEnforcedCodeIntegrity" /v "Enabled" /t REG_DWORD /d 0 /f
reg add "HKLM\SYSTEM\CurrentControlSet\Services\klvssbridge64_21.3" /v "Start" /t REG_DWORD /d 3 /f
 # /v   - The value name, under the selected Key, to add.
 # /f   - force override
 # /d   - data to assign
 # /t   - RegKey data types


#################################################################
# Registry Value Entries
#
$RegistryPath = 'HKCU:\Software\CommunityBlog\Scripts'
$Name         = 'Version'
$Value        = '42'

PS C:\home\src\Scripts> New-ItemProperty -Path $RegistryPath -Name $Name -Value $Value -PropertyType DWORD -Force 
New-ItemProperty: Cannot find path 'HKCU:\Software\CommunityBlog\Scripts' because it does not exist.


#################################################################
# Registry Value Entries
#
$RegistryPath = 'HKCU:\Software\CommunityBlog\Scripts'
$Name         = 'Version'
$Value        = '42'
# Create the key if it does not exist
If (-NOT (Test-Path $RegistryPath)) { New-Item -Path $RegistryPath -Force | Out-Null }  
# Now set the value
New-ItemProperty -Path $RegistryPath -Name $Name -Value $Value -PropertyType DWORD -Force

# add some value
$null = New-ItemProperty -path HKCU:\Software\tq84 -name someValue -value 99

#################################################################
# Citrix EPA NGlauncher nsepa fix https://support.citrix.com/article/CTX339975/epa-fails-after-chromeedge-version-98-update
# 
$RegistryPath = 'HKLM:\Software\Policies\Microsoft\MicrosoftEdge\WebView2\InsecurePrivateNetworkRequestsAllowedForUrls'
If (-NOT (Test-Path $RegistryPath)) { New-Item -Path $RegistryPath -Force | Out-Null }  
New-ItemProperty -path $RegistryPath  -name '1' -value '[*.]localhost[*.]'

##########################
##########################
##########################
######             #######
######  Variables  #######
######             #######
##########################
##########################
##########################

###############################################################
# Find Variable Search Variable 
Get-ChildItem -Path Variable: |? Name -like Test*


############################################################
# Variable Properties
PS C:\Users\alexe> ([PsObject]@{}).PsObject.Properties | ft -a 
MemberType Value IsSettable IsGettable TypeNameOfValue                Name           IsInstance
---------- ----- ---------- ---------- ---------------                ----           ----------
  Property False      False       True System.Boolean                 IsReadOnly           True
  Property False      False       True System.Boolean                 IsFixedSize          True
  Property False      False       True System.Boolean                 IsSynchronized       True
  Property    {}      False       True System.Collections.ICollection Keys                 True
  Property    {}      False       True System.Collections.ICollection Values               True
  Property    {}      False       True System.Object                  SyncRoot             True
  Property     0      False       True System.Int32                   Count                True


############################################################
# test if an object has a specific property?
[bool]($myObject.PSobject.Properties.name -match "myPropertyNameToTest")
# OR 
if(Get-Member -inputobject $var -name "Property" -Membertype Properties){ echo "Property exists" }
# OR
"MyProperty" -in $MyObject.PSobject.Properties.Name
#
### String
'Length'    -in ([string]'').PsObject.Properties.Name                             # True
'Count'     -in ([string]'').PsObject.Properties.Name                             # False
'Capacity'  -in ([string]'').PsObject.Properties.Name                             # False
'Keys'      -in ([string]'').PsObject.Properties.Name                             # False
'Values'    -in ([string]'').PsObject.Properties.Name                             # False
### Array
'Count'     -in (@()).PsObject.Properties.Name                                    # True
'Length'    -in (@()).PsObject.Properties.Name                                    # True
'Capacity'  -in (@()).PsObject.Properties.Name                                    # False
'Keys'      -in (@()).PsObject.Properties.Name                                    # False
'Values'    -in (@()).PsObject.Properties.Name                                    # False
### ArrayList  ([System.Collections.ArrayList]@())
'Count'     -in ([System.Collections.ArrayList]@()).PsObject.Properties.Name      # True
'Capacity'  -in ([System.Collections.ArrayList]@()).PsObject.Properties.Name      # True
'Length'    -in ([System.Collections.ArrayList]@()).PsObject.Properties.Name      # False
'Keys'      -in ([System.Collections.ArrayList]@()).PsObject.Properties.Name      # False
'Values'    -in ([System.Collections.ArrayList]@()).PsObject.Properties.Name      # False
### Hashtable
'Count'     -in (@{}).PsObject.Properties.Name                                    # True
'Keys'      -in (@{}).PsObject.Properties.Name                                    # True
'Values'    -in (@{}).PsObject.Properties.Name                                    # True
'Length'    -in (@{}).PsObject.Properties.Name                                    # False
'Capacity'  -in (@{}).PsObject.Properties.Name                                    # False
'Value'     -in (@{}).PsObject.PsBase.PsBase.Properties.Name                      # True
'Name'      -in (@{}).PsObject.PsBase.PsBase.Properties.Name                      # True

############################################################
# $obj0=@{}; $obj0=[pscustomobject]@{}
# $obj0.PsObject.PsBase.get_Properties() | ft -a -view:a

$propcols=@( @{ E='MemberType'; W=15 }, @{ E='Value'; W=50;A='Left' }, @{ E='IsSettable'; W=14; A='Left'}, @{ E='IsGettable'; W=14; A='Left'}, @{ E='TypeNameOfValue'; W=100; A='Left' }, @{ E='Name'; W=20; A='Left' }, @{ E='IsInstance'; W=20; A='Left' } )


    $res=( $_.Members.Name | sort); '[{0}] {1}' -f $res.Count,($res -join ', ') 
    if ($o.PsObject.get_Properties) { $o.PsObject.get_Properties() }


$obj0.PsObject.get_Properties() | ft @{ E='MemberType'; W=15 }, @{ E='Value'; W=50;A='Left' }, @{ E='IsSettable'; W=14; A='Left'}, @{ E='IsGettable'; W=14; A='Left'}, @{ E='TypeNameOfValue'; W=100; A='Left' }, @{ E='Name'; W=20; A='Left' }, @{ E='IsInstance'; W=20; A='Left' }



$res=($obj0.PsObject.PsBase.Members.Name | sort) -Join(', ')
Add, Clear, Clone, Contains, ContainsKey, ContainsValue, CopyTo, Count, Equals, get_Count, get_IsFixedSize, get_IsReadOnly, get_IsSynchronized, get_Item, get_Keys, get_SyncRoot, get_Values, GetEnumerator, GetHashCode, GetObjectData, GetType, IsFixedSize, IsReadOnly, IsSynchronized, Item, Keys, OnDeserialization, Remove, set_Item, SyncRoot, ToString, Values
BaseObject, CompareTo, Copy, Equals, get_BaseObject, get_ImmediateBaseObject, get_Members, get_Methods, get_Properties, get_TypeNames, GetHashCode, GetMetaObject, GetObjectData, GetType, ImmediateBaseObject, Members, Methods, Properties, ToString, TypeNames


### PsCustomObject
'Value'     -in ([PsCustomObject]@{}).PsObject.PsBase.PsBase.Properties.Name      # True
'Name'      -in ([PsCustomObject]@{}).PsObject.PsBase.PsBase.Properties.Name      # True
'Name'      -in ([PsCustomObject]@{}).PsObject.Properties.Name                    # False
([PsCustomObject]@{}).PsObject.PsBase.Members.Name


##############################################################
# test whether or not a specific variable exists in global scope?
if (Get-Variable 'foo' -Scope 'Global' -ErrorAction 'Ignore') { $true } else { $false }
# OR
try { Get-Variable foo -Scope Global -ErrorAction 'Stop' } catch [System.Management.Automation.ItemNotFoundException] { Write-Warning $_ }
# OR
Test-Path variable:global:foo

##############################
##############################
######                 #######
######  ScriptBlocks   #######
######                 #######
##############################
##############################
#############################################################################
# Create Script Block
# Create Script Block for Where-Object condition
  param([int[]]$Levels)
  if($PSBoundParameters.ContainsKey("Levels")) { $FilterArray+='$_.Level -in $Levels' }
  $FilterString=$FilterArray -join ' -and '
  $FilterBlock=[scriptblock]::Create($FilterString)
  Get-WinEvent * -maxevent $NoOfEvents -ea 0 | Where-Object $FilterBlock | Group-Object LogName,ProviderName,Level | Sort-Object -Descending Count	

#############################################################
# Get the scriptblock content of a loaded function. Substitute the name of a function.
#
(get-item Function:\prompt).scriptblock

 
 
###########################################
# scriptblock variable expanding
$var='RemoteAddress_MAP'
$SB=[scriptblock]::Create("`$(`$global:$var.Keys)[0].GetType()")
& $SB # or $SB.Invoke()
### ---
$var=$global:RemoteAddress_MAP; $($var.Keys)[0].GetType()

##############################
##############################
######                 #######
######     Arrays      #######
######                 #######
##############################
##############################

#############################################################
# Print Array
"args[$(($args).Length)]: $($args -join '; ')" 

##################################
# Pre-sized arrays
# You can't change the size of an array once it's created. We can create an array of a pre-determined size by calling it with the new($size) constructor.
$myarray = [Object[]]::new(4)
$myarray.count
# 4
$myarray[1]="Test"
$myarray[2]=@{test=1}

# ArrayList
$myarraylist = [System.Collections.ArrayList]::new()
[void]$myarraylist.Add('Value')
$myarraylist[-1]
# Value

# Generic List
$mylist = [System.Collections.Generic.List[string]]::new()

# a list for numbers.
$mylist = [System.Collections.Generic.List[int]]::new()
$mylist = [System.Collections.Generic.List[int]]@(1,2,3)

# Shorten the syntax with the using namespace statement in PowerShell 5 and newer.
using namespace System.Collections.Generic
$myList = [List[int]]@(1,2,3)
$myList[-1]
# 3
# Add() method. Unlike the ArrayList, there is no return value on the Add method so we don't have to void it.
$myList.Add(10)
$myList[-1]
# 10 
using namespace System.Collections.Generic
# List[PSObject]
# You can have a list of any type, but when you don't know the type of objects, you can use [List[PSObject]] to contain them.
$list = [List[PSObject]]::new()

# Remove()
# The ArrayList and the generic List[] both support removing items from the collection.

using namespace System.Collections.Generic
$myList = [System.Collections.Generic.List[string]]@('Zero','One','Two','Three')
[void]$myList.Remove("Two")
Zero
One
Three

##############################
##############################
######                 #######
######   HashTables    #######
######                 #######
##############################
##############################

#############################################################
# Print HashTable or Dictionary

Write-Host " Unbound" "             args[$($args.Count)]:" $( if ( $args.count ) { '"'+$($args -join ('`", `"'))+'"' } else { '-'} )
Write-Host "   Bound" "PSBoundParameters[$($PSBoundParameters.Count)]:" $($PSBoundParameters.Keys|% { "-${_}:$($PSBoundParameters.$_| ConvertTo-Json)" })

# More options, but they do not look good
Write-Host  "2" ('$PsBoundParameters: {0}' -f $( $PsBoundParameters | ConvertTo-Json -compress) )
Write-Host  "3" ('{0}' -f  ( [pscustomobject]$PsBoundParameters  | Out-String) )
[string[]] $l_array = ($PSBoundParameters | Out-String -Stream) -ne '' | select-object -Skip 2; write-output "PSBoundParameters[$(($l_array).Length)]: $($l_array -join '; ')"



$Weekdays = @{Monday = 'Montag';Tuesday = 'Dienstag'}    
echo $($Weekdays.Keys)[0]
echo $($Weekdays.Values)[1] 

# @($Global:RemoteAddrMAP.Keys)[0] | % { $k=$_; '"RemoteAddr":"{0}"' -f $k; ConvertTo-JSON $Global:RemoteAddrMAP.$k  -Compress -Depth 5 }
# ConvertTo-JSON $Global:RemoteAddrMAP -Compress -Depth 5


#############################################################
# Print HashTable element
# https://stackoverflow.com/questions/57594415/powershell-hashtable-show-first-key



get-connection-map -get; $Global:ConnInfo | ConvertHashtableTo-Object | ft -auto 


    $Weekdays = @{1 = 'Monday'; 2='Tuesday'; 3='Wednesday'; 4='Thursday'; 5='Friday'}
    $Weekend  = @{6 = 'Saturday'; 7='Sunday'}
    $Week=[ordered]@{ 
        Weekdays=$Weekdays
        Weekend=$Weekend 
        WorkDay=@(
            @{abbr='Mon';dayno=1;name="Monday";},
            @{abbr='Tue';dayno=2;name="Tuesday";},
            @{abbr='Wen';dayno=3;name="Wednesday";},
            @{abbr='Thu';dayno=4;name="Thursday";},
            @{abbr='Fri';dayno=5;name="Friday";},
            @{abbr='Sat';dayno=6;name="Saturday";},
            @{abbr='Sun';dayno=7;name="Sunday";}
        )
    }

# To get the same output as in the console, use a subexpression in which you pipe to Out-String. Apply the Trim() method if you want to remove any leading and trailing empty lines.
# https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_quoting_rules?view=powershell-7.2
"hashtable:`n$((@{ key = 'value' } | Out-String).Trim())"
"hashtable:`n$(( $Week | Out-String).Trim())"

####
# see https://github.com/PowerShell/PowerShell/issues/13817#issuecomment-712882745


# Problem from Ron7 : it is not possible to construct and populate a dictionary in ones. AFAIK, I always need to construct it first and then populate it:
$Hashtable = @{}
1..3 | %{ $Hashtable[$_] = $_ * $_ }

# Response from jhoneill
# You can concatenate hash tables.
$h=@{} ; 1..3 | %{ $h+= @{$_ = $_* $_}}; $h

#  array-subexpression operator
$Array = 1..3 | %{ $_ * $_ } ; $Array


# Response from  SeeminglyScience 
# In PSv7 you can do this:
1..3 | % { ($h ??= @{})[$_] = $_ * $_ } ; $h

# and prior you can do
1..3 | % -b { $h = @{} } -pr { $h[$_] = $_ * $_ }


$SERVICES_LINES=$(
$tArr=@(); 
( (sc.exe query state=inactive | 
     Out-String -stream ).Trim() |? {$_} | 
     Select -First 100000).Trim() -replace('([\w:]+)\W*:\W*','$1=') -replace('(\w+)=([0-9]\w*)  (.+)','$1=$2; $1_EXTRA="$3"') -replace('^(\w+)=([^0-9].*)','$1="$2"' ) | 
select -first 100000 | % {
    if ($_ -like 'SERVICE_NAME=*') { 
        if ($tArr) {  "[ordered]@{ $($tArr -join('; ')) }" }
        $tArr=@($_)
    } else { 
        $tArr+=@($_)
    }
})

'{0} lines' -f $SERVICES_LINES.Count

$scriptblock=[scriptblock]::Create( '[scriptblock]::Create($SERVICES_LINES[$Idx])'); 
$ResultObjects=(0..($SERVICES_LINES.Count-1)     | % { $Idx=$_; [pscustomobject] @{Idx=$Idx; Data=[pscustomobject](&(&$scriptBlock))} } ) 

$ResultObjects2=(0..($SERVICES_LINES.Count-1)    | % { $Idx=$_; [pscustomobject]([ordered]@{Idx=$Idx}+(&(&$scriptBlock ))) } ) 
$ResultObjects3=(0..($SERVICES_LINES.Count-1)    | % { $Idx=$_; [pscustomobject] @{Idx=$Idx ; Data=(&(&$scriptBlock))} } ) 
$ResultHashTables=(0..($SERVICES_LINES.Count-1)  | % { $Idx=$_; ([ordered]@{Idx=$Idx}+(&(&$scriptBlock ))) } ) 

$ResultHashTables      | select-object -first 5 |% {[pscustomobject]$_}| format-table -auto
$ResultObjects.Data    | select-object -first 5 | format-table -auto
$ResultObjects2        | select-object -first 5 | format-table -auto

$ResultHashTables.Service_Name    | Select-Object -First 4 ; $ResultHashTables[0..3].Service_Name
$ResultObjects.Data.Service_Name  | Select-Object -First 4 ; $ResultObjects[0..3].Data.Service_Name 
$ResultObjects2.Service_Name      | Select-Object -First 4 ; $ResultObjects2[0..3].Service_Name


0..0 | % { $ht=& ( & $scriptBlock); [ordered]@{Idx=$_}+$ht; }
0..0 | % { $Idx=$_; [pscustomobject]([ordered]@{Idx=$Idx}+(&(&$scriptBlock ))) } | format-table -auto




$scriptblock=[scriptblock]::Create( '$SERVICES_LINES[$Idx]')
0..2 | % { $Idx=$_; "`n** Idx:$Idx"; $ht=& $scriptBlock; $ht; }

$Idx=2; $ExecutionContext.InvokeCommand.ExpandString($SERVICES_LINES[$Idx]);

$scriptblock=[scriptblock]::Create( '$ExecutionContext.InvokeCommand.ExpandString($SERVICES_LINES[$Idx])')
0..2 | % { $Idx=$_; "`n** Idx:$Idx"; $ht=& $scriptBlock; $ht; }

$scriptblock=[scriptblock]::Create($ExecutionContext.InvokeCommand.ExpandString($SERVICES_LINES[$Idx]))
0..2 | % { $Idx=$_; "`n** Idx:$Idx"; $ht=& $scriptBlock.GetNewClosure(); $ht; }



##################################
# ConvertHashtableTo-Object
function ConvertHashtableTo-Object {
	# https://gordon.byers.me/powershell/convert-a-powershell-hashtable-to-object
	# Better alternatives: 
	# $Global:ConnInfo[0..1] |% {[pscustomobject] $_} | ft  -auto 
	# $Global:ConnInfo[0..1] | ConvertTo-JSON -depth 3 -compress
	
    [CmdletBinding()]
    Param([Parameter(Mandatory=$True,ValueFromPipeline=$True,ValueFromPipelinebyPropertyName=$True)]
        [hashtable]$ht
    )
    PROCESS {
        $results = @()
        $ht | %{
            $result = New-Object psobject;
            foreach ($key in $_.keys) {
				[object] $val=$_[$key]
				if ( $val -is [hashtable]) {
					$val=ConvertHashtableTo-Object $val
				} elseif ($val -is [array] ) {
					$val=$val -join (',')
				} 
                $result | Add-Member -MemberType NoteProperty -Name $key -Value $val
             }
             $results += $result;
         }
        return $results
    }
}

##################################
##################################
######                     #######
######    Objects          #######
######                     #######
##################################
##################################

##################################################
# Iterate over PSObject properties
# https://stackoverflow.com/questions/37688708/iterate-over-psobject-properties-in-powershell/47930107#47930107

foreach($object_properties in $obj.PsObject.Properties) {
    # Access the name of the property
    $object_properties.Name

    # Access the value of the property
    $object_properties.Value
}

##################################################
# Iterate over PSObject list of propertiy and noteproperty
# "Properties" covers Property, NoteProperty, CodeProperty, AliasProperty, ScriptProperty
# https://stackoverflow.com/questions/37688708/iterate-over-psobject-properties-in-powershell/47930107#47930107
# see Get-Properties.ps1
Function Get-Properties() { 
	process { 
		if ($_) { $objs=$_ } else { $objs=$args }; 
		foreach ( $obj in $objs ) { 
			Write-Debug $("Processing: [{0}] {1}" -f $($Obj.GetType()).FullName, ( $Obj|Out-String) )
			$obj.PsObject.Properties
			# $obj | Get-Member -Type properties |% { $_.Name + ' = ' + $obj.$($_.Name)+ ' ('+ $_.Value +')'; $_ | gm; break }
		}
	} 
}

#  Write-Debug handles $DebugPreference as: 0 - quietly proceeds; 1 - abort at the line; 2 - print message only; 3 - stops at the line
#  $DebugPreference=2
Get-Properties (ls c:\home\txt\ps1\One-Liners.txt)
gi C:\home\txt\ps1\One-Liners.txt | Get-Properties
gi C:\home\txt\ps1 | Get-Properties

gi C:\home\txt\ps1                | Get-Properties | ft MemberType,Name,TypeNameOfValue,IsSettable,IsGettable,IsInstance,Value
gi C:\home\txt\ps1\One-Liners.txt | Get-Properties | ft MemberType,Name,TypeNameOfValue,IsSettable,IsGettable,IsInstance,Value
 
Function Get-Prop() { 
	process { 
	if ($_) { $obj=$_ } else { $obj=$args }; 
	# "`nProcessing: {0}" -f ( $Obj|Out-String ); 
	$obj | Get-Member -Type properties | foreach name | % { $_ + ' = ' + $obj.$_ } 
	} 
}


$obj=$Global:files[1]; 
PS C:\home> $obj | Get-Member

   TypeName: System.IO.DirectoryInfo

Name                      MemberType     Definition
----                      ----------     ----------
Target                    AliasProperty  Target = LinkTarget
LinkType                  CodeProperty   System.String LinkType{get=GetLinkType;}
Mode                      CodeProperty   System.String Mode{get=Mode;}
ModeWithoutHardLink       CodeProperty   System.String ModeWithoutHardLink{get=ModeWithoutHardLink;}
ResolvedTarget            CodeProperty   System.String ResolvedTarget{get=ResolvedTarget;}
Create                    Method         void Create()
CreateAsSymbolicLink      Method         void CreateAsSymbolicLink(string pathToTarget)
CreateSubdirectory        Method         System.IO.DirectoryInfo CreateSubdirectory(string path)
Delete                    Method         void Delete(), void Delete(bool recursive)
EnumerateDirectories      Method         System.Collections.Generic.IEnumerable[System.IO.DirectoryInfo] EnumerateDirectories(), System.Collections.Generic.IEnumerable[System.IO.DirectoryInfo] EnumerateDirectories(string searchPattern), …
EnumerateFiles            Method         System.Collections.Generic.IEnumerable[System.IO.FileInfo] EnumerateFiles(), System.Collections.Generic.IEnumerable[System.IO.FileInfo] EnumerateFiles(string searchPattern), System.Collections.Gen…
EnumerateFileSystemInfos  Method         System.Collections.Generic.IEnumerable[System.IO.FileSystemInfo] EnumerateFileSystemInfos(), System.Collections.Generic.IEnumerable[System.IO.FileSystemInfo] EnumerateFileSystemInfos(string search…
Equals                    Method         bool Equals(System.Object obj)
GetDirectories            Method         System.IO.DirectoryInfo[] GetDirectories(), System.IO.DirectoryInfo[] GetDirectories(string searchPattern), System.IO.DirectoryInfo[] GetDirectories(string searchPattern, System.IO.SearchOption se…
GetFiles                  Method         System.IO.FileInfo[] GetFiles(), System.IO.FileInfo[] GetFiles(string searchPattern), System.IO.FileInfo[] GetFiles(string searchPattern, System.IO.SearchOption searchOption), System.IO.FileInfo[]…
GetFileSystemInfos        Method         System.IO.FileSystemInfo[] GetFileSystemInfos(), System.IO.FileSystemInfo[] GetFileSystemInfos(string searchPattern), System.IO.FileSystemInfo[] GetFileSystemInfos(string searchPattern, System.IO.…
GetHashCode               Method         int GetHashCode()
GetLifetimeService        Method         System.Object GetLifetimeService()
GetObjectData             Method         void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context), void ISerializable.GetObjectData(System.Runtime.Serialization.Serial…
GetType                   Method         type GetType()
InitializeLifetimeService Method         System.Object InitializeLifetimeService()
MoveTo                    Method         void MoveTo(string destDirName)
Refresh                   Method         void Refresh()
ResolveLinkTarget         Method         System.IO.FileSystemInfo ResolveLinkTarget(bool returnFinalTarget)
ToString                  Method         string ToString()
PSChildName               NoteProperty   string PSChildName=tools
PSDrive                   NoteProperty   PSDriveInfo PSDrive=C
PSIsContainer             NoteProperty   bool PSIsContainer=True
PSParentPath              NoteProperty   string PSParentPath=Microsoft.PowerShell.Core\FileSystem::C:\home\src\Scripts
PSPath                    NoteProperty   string PSPath=Microsoft.PowerShell.Core\FileSystem::C:\home\src\Scripts\tools
PSProvider                NoteProperty   ProviderInfo PSProvider=Microsoft.PowerShell.Core\FileSystem
Attributes                Property       System.IO.FileAttributes Attributes {get;set;}
CreationTime              Property       datetime CreationTime {get;set;}
CreationTimeUtc           Property       datetime CreationTimeUtc {get;set;}
Exists                    Property       bool Exists {get;}
Extension                 Property       string Extension {get;}
FullName                  Property       string FullName {get;}
LastAccessTime            Property       datetime LastAccessTime {get;set;}
LastAccessTimeUtc         Property       datetime LastAccessTimeUtc {get;set;}
LastWriteTime             Property       datetime LastWriteTime {get;set;}
LastWriteTimeUtc          Property       datetime LastWriteTimeUtc {get;set;}
LinkTarget                Property       string LinkTarget {get;}
Name                      Property       string Name {get;}
Parent                    Property       System.IO.DirectoryInfo Parent {get;}
Root                      Property       System.IO.DirectoryInfo Root {get;}
UnixFileMode              Property       System.IO.UnixFileMode UnixFileMode {get;set;}
BaseName                  ScriptProperty System.Object BaseName {get=$this.Name;}

		$obj | Get-Member -membertype property,noteproperty | foreach name |  foreach { $_ + ' = ' + $obj.$_ }
PSChildName = tools
PSDrive = C
PSIsContainer = True
PSParentPath = Microsoft.PowerShell.Core\FileSystem::C:\home\src\Scripts
PSPath = Microsoft.PowerShell.Core\FileSystem::C:\home\src\Scripts\tools
PSProvider = Microsoft.PowerShell.Core\FileSystem
Attributes = Directory
CreationTime = 01/19/2023 21:48:45
CreationTimeUtc = 01/20/2023 02:48:45
Exists = True
Extension =
FullName = C:\home\src\Scripts\tools
LastAccessTime = 01/20/2023 12:06:17
LastAccessTimeUtc = 01/20/2023 17:06:17
LastWriteTime = 01/20/2023 00:34:16
LastWriteTimeUtc = 01/20/2023 05:34:16
LinkTarget =
Name = tools
Parent = C:\home\src\Scripts
Root = C:\
UnixFileMode = -1


		$obj | Get-Member -Type properties | foreach name |  foreach { $_ + ' = ' + $obj.$_ }

Target =
LinkType =
Mode = d----
ModeWithoutHardLink = d----
ResolvedTarget = C:\home\src\Scripts\tools
PSChildName = tools
PSDrive = C
PSIsContainer = True
PSParentPath = Microsoft.PowerShell.Core\FileSystem::C:\home\src\Scripts
PSPath = Microsoft.PowerShell.Core\FileSystem::C:\home\src\Scripts\tools
PSProvider = Microsoft.PowerShell.Core\FileSystem
Attributes = Directory
CreationTime = 01/19/2023 21:48:45
CreationTimeUtc = 01/20/2023 02:48:45
Exists = True
Extension =
FullName = C:\home\src\Scripts\tools
LastAccessTime = 01/20/2023 12:06:17
LastAccessTimeUtc = 01/20/2023 17:06:17
LastWriteTime = 01/20/2023 00:34:16
LastWriteTimeUtc = 01/20/2023 05:34:16
LinkTarget =
Name = tools
Parent = C:\home\src\Scripts
Root = C:\
UnixFileMode = -1
BaseName = tools



########################
# Show hidden object's members: -force
PS C:\Users\alexe> $myobj2  | get-member -force

   TypeName: System.Management.Automation.PSCustomObject

Name                         MemberType   Definition
----                         ----------   ----------
pstypenames                  CodeProperty System.Collections.ObjectModel.Collection`1[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]] pstypenames{get=PSTypeNames;}
psadapted                    MemberSet    psadapted {ToString, GetType, Equals, GetHashCode}
psbase                       MemberSet    psbase {ToString, GetType, Equals, GetHashCode}
psextended                   MemberSet    psextended {System.Collections.Hashtable}
psobject                     MemberSet    psobject {BaseObject, Members, Properties, Methods, ImmediateBaseObject, TypeNames, get_BaseObject, get_Members, get_Properties, get_Methods, get_ImmediateBaseObject, get_TypeNames, ToString, Copy, Comp…
Equals                       Method       bool Equals(System.Object obj)
GetHashCode                  Method       int GetHashCode()
GetType                      Method       type GetType()
ToString                     Method       string ToString()
System.Collections.Hashtable NoteProperty hashtable System.Collections.Hashtable=System.Collections.Hashtable



PS C:\Users\alexe> $myobj2."System.Collections.Hashtable"

Name                           Value
----                           -----
k1                             2
k 2

PS C:\Users\alexe> $myobj2.PsObject  | gm -force

   TypeName: System.Management.Automation.PSMemberSet

Name                    MemberType   Definition
----                    ----------   ----------
pstypenames             CodeProperty System.Collections.ObjectModel.Collection`1[[System.String, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]] pstypenames{get=PSTypeNames;}
psadapted               MemberSet    psadapted {BaseObject, Members, Properties, Methods, ImmediateBaseObject, TypeNames, get_BaseObject, get_Members, get_Properties, get_Methods, get_ImmediateBaseObject, get_TypeNames, ToString, Copy, CompareT…
psbase                  MemberSet    psbase {InheritMembers, Members, Properties, Methods, MemberType, Value, TypeNameOfValue, Name, IsInstance, get_InheritMembers, get_Members, get_Properties, get_Methods, get_MemberType, get_Value, set_Value,…
psextended              MemberSet    psextended {}
psobject                MemberSet    psobject {BaseObject, Members, Properties, Methods, ImmediateBaseObject, TypeNames, get_BaseObject, get_Members, get_Properties, get_Methods, get_ImmediateBaseObject, get_TypeNames, ToString, Copy, CompareTo…
CompareTo               Method       int CompareTo(System.Object obj), int IComparable.CompareTo(System.Object obj)
Copy                    Method       psobject Copy()
Equals                  Method       bool Equals(System.Object obj)
GetHashCode             Method       int GetHashCode()
GetMetaObject           Method       System.Dynamic.DynamicMetaObject IDynamicMetaObjectProvider.GetMetaObject(System.Linq.Expressions.Expression parameter)
GetObjectData           Method       void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context), void ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo…
GetType                 Method       type GetType()
get_BaseObject          Method       System.Object get_BaseObject()
get_ImmediateBaseObject Method       System.Object get_ImmediateBaseObject()
get_Members             Method       System.Management.Automation.PSMemberInfoCollection[System.Management.Automation.PSMemberInfo] get_Members()
get_Methods             Method       System.Management.Automation.PSMemberInfoCollection[System.Management.Automation.PSMethodInfo] get_Methods()
get_Properties          Method       System.Management.Automation.PSMemberInfoCollection[System.Management.Automation.PSPropertyInfo] get_Properties()
get_TypeNames           Method       System.Collections.ObjectModel.Collection[string] get_TypeNames()
ToString                Method       string ToString(), string ToString(string format, System.IFormatProvider formatProvider), string IFormattable.ToString(string format, System.IFormatProvider formatProvider)
BaseObject              Property     System.Object BaseObject {get;}
ImmediateBaseObject     Property     System.Object ImmediateBaseObject {get;}
Members                 Property     System.Management.Automation.PSMemberInfoCollection[System.Management.Automation.PSMemberInfo] Members {get;}
Methods                 Property     System.Management.Automation.PSMemberInfoCollection[System.Management.Automation.PSMethodInfo] Methods {get;}
Properties              Property     System.Management.Automation.PSMemberInfoCollection[System.Management.Automation.PSPropertyInfo] Properties {get;}
TypeNames               Property     System.Collections.ObjectModel.Collection[string] TypeNames {get;}

PS C:\Users\alexe> $myobj2.PsObject.get_Properties().GetEnumerator()

Value           : {k1, k 2}
MemberType      : NoteProperty
IsSettable      : True
IsGettable      : True
TypeNameOfValue : System.Collections.Hashtable
Name            : System.Collections.Hashtable
IsInstance      : True


PS C:\Users\alexe> $myobj2.PsObject.get_Properties().GetEnumerator().Name
System.Collections.Hashtable

PS C:\Users\alexe> $myobj2.PsObject

BaseObject          :
Members             : {hashtable System.Collections.Hashtable=System.Collections.Hashtable, ToString, GetType, Equals…}
Properties          : {hashtable System.Collections.Hashtable=System.Collections.Hashtable}
Methods             : {ToString, GetType, Equals, GetHashCode}
ImmediateBaseObject :
TypeNames           : {System.Management.Automation.PSCustomObject, System.Object}

PS C:\Users\alexe> $myobj2.PsBase
psbase {ToString, GetType, Equals, GetHashCode}

PS C:\Users\alexe> $myobj2.psExtended

System.Collections.Hashtable
----------------------------
{k1, k 2}

PS C:\Users\alexe> $myobj2.psAdapted
psadapted {ToString, GetType, Equals, GetHashCode}

PS C:\Users\alexe> $myobj2.psTypeNames
System.Management.Automation.PSCustomObject




########################################
########################################
#######                         ########
#######      Types              ########
#######                         ########
########################################
########################################

################################################
# Compile your own DLL and load the assembly
# https://stackoverflow.com/questions/554010/how-to-get-the-actual-size-on-disk-of-a-file-from-powershell?rq=1

# Create file ntfs.extendedfileinfo.cs 
public static ulong GetPhysicalFileSize(string filename)

Aternatively, you could compile your own DLL and load the assembly for that one function:

using System;
using System.Runtime.InteropServices;

namespace NTFS {
  public class ExtendedFileInfo
  {
    [DllImport("kernel32.dll", SetLastError=true, EntryPoint="GetCompressedFileSize")]
    static extern uint GetCompressedFileSizeAPI(string lpFileName, out uint lpFileSizeHigh);
    public static ulong GetCompressedFileSize(string filename)
    {
      uint high;
      uint low;
      low = GetCompressedFileSizeAPI(filename, out high);
      int error = Marshal.GetLastWin32Error();
      if (high == 0 && low == 0xFFFFFFFF && error != 0)
      {
        throw new System.ComponentModel.Win32Exception(error);
      }
      else
      {
        return ((ulong)high << 32) + low;
      }
    }
  }
}

# Then to compile this file:
csc /target:library /out:ntfs.extendedfileinfo.dll ntfs.extendedfileinfo.cs 

# Finally, to load and run in PowerShell:
PS C:\> [System.Reflection.Assembly]::LoadFile("C:\ntfs.extendedfileinfo.dll")
PS C:\> [NTFS.ExtendedFileInfo]::GetCompressedFileSize("C:\sample.txt")




##############################################################
# All Types properties
 PS C:\Users\alexe> ([ordered]@{}).PsObject.Properties | ft -a # ordered hashtable
MemberType Value IsSettable IsGettable TypeNameOfValue                Name           IsInstance
---------- ----- ---------- ---------- ---------------                ----           ----------
  Property     0      False       True System.Int32                   Count                True
  Property False      False       True System.Boolean                 IsReadOnly           True
  Property    {}      False       True System.Collections.ICollection Keys                 True
  Property    {}      False       True System.Collections.ICollection Values               True
  Property False      False       True System.Boolean                 IsFixedSize          True
  Property    {}      False       True System.Object                  SyncRoot             True
  Property False      False       True System.Boolean                 IsSynchronized       True
PS C:\Users\alexe> ([ordered]@{}).GetType() | select Name,BaseType
Name              BaseType
----              --------
OrderedDictionary System.Object

 PS C:\Users\alexe> (@{}).PsObject.Properties | ft -a # hashtable
MemberType Value IsSettable IsGettable TypeNameOfValue                Name           IsInstance
---------- ----- ---------- ---------- ---------------                ----           ----------
  Property False      False       True System.Boolean                 IsReadOnly           True
  Property False      False       True System.Boolean                 IsFixedSize          True
  Property False      False       True System.Boolean                 IsSynchronized       True
  Property    {}      False       True System.Collections.ICollection Keys                 True
  Property    {}      False       True System.Collections.ICollection Values               True
  Property    {}      False       True System.Object                  SyncRoot             True
  Property     0      False       True System.Int32                   Count                True

PS C:\Users\alexe> (@{}).GetType() | select Name,BaseType
Name      BaseType
----      --------
Hashtable System.Object

PS C:\Users\alexe> (@()).PsObject.Properties | ft -a # array
MemberType Value IsSettable IsGettable TypeNameOfValue Name           IsInstance
---------- ----- ---------- ---------- --------------- ----           ----------
  Property     0      False       True System.Int32    Length               True
  Property     0      False       True System.Int64    LongLength           True
  Property     1      False       True System.Int32    Rank                 True
  Property    {}      False       True System.Object   SyncRoot             True
  Property False      False       True System.Boolean  IsReadOnly           True
  Property  True      False       True System.Boolean  IsFixedSize          True
  Property False      False       True System.Boolean  IsSynchronized       True
  Property     0      False       True System.Int32    Count                True

PS C:\Users\alexe> (@()).GetType() | select Name,BaseType
Name     BaseType
----     --------
Object[] System.Array

PS C:\Users\alexe> ([System.Collections.ArrayList]@()).PsObject.Properties | ft -a # ArrayList
MemberType Value IsSettable IsGettable TypeNameOfValue Name           IsInstance
---------- ----- ---------- ---------- --------------- ----           ----------
  Property     0       True       True System.Int32    Capacity             True
  Property     0      False       True System.Int32    Count                True
  Property False      False       True System.Boolean  IsFixedSize          True
  Property False      False       True System.Boolean  IsReadOnly           True
  Property False      False       True System.Boolean  IsSynchronized       True
  Property    {}      False       True System.Object   SyncRoot             True

PS C:\Users\alexe> ([System.Collections.ArrayList]@()).GetType() | select Name,BaseType
Name      BaseType
----      --------
ArrayList System.Object

PS C:\Users\alexe> ([System.Collections.Generic.List[object]]@()).PsObject.Properties | ft -a # List
MemberType Value IsSettable IsGettable TypeNameOfValue Name           IsInstance
---------- ----- ---------- ---------- --------------- ----           ----------
  Property     0       True       True System.Int32    Capacity             True
  Property     0      False       True System.Int32    Count                True
  Property False      False       True System.Boolean  IsReadOnly           True
  Property False      False       True System.Boolean  IsFixedSize          True
  Property    {}      False       True System.Object   SyncRoot             True
  Property False      False       True System.Boolean  IsSynchronized       True

PS C:\Users\alexe> ([System.Collections.Generic.List[object]]@()).GetType() | select Name,BaseType
Name   BaseType
----   --------
List`1 System.Object


PS C:\Users\alexe> 
# $obj0=[PsCustomObject]@{};  ($obj0).PsObject.PsBase.PsBase.Properties ; $obj0.GetType() | select Name,BaseType
([PsCustomObject]@{}).PsObject.PsBase.PsBase.Properties  | 
 ft @{ E='MemberType'; W=15 }, @{ E='Value'; W=50;A='Left' }, @{ E='IsSettable'; W=14; A='Left'}, @{ E='IsGettable'; W=14; A='Left'}, @{ E='TypeNameOfValue'; W=100; A='Left' }, @{ E='Name'; W=20; A='Left' }, @{ E='IsInstance'; W=20; A='Left' }
([PsCustomObject]@{}).GetType() | select Name,BaseType


     MemberType Value                                              IsSettable     IsGettable     TypeNameOfValue                                                                                      Name                 IsInstance
     ---------- -----                                              ----------     ----------     ---------------                                                                                      ----                 ----------
       Property True                                               False          True           System.Boolean                                                                                       InheritMembers       True
       Property {System.Object BaseObject {get;}, System.Manageme… False          True           System.Management.Automation.PSMemberInfoCollection`1[[System.Management.Automation.PSMemberInfo, S… Members              True
       Property {System.Object BaseObject {get;}, System.Manageme… False          True           System.Management.Automation.PSMemberInfoCollection`1[[System.Management.Automation.PSPropertyInfo,… Properties           True
       Property {get_BaseObject, get_Members, get_Properties, get… False          True           System.Management.Automation.PSMemberInfoCollection`1[[System.Management.Automation.PSMethodInfo, S… Methods              True
       Property MemberSet                                          False          True           System.Management.Automation.PSMemberTypes                                                           MemberType           True
       Property psobject {BaseObject, Members, Properties, Method… True           True           System.Object                                                                                        Value                True
       Property System.Management.Automation.PSMemberSet           False          True           System.String                                                                                        TypeNameOfValue      True
       Property psobject                                           False          True           System.String                                                                                        Name                 True
       Property True


PS C:\Users\alexe> ([PsCustomObject]@{}).GetType() | select Name,BaseType
Name           BaseType
----           --------
PSCustomObject System.Object



#######################################
# https://stackoverflow.com/questions/60531562/list-the-classes-of-a-net-namespace-in-powershell
# List C# objects (aka types)
[AppDomain]::CurrentDomain.GetAssemblies().GetTypes()  | Where-Object {$_.NameSpace -eq 'System.IO'} 
[AppDomain]::CurrentDomain.GetAssemblies().GetTypes()  | select-string string

[AppDomain]::CurrentDomain.GetAssemblies().GetTypes() | Select @{N='Name';E={ $tmp=$_.Name.ToString(); if ($tmp.Length -gt 60) {'{0}..' -f $tmp.Substring(0,60)} else {$tmp} }}, @{N='BaseType';E={ $tmp=$_.BaseType.ToString(); if ($tmp.Length -gt 60) {'{0}..' -f $tmp.Substring(0,60)} else {$tmp} }} , @{N='Namespace';E={ $tmp=$_.Namespace.ToString(); if ($tmp.Length -gt 60) {'{0}..' -f $tmp.Substring(0,60)} else {$tmp} }}, TypeHandle, IsPublic | 
   ft -a | Out-String -stream | Select-String '(^|\s)String\s','StringDecorated'
   
########################################
# Use PowerShell to Work with the .NET Framework Classes
# https://devblogs.microsoft.com/scripting/use-powershell-to-work-with-the-net-framework-classes/
 
Function Get-MyType ($mytype) {
	process { 
		$sc=$mytype -as [type]
		[reflection.assembly]::GetAssembly($sc) | fl *
	}
}
Get-MyType System.Net.Dns

PS C:\Windows\System32> $sc="System.Net.Dns" -as [type]
PS C:\Windows\System32> [reflection.assembly]::GetAssembly($sc) | Format-List *

CodeBase            : file:///C:/Program Files/PowerShell/7/System.Net.NameResolution.dll
FullName            : System.Net.NameResolution, Version=7.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
EntryPoint          :
DefinedTypes        : {Microsoft.CodeAnalysis.EmbeddedAttribute, System.Runtime.CompilerServices.NullableAttribute, System.Runtime.CompilerServices.NullableContextAttribute, System.Runtime.CompilerServices.NullablePublicOnlyAttribute…}
IsCollectible       : False
ManifestModule      : System.Net.NameResolution.dll
ReflectionOnly      : False
Location            : C:\Program Files\PowerShell\7\System.Net.NameResolution.dll
ImageRuntimeVersion : v4.0.30319
GlobalAssemblyCache : False
HostContext         : 0
IsDynamic           : False
ExportedTypes       : {System.Net.Dns, System.Net.IPHostEntry}
IsFullyTrusted      : True
CustomAttributes    : {[System.Runtime.CompilerServices.ExtensionAttribute()], [System.Runtime.CompilerServices.CompilationRelaxationsAttribute((Int32)8)], [System.Runtime.CompilerServices.RuntimeCompatibilityAttribute(WrapNonExceptionThrows = True)],
                      [System.Diagnostics.DebuggableAttribute((System.Diagnostics.DebuggableAttribute+DebuggingModes)2)]…}
EscapedCodeBase     : file:///C:/Program%20Files/PowerShell/7/System.Net.NameResolution.dll
Modules             : {System.Net.NameResolution.dll}
SecurityRuleSet     : None


$sc="System.Management.Automation.PSCustomObject" -as [type]

PS C:\Users\alexe> [reflection.assembly]::GetAssembly($sc) | Format-List *

CodeBase            : file:///C:/Program Files/PowerShell/7/System.Management.Automation.dll
FullName            : System.Management.Automation, Version=7.2.3.500, Culture=neutral, PublicKeyToken=31bf3856ad364e35
EntryPoint          :
DefinedTypes        : {<>f__AnonymousType0`2[<cacheEntry>j__TPar,<splittedName>j__TPar], <>f__AnonymousType1`2[<<>h__TransparentIdentifier0>j__TPar,<cachedClassName>j__TPar],
                      <>f__AnonymousType2`2[<<>h__TransparentIdentifier1>j__TPar,<cachedModuleName>j__TPar], <>f__AnonymousType3`2[<<>h__TransparentIdentifier2>j__TPar,<cachedResourceName>j__TPar]…}
IsCollectible       : False
ManifestModule      : System.Management.Automation.dll
ReflectionOnly      : False
Location            : C:\Program Files\PowerShell\7\System.Management.Automation.dll
ImageRuntimeVersion : v4.0.30319
GlobalAssemblyCache : False
HostContext         : 0
IsDynamic           : False
ExportedTypes       : {Microsoft.PowerShell.ToStringCodeMethods, Microsoft.PowerShell.AdapterCodeMethods, Microsoft.PowerShell.ProcessCodeMethods, Microsoft.PowerShell.DeserializingTypeConverter…}
IsFullyTrusted      : True
CustomAttributes    : {[System.Runtime.CompilerServices.ExtensionAttribute()], [System.Runtime.CompilerServices.CompilationRelaxationsAttribute((Int32)8)], [System.Runtime.CompilerServices.RuntimeCompatibilityAttribute(WrapNonExceptionThrows =
                      True)], [System.Diagnostics.DebuggableAttribute((System.Diagnostics.DebuggableAttribute+DebuggingModes)2)]…}
EscapedCodeBase     : file:///C:/Program%20Files/PowerShell/7/System.Management.Automation.dll
Modules             : {System.Management.Automation.dll}
SecurityRuleSet     : None

PS C:\Users\alexe> Add-Type -AssemblyName  System.Management.Automation.PSCustomObject
Add-Type: Cannot find path 'C:\Users\alexe\System.Management.Automation.PSCustomObject.dll' because it does not exist.

PS C:\Users\alexe> [system.reflection.assembly]::LoadwithPartialName("System.Management")
GAC    Version        Location
---    -------        --------
False  v4.0.30319     C:\Program Files\PowerShell\7\System.Management.dll
Add-Type -AssemblyName System.Management.Automation

 $sc2="System.Management.Automation" -as [type]

 PS C:\Users\alexe> [componentmodel.typedescriptor]::GetProperties($myobj2)

Attributes              : {}
IsReadOnly              : False
ComponentType           : System.Management.Automation.PSObject
PropertyType            : System.Object
Converter               : System.ComponentModel.TypeConverter
IsLocalizable           : False
SerializationVisibility : Visible
SupportsChangeEvents    : False
Category                : Misc
Description             :
IsBrowsable             : True
Name                    : System.Collections.Hashtable
DesignTimeOnly          : False
DisplayName             : System.Collections.Hashtable

[System.Management.Automation.PSObject]::AsPSObject($myobj2)
System.Collections.Hashtable
----------------------------
{k1, k 2}


PS C:\Users\alexe> [System.Management.Automation.PSObjectTypeDescriptor]::new($myobj2).GetConverter()
System.ComponentModel.TypeConverter

PS C:\Users\alexe> [System.Management.Automation.PSObjectTypeDescriptor]::new($myobj2).Instance

System.Collections.Hashtable
----------------------------
{k1, k 2}


########################################
########################################
#######                         ########
#######      Classes            ########
#######                         ########
########################################
########################################

$META_CLASS=([wmisearcher]'select * from meta_class').Get() | select *
$META_CLASS |? Name -notlike 'Win32_Perf*' |? Name -notlike 'Msft_WmiProvider*' |? Name  -like '*Provider*' | ft

Get-CimClass * -property 'Application*' | ft -a *

##############################################
# IISResetMe https://github.com/PowerShell/PowerShell/issues/15848#issuecomment-983962376
New-Object -Property ([ordered]@{ A = 1; B = 2; C = 3 }) -TypeName PSCustomObject
A C B
- - -
1 3 2

###############################################
# SeeminglyScience https://github.com/PowerShell/PowerShell/issues/15848#issuecomment-983985160
New-Object psobject -Property ([ordered]@{ PSTypeName = 'CountingInfo'; A = 1; B = 2; C = 3 })
A C B
- - -
1 3 2

########################
# dennisl68-castra https://github.com/PowerShell/PowerShell/issues/15848#issuecomment-890170928
$date = Get-Date
$lottery = 1..49 | Get-Random -Count 7
$drawing = New-Object pscustomobject | select UserName, Drawing, Result

$drawing.UserName = $env:USERNAME
$drawing.Drawing = $date
$drawing.Result = $lottery

PS C:\> $drawing
UserName Drawing             Result
-------- -------             ------
dennis   2021-07-30 23:36:43 {40, 4, 46, 14…}

###################################
# dennisl68-castra  https://github.com/PowerShell/PowerShell/issues/15848#issuecomment-890264140
# Create the objects
$name = $ENV:USERNAME
$date = Get-Date
$lottery = 1..49 | Get-Random -Count 7
$drawing = New-Object pscustomobject | Select Username, Drawing, Result
# Transpose in one line
$nul,@($name,$date,$lottery) | #need a multidimensional array to get the correct count to carry over 
    foreach {
        $pipecount = $_.count; 
        for ($i=0; $i -lt $pipecount; $i++){
            ($drawing.psobject.properties | select -index $i).value = $_[$i]
        }
    }
# Output the result
$drawing

Username Drawing             Result
-------- -------             ------
sven     2021-07-31 02:25:03 {10, 39, 25, 18…}


###############################
# Remove Object's propery
$obj.PSObject.Properties.Remove('Foo')

$ResultObjects[0..1] |% { $obj=$_.Data.psobject.Copy(); $obj | Add-Member -NotePropertyName:IDX -NotePropertyValue:$_.Idx; $obj }  | ft -auto * # works, be careful with expand, see Bug? below

$ResultObjects[0..1] |% Data | ft -auto *

$ResultObjects[0..1] |% {$_.Data;  | ft -auto *

# Bug? -propery + -expand changes the child object:
$SERVICES_LINES=$( $tArr=@(); 
( (sc.exe query state=inactive | Out-String -stream ).Trim() |? {$_} ).Trim() -replace('([\w:]+)\W*:\W*','$1=') -replace('(\w+)=([0-9]\w*)  (.+)','$1=$2; $1_EXTRA="$3"') -replace('^(\w+)=([^0-9].*)','$1="$2"' ) | % {
    if ($_ -like 'SERVICE_NAME=*') { if ($tArr) {  "[ordered]@{ $($tArr -join('; ')) }" }; $tArr=@($_) } else {  $tArr+=@($_) } })

$scriptblock=[scriptblock]::Create( '[scriptblock]::Create($SERVICES_LINES[$Idx])'); 
$ResultObjects=(0..($SERVICES_LINES.Count-1)     | % { $Idx=$_; [pscustomobject] @{Idx=$Idx; Data=[pscustomobject](&(&$scriptBlock))} } ) 
$ResultObjects[0].Data | ft *
$ResultObjects | select-object -first 1 -property Idx -expand data
$ResultObjects[0].Data | ft *                                       # after this the new Idx column added the first row !
$ResultObjects[0].Data.PSObject.Properties.Remove('Idx')
$ResultObjects | select-object -first 2 -expand data -property Idx  # after this the new Idx column added on two first rows !
$ResultObjects[0..3].Data | ft *

$ResultObjects[0..1].Data.PSObject.Properties.Remove('Idx') # does not work
$ResultObjects[0].Data.PSObject.Properties.Remove('Idx')
$ResultObjects[1].Data.PSObject.Properties.Remove('Idx')

##################################
##################################
######                     #######
######    Environment      #######
######                     #######
##################################
##################################

####################################
# Environment Variables
https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_environment_variables?view=powershell-7.2


####################################
# Environment Provider
https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_environment_provider?view=powershell-7.2
PS C:\Users\alexe> Get-PSDrive Env
Name           Used (GB)     Free (GB) Provider      Root                                                                                                                                                                                                                                                                                                                                                                                                                                                  CurrentLocation

Env                                    Environment

######################################
# .Net System.Environment 
# https://docs.microsoft.com/en-us/dotnet/api/system.environment?view=net-6.0
# Properties
([Environment].GetMembers()) | ? MemberType -eq Property | select Name

$envVar=([Environment].GetMembers()) | ? MemberType -eq Property | sort -top 200 | %{
 $Name=$_.name;
 $Val=$(Invoke-Expression "[Environment]::get_$name()")
 $Lines=($val -replace("`r","") -replace(" +",' ')) -split("`n")
 [pscustomobject] @{ 
   Name=$Name
   Type=$Val.GetType()
   Val=$Lines[0]
   Lines=$Lines
   FullValue=$Val
 } 
}
$envVar | select -exclude FullValue,Lines |ft -auto

	
[Environment]::CommandLine
[Environment]::ProcessId
[Environment]::UserName
[Environment]::StackTrace # .Net Stack
[Environment]::CurrentDirectory
[Environment]::Is64BitOperatingSystem
[Environment]::Is64BitProcess
[Environment]::MachineName 	
[Environment]::NewLine 	
[Environment]::OSVersion 	
[Environment]::ProcessId 	
[Environment]::ProcessorCount 	
[Environment]::ProcessPath 
[Environment]::Version  # .Net Version

##########
# .Net Methods
([Environment].GetMembers()) | ? MemberType -eq Method | select Name

#########################################
# The System.Environment class provides the GetEnvironmentVariable and SetEnvironmentVariable methods to get and modify environment variables.
[Environment]::SetEnvironmentVariable('Foo','Bar')
[Environment]::GetEnvironmentVariable('Foo')


#############################################################
# UserName
# 
$env:UserName

#############################################################
# ComputerName
# 
$env:ComputerName

#############################################################
# 32/64 bit
# 
[Environment]::Is64BitProcess

###############################
# get PATH deta
Get-PathVariable


############################
############################
######               #######
######    Console    #######
######               #######
############################
############################

##################################################
# Window width 
$Host.UI.RawUI.WindowSize.Width

####################################
# PowerShell Prompt
# https://docs.microsoft.com/en-us/powershell/module/psreadline/get-psreadlineoption?view=powershell-7.2
Get-PSReadLineOption


############################
############################
######               #######
######  Colors ANSI  #######
######               #######
############################
############################

########################
# Print Separator
# Print Grey Separator
Write-Host "$($PSStyle.Foreground.BrightBlack)$((1..$Host.UI.RawUI.WindowSize.Width |% {'-'} ) -join '')$($PSStyle.Reset)"
# Print Dark Blue Separator
Write-Host "$($PSStyle.Foreground.Blue)$((1..$Host.UI.RawUI.WindowSize.Width |% {'-'} ) -join '')$($PSStyle.Reset)"
# Print Reverse Separator
Write-Host "$($PSStyle.Reverse)$((1..$Host.UI.RawUI.WindowSize.Width |% {'-'} ) -join '')$($PSStyle.Reset)"
# Print Bright  Separator
Write-Host "$($PSStyle.FileInfo.Directory)$((1..$Host.UI.RawUI.WindowSize.Width |% {'-'} ) -join '')$($PSStyle.Reset)"
################
# List Colors 
$PSStyle
 "$($PSStyle.Formatting.FormatAccent)eFlt$($PSStyle.Foreground.Yellow):$($PSStyle.Foreground.Cyan){0} $($PSStyle.Formatting.FormatAccent)eTop$($PSStyle.Foreground.Yellow):$($PSStyle.Foreground.Cyan){1}$($PSStyle.Reset)"  `
   -f $($eFlt|ConvertTo-JSON -compress),$eTop
 
#######################
# Copy to clipboard : Out-Copy
Get-Process | Sort WS -Descending | Select -first 5 | Out-Copy

#######################
# More : Out-More
Get-<Something> | Out-More

#########################
# Colors  | https://github.com/jdhitsolutions/PSScriptTools/
# Out-ConditionalColor (there are bugs)
 Get-Something  | Out-ConditionalColor -PropertyConditions @{Stopped="yellow";Running="white"} -Property Status | Select -first 10

###############################################
# list all possible colors in the console
[System.Enum]::getvalues([System.ConsoleColor])

######################
# colorize console
dir -Exclude *.xml $pshome | Format-Table Mode,@{
    Label = "Name"
    Expression = {
        switch ($_.Extension) { '.exe' { $color = "93"; break } '.ps1xml' { $color = '32'; break } '.dll' { $color = "35"; break } default { $color = "0" } }
        $e = [char]27
       "$e[${color}m$($_.Name)${e}[0m"
    }
 },Length
 
filter colorize-row{
    Get-Process | ? ws -ge 20MB | sort ws | Select-Object Id, Name, WS, Responding | foreach {
        # Print 'red' row if WS greater than 100 MB
        if($_.ws -ge 400MB){
            [console]::ForegroundColor="white"; $_;
        } else {
            [console]::ForegroundColor="red"; "x"; $_;
        }
    }
}
###################################################
# Suppress Ansi Escape Sequences | Turn off Colors 
$PSStyle.OutputRendering="PlainText"
# restore Colored Output
$PSStyle.OutputRendering="Ansi"

# Add $env:__SuppressAnsiEscapeSequences - does not work ! : https://docs.microsoft.com/en-us/powershell/scripting/whats-new/what-s-new-in-powershell-70?view=powershell-7.2

###################################
# Special_Character Escape Esc `e
# Escape sequences are only interpreted when contained in double-quoted (") strings.
# https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_special_characters?view=powershell-7.2#escape-e
$fgColor = 32 # green
"`e[${fgColor}mGreen text`e[0m"

################################################
# Set the color of the progress bar with PowerShell
$Host.PrivateData.ProgressBackgroundColor="Green" 
$Host.PrivateData.ProgressForegroundColor="Black"


################################################
# escape characters in a string using regular expressions
PS C:\home\src\Scripts> [regex]::escape('something. in here (needs) escaping')
something\.\ in\ here\ \(needs\)\ escaping

###################################
###################################
######                      #######
######  Regex               #######
######  Regular Expressions #######
######                      #######
###################################
###################################

## 	 Find Script Commands
# https://petri.com/powershell-problem-solver-find-script-commands/
PS C:\Users\Administrator> $dsc = Get-DscResource -Name PackageManagement
PS C:\Users\Administrator> $code=Get-content $dsc.Path
PS C:\Users\Administrator> $rx.matches($code).Value
Get-TargetResource
Get-TargetResource
Get-PackageProvider
Get-Package
Test-TargetResource
Test-TargetResource
Get-PackageProvider
Get-TargetResource
Set-TargetResource
Set-TargetResource
Get-PackageProvider
Get-TargetResource
Set-TargetResource
Test-TargetResource


# https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_regular_expressions?view=powershell-7.2

[regex]::Replace(" char:{0} `e[33m yellow `e[m" -f [char]0x7e,"[^ -z]", { param($v); '<{0:X}>' -f  [Convert]::ToUInt32([char]$v.Value) } )

#################################
# regular expression callback
# https://stackoverflow.com/questions/8163061/passing-a-function-to-powershells-replace-function/8163281#8163281

# Perhaps you are looking for Regex.Replace Method (String, MatchEvaluator). In PowerShell a script block can be used as MatchEvaluator. Inside this script block $args[0] is the current match.

$global_counter = 0
$callback = { $global_counter += 1; "string-$($args[0])-" + $global_counter }

$re = [regex]"match"
$re.Replace('zzz match match xxx', $callback)

Output:
zzz string-match-1 string-match-2 xxx


$re = [regex]"match"
$re.Replace('', $callback)

#####################################################
# replace special characters with hex codes
$Global:Backtick = @{}
foreach ($Char in '0abefnrtv`'.ToCharArray()) {
    $Global:Backtick[$ExecutionContext.InvokeCommand.ExpandString("``$Char")] = "``$Char"
}
$Global:SpecialChars = '[' + (-Join $Global:Backtick.get_Keys()) + ']'

function Escape($Text) {
    [regex]::Replace($Text, $Global:SpecialChars, { param($Match) $Global:Backtick[$Match.Value] })
}

Escape "`e[33m yellow `e[m"

### Convert the character 'A' to its hex equivalent ([int][char] gives the Ascii number and then we convert):
'0x' + "{0:x}" -f [int][char]'A'
0x41

#####################################################
# replace non-ASCII characters with hex codes
############################################

# ascii-codes replaces non-ASCII characters with hex codes
# $orig="`e[33m yellow `e[m"; $orig | ascii-codes
# 0x1B[33m yellow 0x1B[m
function ascii-codes() {
    [CmdletBinding()][OutputType([string])] param( [Parameter(ValueFromPipeLine = $True)][Alias('InputObject')] [string[]]$strings )
	Process {
		$strings |? {$_} |% { 
			$orig=$_.TocharArray()
			$new= ( $orig |% { $code=[int] $_; if ( $code -lt 0x20 -or $code -gt 0x7F  ) {'0x{0,2:X2}' -f [int]$_ } else {$_}} )
			$new -join ('')
		}
	}
}

#################################
# https://stackoverflow.com/questions/7034659/net-replace-non-printable-ascii-with-string-representation-of-hex-code
# does not work ! :(
Regex.Replace(input, @"\p{Cc}",  a=>string.Format("[{0:X2}]", (byte)a.Value[0]) );
[Regex]::Replace("test", "\\p{Cc}",  a=>string.Format("[{0:X2}]", (byte)a.Value[0]) );
 works: "`e[33m yellow `e[m" -replace('\p{Cc}','')

#######################
# https://stackoverflow.com/questions/22269879/translating-c-sharp-regex-into-powershell
$database = "NewDb"
$query = (Get-Content '<file path>') -join "`r`n"
$query = [regex]::Replace($query, '^\s*use\s+(.*?)$', ("`nUSE [" + $database + "]`n"), [System.Text.RegularExpressions.RegexOptions]::IgnoreCase -bor [System.Text.RegularExpressions.RegexOptions]::Multiline)
$query


##########################
# Convert an array of "ANSI" code points (1 byte each) to the UTF-16 string they represent. 
# https://stackoverflow.com/questions/52174455/using-powershell-to-replace-extended-ascii-character-in-a-text-file
# Note: In Windows PowerShell, [Text.Encoding]::Default contains
#       the "ANSI" encoding set by the system locale.
$str = [Text.Encoding]::Default.GetString([byte[]] 0x93) # -> '“'

# Get the UTF-16 code points of the characters making up the string.
$codePoints = [int[]] [char[]] $str

# Format the first and only code point as a hex. number.
'0x{0:x}' -f $codePoints[0]  # -> '0x201c'

########################################
# Powershell find non-ASCII characters in text file
# https://stackoverflow.com/questions/61792387/powershell-find-non-ascii-characters-in-text-file
'Mathias R. Jessen' -cmatch '[^\x20-\x7F]'
Get-Content in.txt |  Where-Object { $_ -match '\P{IsBasicLatin}' } | Set-Content -Encoding Utf8 out.txt
	
###################################
# Character ranges
# [ -~] (all printable characters).
# alphabetic [A-Z]
# numeric [0-9]

##########################
# Numbers
# \d character class will match any decimal digit. Conversely, \D will match any non-decimal digit.
'Server-01' -match 'Server-\d\d'
$StrData=""
$_ -replace('^(\w*)\W*:\W*([ -~]*)','$1=$2') }) |% {
        if ($_ -like 'SERVICE_NAME=*'){ 
        if ($StrData) { ConvertFrom-StringData $StrData }
        $StrData="$_" 
    } else { 
        $StrData="{0}`n {1}" -f $StrData,$_ 
    } 
}

#########################
# Classes
# \w                 | matches any word character [a-zA-Z_0-9]. 
# \W                 | matches any non-word character
# \b                 | Start the match at a word boundary.
# (?<word>\w+)       | Match one or more word characters up to a word boundary. Name this captured group word.
# \s+                | Match one or more white-space characters.
# (\k<word>)         | Match the captured group that is named word.
# \b                 | Match a word boundary.
# ^                  | Start at the beginning of the string.
# \s*                | Match zero or more white-space characters.
# [\+-]?             | Ma tch zero or one occurrence of either the positive sign or the negative sign.
# \s?                | Match zero or one white-space character.
# \$?                | Match zero or one occurrence of the dollar sign.
# \s?                | Match zero or one white-space character.
# \d*                | Match zero or more decimal digits.
# \.?                | Match zero or one decimal point symbol.
# \d{2}?             | Match two decimal digits zero or one time.
# (\d*\.?\d{2}?){1}  | Match the pattern of integral and fractional digits separated by a decimal point symbol at least one time.
# $                  | Match the end of the string.
'Book' -match '\w' # True
':' -match '\w'    # False

#########################
# Wildcards
# The period (.) is a wildcard character in regular expressions. It will match any character except a newline (\n).
'a1\ ' -match '....' # True

#########################
# Whitespace
# Whitespace is matched using the \s character class. Any non-whitespace character is matched using \S. Literal space characters ' ' can also be used.

#########################
# Quantifiers
# *      Zero or more times. Even an input string without the element would be a match.
# +      One or more times.
# ?      Zero or one time.
# {n}    Match EXACTLY n number of times.
# {n,}   Match at LEAST n number of times.
# {n,m}  Match between n and m number of times.

# How to detect phone numbers using regular expressions
'111-222-3333' -match '\d{3}-\d{3}-\d{4}' # True
$phoneornot = @('780-123-4567', '780 321 6548', 'notme', 'this is 2 num')
$phones = [regex]::matches(($phoneornot -replace '\D', ''),'\b(\d{10})\b')
$phones.value

#########################
# Anchors
# ^ (the caret) matches the start of a string
# $ matches the end of a string. Be sure to enclose the regex using single quotes (') instead of double quotes (") or PowerShell will expand the expression as a variable.
# When using anchors in PowerShell, you should understand the difference between Singleline and Multiline regular expression options.
# Multiline: Multiline mode forces ^ and $ to match the beginning end of every LINE instead of the beginning and end of the input string.
# Singleline: Singleline mode treats the input string as a SingleLine. It forces the . character to match every character (including newlines), instead of matching every character EXCEPT the newline \n.


###############################
# Regular Expressions Modifiers
# https://www.regular-expressions.info/modifiers.html
(?i) makes the regex case insensitive.
(?c) makes the regex case sensitive. Only supported by Tcl.
(?x) turn on free-spacing mode.
(?t) turn off free-spacing mode. Only supported by Tcl.
(?xx) turn on free-spacing mode, also in character classes. Supported by Perl 5.26 and PCRE2 10.30.
(?s) for "single line mode" makes the dot match all characters, including line breaks. 
(?m) for "multi-line mode" makes the caret and dollar match at the start and end of each line in the subject string. 
(?p) in Tcl makes the caret and dollar match at the start and the end of each line, and makes the dot match line breaks.
(?w) in Tcl makes the caret and dollar match only at the start and the end of the subject string, and prevents the dot from matching line breaks.
(?n) turns all unnamed groups into non-capturing groups. Only supported by .NET, XRegExp, and the JGsoft flavor. In Tcl, (?n) is the same as (?m).
(?J) allows duplicate group names. Only supported by PCRE and languages that use it such as Delphi, PHP and R.
(?U) turns on "ungreedy mode", which switches the syntax for greedy and lazy quantifiers. So (?U)a* is lazy and (?U)a*? is greedy. Only supported by PCRE and languages that use it. Its use is strongly discouraged because it confuses the meaning of the standard quantifier syntax.
(?d) corresponds with UNIX_LINES in Java, which makes the dot, caret, and dollar treat only the newline character \n as a line break, instead of recognizing all line break characters from the Unicode standard. Whether they match or don’t match (at) line breaks depends on (?s) and (?m).
(?b) makes Tcl interpret the regex as a POSIX BRE.
(?e) makes Tcl interpret the regex as a POSIX ERE.
(?q) makes Tcl interpret the regex as a literal string (minus the (?q) characters).
(?X) makes escaping letters with a backslash an error if that combination is not a valid regex token. Only supported by PCRE and languages that use it.

###############################
# Regular Expressions Options
# https://docs.microsoft.com/en-us/dotnet/api/system.text.regularexpressions.regexoptions?view=net-6.0
#  0   | None             | No options are set. See the "Default Options" section in the Regular Expression Options article.
#  1   | IgnoreCase       | Case-insensitive matching.
#  2   | Multiline        | Changes the meaning of ^ and $ so they match at the beginning and end, respectively, of any line, and not just the beginning and end of the entire string. 
#  4   | ExplicitCapture  | The only valid captures are explicitly named or numbered groups of the form (?<name>...), allows unnamed parentheses to act as noncapturing groups without the syntactic clumsiness of the expression (?:...)
#  8   | Compiled         | Regular expression is compiled to MSIL code, instead of being interpreted. Compiled regular expressions maximize run-time performance at the expense of initialization time. 
#  16  | Singleline       | Changes the meaning of the dot (.) so it matches every character (instead of every character except \n).
#  32  | IgnoreWhitespace | Eliminates unescaped white space from the pattern and enables comments marked with #. Does not affect white space in character classes, numeric quantifiers, or tokens that mark the beginning of individual regular expression language elements.
#  64  | RightToLeft      | The search will be from right to left instead of from left to right. 
#  256 | ECMAScript       | ECMAScript-compliant behavior for the expression. This value can be used only in conjunction with the IgnoreCase, Multiline, and Compiled values. 
#  512 | CultureInvariant | Cultural differences in language is ignored. 

# You can combine several options by doing a bitwise or:
$options = [Text.RegularExpressions.RegexOptions]::IgnoreCase -bor [Text.RegularExpressions.RegexOptions]::CultureInvariant
# or by letting casting do the magic:
$options = [Text.RegularExpressions.RegexOptions]'IgnoreCase, CultureInvariant'

$match = [regex]::Match($input, $regex, $options)
$regex = [regex]::new('^([0-9]{1,20})(b|kb|mb|gb|tb)$',[System.Text.RegularExpressions.RegexOptions]::Multiline.value__ -bor [System.Text.RegularExpressions.RegexOptions]::IgnoreCase.value__)
[System.Text.RegularExpressions.RegexOptions]::Multiline + System.Text.RegularExpressions.RegexOptions]::IgnoreCase
$regex = [regex]::new('^([0-9]{1,20})(b|kb|mb|gb|tb)$',36)
$regex.Options

# Default Options
# The RegexOptions.None option indicates that no options have been specified, and the regular expression engine uses its default behavior. This includes the following:
# 1. The pattern is interpreted as a canonical rather than an ECMAScript regular expression.
# 2. The regular expression pattern is matched in the input string from left to right.
# 3. Comparisons are case-sensitive.
# 4. The ^ and $ language elements match the beginning and end of the input string. The end of the input string can be a trailing newline \n character.
# 5. The . language element matches every character except \n.
# 6. Any white space in a regular expression pattern is interpreted as a literal space character.
# 7. The conventions of the current culture are used when comparing the pattern to the input string.
# 8. Capturing groups in the regular expression pattern are implicit as well as explicit.
# The RegexOptions.None option has no inline equivalent. 
# When regular expression options are applied inline, the default behavior is restored on an option-by-option basis, by turning a particular option off. 
# For example, (?i) turns on case-insensitive comparison, and (?-i) restores the default case-sensitive comparison.

###################################
# Examples 

# Use a regular expression pattern to replace nonalphabetic characters with dots
$string = "abcdefg12345HIJKLMNOP!@#$%qrs)(*&^TUVWXyz"
$pattern = "[^a-zA-Z]"
$string -replace $pattern, "."

# Limit width
'12345678910' -replace '(?s)(?<=.{4}).+','..'

# sc.exe
(((sc.exe query state=inactive | Out-String).Trim() -replace('(\r\n)*[ \t]*([^: \t\r\n]+) *:[ \t\r\n]*(.+)\r\n','$1@{ $2=$3 }; ') -split('\n'))  | select -first 2) 
"SERVICE_NAME: AJRouter`r`n  TYPE : 20  WIN32_SHARE_PROCESS" -replace('\r') -replace('(?m)^\s*(\w+)\W*:\W*(.+)$','$1="$2"')

# To see \n \r use $Test | ConvertTo-Json 

"SERVICE_NAME: AJRouter`r`n TYPE : 20  WIN32_SHARE_PROCESS" | ConvertTo-Json 
"SERVICE_NAME: AJRouter\r\n TYPE : 20  WIN32_SHARE_PROCESS"

##################################
##################################
####     Members             #####
##################################
##################################

([Environment].GetMembers()) | select Name |? Name -like '*Var*'
[regex] | gm | select | ? Name -match 'Isv'


#############################################################
# Get Data Type Details
# 
 
'value members: {0}' -f "$($parameter.Value | Get-Member)"
# value members: bool Equals(System.Object obj) int GetHashCode() type GetType() string ToString() System.Collections.ObjectModel.Collection[string] Aliases {get;} System.Collections.ObjectModel.Collection[System.Attribute] Attributes {get;} bool IsDynamic {get;set;} string Name {get;set;} System.Collections.Generic.Dictionary[string,System.Management.Automation.ParameterSetMetadata] ParameterSets {get;} type ParameterType {get;set;} bool SwitchParameter {get;}
'value values: {0}' -f "$($parameter.Value | select-object *)"
# value values: @{Name=Arg1; ParameterType=System.Object; ParameterSets=System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterSetMetadata]; IsDynamic=False; Aliases=System.Collections.ObjectModel.Collection`1[System.String]; Attributes=System.Collections.ObjectModel.Collection`1[System.Attribute]; SwitchParameter=False}    
 
'properties: {0}' -f "$(  (([ADSI] "WinNT://WORKGROUP/WIN11-2/Administrator").PsBase.Properties | Get-Member -MemberType Property).Name )"
# properties: Count IsFixedSize IsReadOnly IsSynchronized Keys PropertyNames SyncRoot Values

'methods: {0}' -f "$(  (([ADSI] "WinNT://WORKGROUP/WIN11-2/Administrator").PsBase.Properties | Get-Member -MemberType method ).Name -join('() ') )()"
# methods: Add() Clear() Contains() CopyTo() Equals() GetEnumerator() GetHashCode() GetType() Remove() ToString()

'all members: {0}' -f "$(  ([ADSI] "WinNT://WORKGROUP/WIN11-2/Administrator").PsBase.Properties | Get-Member  )"



###################################
###################################
######                      #######
######   Text Processing    #######
######                      #######
###################################
###################################

PS C:\Users\alexe> '{0}' -f $("`e[33m yellow `e[m"  | Format-Hex)
0000000000000000   1B 5B 33 33 6D 20 79 65 6C 6C 6F 77 20 1B 5B 6D  �[33m yellow �[m

####
# replace non-ASCII characters with hex codes

#####################
# Text Processing
# $$OUTPUT=sc.exe query 
# $OUTPUT=sc.exe query | Out-String -stream; $Z=0; $N=1; $M=$OUTPUT.Length-1; 'OUTPUT is {0}[{1}]' -f $OUTPUT.GetType().BaseType, $OUTPUT.Length

# 'Output[{0:d4}] is {1}[{1}] : ' -f $IDX, $OUTPUT[$IDX].GetType().BaseType, $OUTPUT[$IDX].Length, $OUTPUT[$IDX]
`n[{6:d4}] {7}`n[{8:d4}] {9}" -f $OUTPUT.GetType().BaseType, $OUTPUT.Length, $OUTPUT[0].GetType().Name, $OUTPUT[0].Length, 0, $OUTPUT[0], $N, $OUTPUT[$N], $M, $OUTPUT[$M]

# $SC_LINES =sc.exe query    | Out-String -stream   # array of strings, one string per line
# $SC_OUTPUT=sc.exe query    | Out-String           # as just one string, Note: adds a trailing newline.
# $SC_OUTPUT=(sc.exe query) -join "`n"              # as just one string, no trailing newline.
# $SC_LINES =sc.exe query    |? {$_.Trim()}         # empty lines removed
# $SC_LINES =sc.exe query    |% {$_.Trim()}         # lines are trimmed
# $SC_LINES =sc.exe query    |% {$_.Trim()}|? $_    # lines are trimmed, empty lines removed


##################################
$Global:SC_SERVICES=$(
##################################
$TestCnt=10000
$Global:SC_LINES=((sc.exe query | select -first $TestCnt | Out-String -stream ).Trim() |? {$_} );
# ConvertFrom-StringData $($SC_LINES[0..8] -replace ':','=' -replace '^\(','EXTRA_ATTR=(' -join("`n"))
$tArr=@(); $Idx=0; 

$Global:SC_LINES -replace('([\w:]+)\W*:\W*','$1=') -replace('^(\w+)=(.*)','$1="$2"') | 
select -first $TestCnt | % {
    # '[{0}] {1}' -f $IDX, $_
    if ($_ -like 'SERVICE_NAME=*') {
        if ($tArr) {  
            $tArr=$( $EXTRA=@(); $tArr |% { if($_ -match '\w+=.*' ) { $_ } else {$EXTRA+=@($_)} }; 'SERVICE_ATTR="{0}"' -f $EXTRA )
            # $scriptblock=[scriptblock]::Create("New-Object -TypeName PSCustomObject -Property ([ordered]@{ IDX=$Idx; $($tArr -join('; '))})")
            & ([scriptblock]::Create("New-Object -TypeName PSCustomObject -Property ([ordered]@{ IDX=$Idx; $($tArr -join('; '))})"))
            $Idx++
        }
        $tArr=@()
    }
    $tArr+=@($_)
}
##################################
)
'{0} Services loaded. Use: $SC_SERVICES | select-object -First {0} | Format-Table -auto *' -f $Global:SC_SERVICES.Count
##################################

sc.exe query type=driver state=inactive # state=active doesn't work
sc.exe query state=inactive type=all
sc.exe query state=inactive type=service  | findstr.exe -i '.*app.*info'
((sc.exe query state=inactive | Out-String -stream ).Trim() |? {$_} |  Select -first 8).Trim() `
     -replace('([\w:]+)\W*:\W*','$1=') -replace('(\w+)=([0-9]\w*)  (.+)','$1=$2; $1_EXTRA="$3"') -replace('^(\w+)=([^0-9].*)','$1="$2"')
		
(sc.exe query state=inactive | Out-String).Trim() -Replace("`r","") -replace(" *([^ :]*) *: *([^`n]+)*`n",'$1="$2"; ') -replace(' *"','"') -Split("`n") | select -first 1 
(sc.exe query state=inactive | Out-String).Trim() -Replace("`r","") -replace(" *([^ :]*) *: *([^`n]+)*`n",'$1="$2"; ') -replace(' *"','"') -Split("`n") | select -first 1 | % { $vHash=ConvertFrom-StringData $_; $vHash | Out-String }
(sc.exe query state=inactive | Out-String).Trim() -Replace("`r","") -replace(" *([^ :]*) *: *([^`n]+)*`n",'$1="$2"; ') -replace(' *"','"') -Split("`n") | select -first 1 | % { '$vHash=@{{{0}}}' -f $_ }
 
(sc.exe query state=inactive | Out-String).Trim() -Replace("`r","") -replace(" *([^ :]*) *: *([^`n]+)*`n",'$1="$2"; ') -Split("`n`n") | select -first 1 | % { 'val:{0}' -f $($_ -replace("`n",'\n')); ConvertFrom-StringData $_ -Delimiter ';' }
(sc.exe query state=inactive | Out-String).Trim() -Replace("`r","") -replace(" *([^ :]*) *: *([^`n]+)*`n",'$1="$2"; ') -replace(' *"','"') -Split("`n")  | select -first 1 


############################################################################
# Service Report
Get-Service Bits,Winrm | Convertto-Markdown -title "Service Check" -precontent "## $($env:computername)" -postcontent "_report $(Get-Date)_"
Get-Service Bits,Winrm | ConvertTo-Markdown -title "Service Check" -PreContent "## $($env:computername)" -postcontent "_Confidential_" -AsList

########################################################
# Service Automation

$SelectEngine={Get-Service}
# $SelectEngine={Get-CimInstance -Class Win32_Service} 

$SelectCmd={ $Global:Cnt=0; $Global:MyServices=@( & $SelectEngine | Sort-object name | select @{n='No';e={($Global:Cnt++)}},*) }
& $SelectCmd

$Global:Top=40
$Names=@();  $ExclNames=@();$Pids=@() ;  $ExclPids=@(); 
$States=@('Stopped','Running','Stopping','Starting'); $ExclStates=@()
$Starts=@('Manual','Auto'); ; $ExclStarts=@()

$Global:CimCols=@( 'No','Name'
,@{n='StartMode';e={'{0}{1}' -f $_.StartMode,$( if($_.DelayedAutoStart -eq 'True') {'/Delay'} )}}
,'State',@{n='ServiceOwner';e={$_.StartName}}
,'ProcessId','PathName'
,@{n='ExitCode';e={'{0}{1}' -f  $(if($_.ExitCode){"$($_.ExitCode)"} ), $(if($_.ServiceSpecificExitCode){"$($_.ServiceSpecificExitCode)"})}}
,'DisplayName','Description')

$SetColsCmd={
	$Cols=$('*')
	$ServiceExclCols=@("ServiceName","ServiceType")
	$ServiceExclCols+=@("CanShutdown","CanStop","CanPauseAndContinue")
	$ServiceExclCols+=@("MachineName","Site","ServiceHandle","Container")
	$ServiceExclCols+=@("ServicesDependedOn","RequiredServices","DependentServices")
	$CimExclCols=@("*Properties","*Class","*ClassName")
	$CimExclCols+=@("ExitCode","DesktopInteract","ErrorControl")
	$CimExclCols+=@("InstallDate","Started","SystemName","AcceptPause","AcceptStop","ServiceSpecificExitCode","TagId","Started","CheckPoint","WaitHint","DelayedAutoStart","PSComputerName")
	$ExclCols=$ServiceExclCols+$CimExclCols
}

& $SetColsCmd

$SetCondScriptCmd={
$CondArr=@( '1 -eq 1')+ 
$( if( $Names        ) { @( '$_.Name  -match  "{0}" -or  $_.DispalyName -match  "{0}"'     -f $($Names       -join('|')) ) } else { @() } ) +
$( if( $Pids         ) { @( '$_.ProcessId -match    "{0}"'                                 -f $($Pids        -join('|')) ) } else { @() } ) +
$( if( $States       ) { @( '$_.State     -match    "{0}"'                                 -f $($States      -join('|')) ) } else { @() } ) +
$( if( $Starts       ) { @( '$_.StartMode -match    "{0}"'                                 -f $($Starts      -join('|')) ) } else { @() } ) +
$( if( $ExclNames    ) { @( '$_.Name -notmatch "{0}" -or $_.DispalyName -notmatch "{0}"'   -f $($ExclNames   -join('|')) ) } else { @() } ) +
$( if( $ExclPids     ) { @( '$_.ProcessId -notmatch "{0}"'                                 -f $($ExclPids    -join('|')) ) } else { @() } ) +
$( if( $ExclStates   ) { @( '$_.State     -notmatch "{0}"'                                 -f $($ExclStates  -join('|')) ) } else { @() } ) +
$( if( $ExclStarts   ) { @( '$_.StartMode -notmatch "{0}"'                                 -f $($ExclStarts  -join('|')) ) } else { @() } ) ;
$CondStr='({0})' -f $($CondArr -join(') -and ('))
$Global:CondScript=$([ScriptBlock]::Create($CondStr))}

$SetCondScriptCmd={ $Global:CondScript={ $_.State -notmatch "Stopped|Running|Stopping|Starting" } }

$PrintCmd={
& $SetCondScriptCmd
'$Global:CondScript is {0}' -f $Global:CondScript;
$Global:Result=$Global:MyServices | Where-Object $Global:CondScript
$Global:Result  | Select-Object -First $Global:Top -Property $Cols -ExcludeProperty $ExclCols | ft -auto * 
'{0} of {1} $Global:MyServices object{2} filtered into $Global:Result' -f $Global:Result.Count,$Global:MyServices.Count,$( if($Global:Result.Count -ne 1){'s'} )
'Top {0} of {1} $Global:Result object{2} printed into the above table' -f $Global:Top,$Global:Result.Count,$( if($Global:Top -ne 1){'s'} )

'Helpers:'
'$Global:Result[0] | fl * '
'$Global:Result    | ft $Global:CimCols'
'$Global:MyServices[{0}] | fl * ' -f $Global:Result[0].No
'' }
& $PrintCmd

###############################################################################
# Commands: sc tasklist
sc queryex type=service state=all | findstr.exe /i 'SERVICE_NAME'
tasklist /svc /fi "services eq StateRepository"


AUTORUN_ARR=$CMD_OUT | ConvertFrom-Csv
$AUTORUN_ARR.Count
1523

$AUTORUN_ARR |? {$_.Enabled -notmatch 'disabled|^$' } | Select -First 2000 'Entry Location', Entry, Enabled, Category, 'Image Path'| ft -group Category -auto
exec-cmd-simple "sc.exe query"

#######################
# Get the last line of a text file
Get-Item -Path .\LineNumbers.txt | Get-Content -Tail 1


###############################
# Replace Method
# https://docs.microsoft.com/en-us/dotnet/api/system.string.replace?view=net-6.0


################################################
# display a percentage that has two decimal places
'{0:p2}' -f (1/10)

################################################
# Remove trailing space from a string 
$Data="           Look at all of this wasted space on my screen. "
$Data
$Data.trim()
$Data.trimstart()
$Data.trimend()



############################################
# Format-Table -view ansi # supports only few types
Get-<Something, eg Service> | Format-Table -view ansi
dir C:\home\src\ -Recurse | format-table -view ansi

# Format-Table -view options # supports only few types
 get-process  | ft -view Priority
 get-process  | ft -view Process
 get-alias    | format-table -view options
 get-process  | ft -view StartTime
 

#################################
# Convert text to to Table 
# 
Get-WindowsVersion | ConvertTo-Markdown -title "OS Summary" -PreContent "## $($env:computername)" -postcontent "_Confidential_" -AsList
Get-WindowsVersion | ConvertTo-Markdown -title "OS Summary" -PreContent "## $($env:computername)" -postcontent "_Confidential_" -AsTable


##################################
# add text border 
Add-Border $env:computername

##########################
##########################
##########################
######             #######
######   Shell     #######
######             #######
##########################
##########################
##########################

## Command Syntax: Get-CommandSyntax
Get-CommandSyntax Get-Item

##  Help Examples : Copy-HelpExample # does not work for most of commands
Copy-HelpExample Get-Item 
# <WARNING: No help or examples found for Get-Item>
Copy-HelpExample Get-Something


## Output Format: New-PSFormatXML
# See details in https://github.com/jdhitsolutions/PSScriptTools/

# Define a custom object:
$tname = "myThing"
$obj = [PSCustomObject]@{
  PSTypeName   = $tname
  Name         = "Jeff"
  Date         = (Get-Date)
  Computername = $env:computername
  OS           = (Get-CimInstance win32_operatingsystem).caption
}
$upParams = @{
  TypeName = $tname
  MemberType = "ScriptProperty"
  MemberName = "Runtime"
  value =  {(Get-Date) - [datetime]"1/1/2019"}
  force = $True
}
Update-TypeData @upParams
# The custom object looks like this by default:
PS C:\> $obj
Name         : Jeff
Date         : 2/10/2019 8:49:10 PM
Computername : BOVINE320
OS           : Microsoft Windows 10 Pro
Runtime      : 40.20:49:43.9205882

# Now you can create new formatting directives.
$tname = "myThing"
$params = @{
  Properties = "Name","Date","Computername","OS"
  FormatType = "Table"
  Path = "C:\home\src\Format\$tname.format.ps1xml"
}
$obj | New-PSFormatXML @params

$params.Properties= "Name","OS","Runtime"
$params.Add("Viewname","runtime")
$params.Add("Append",$True)                # was: $params.Add(Append,$True)
$obj | New-PSFormatXML  @params 

$params.formatType = "list"
$params.remove("Properties")
$obj | New-PSFormatXML @params
Update-FormatData -appendpath $params.path

# And here is what the object looks like now:

PS C:\> $obj
Name Date                 Computername OS
---- ----                 ------------ ----------------
Jeff 2/10/2019 8:49:10 PM BOVINE320    Microsoft Windows 10 Pro

PS C:\> $obj | Format-Table -View runtime
Name OS Runtime
---- -- -------
Jeff    40.20:56:24.5411481

PS C:\> $obj | Format-List
Name            : Jeff
Date            : Sunday, February 10, 2019
Computername    : BOVINE320
OS              : Microsoft Windows 10 Pro
Runtime         : 40.21:12:01

# Starting with v2.31.0, you can also use a hashtable to define custom properties from scriptblocks.

 $p = @{
    FormatType = "List"
    ViewName = "run"
    Path  = "c:\scripts\run.ps1xml"
    Properties = "ID","Name","Path","StartTime",
    @{Name="Runtime";Expression={(Get-Date) - $_.starttime}}
 }
 Get-Process -id $pid | New-PSFormatXML @p


##########################
##########################
##########################
######             #######
###### Tracing     #######
######             #######
##########################
##########################
##########################
# https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.utility/trace-command?view=powershell-7.2

$tHt=@{i1=1; i2=2; ht1={k1=11;k2=12}}; $tHt
trace-command -PSHOST -Name ParameterBinding -Expression { win-event.ps1  pvar $tht } ^C
Get-TraceSource # trace source for the -name parameter

Trace-Command -PSHOST -Name ParameterBinding -Option Method,Events,Scope <#-ListenerOption ThreadId#> -Command C:\home\src\Scripts\win-event.ps1 -ArgumentList pval,1

$cmd='C:\home\src\Scripts\win-event.ps1'
$cmd_log='C:\home\logs\trace_'+$(Split-Path $cmd -LeafBase)+'.log'
'C:\home\logs\trace_'+$(Split-Path -Path $trace_opt.command -LeafBase)+'.log.all'
$cmd_args=@("pval",1)
$trace_opt=@{PSHOST=$true; Name="ParameterBinding"; Command=$cmd; Aarg=$cmd_args; File=$cmd_log; Option=("Method","Events","Scope")}

# $trace_opt.file='C:\home\logs\trace_'+$(Split-Path $trace_opt.command -LeafBase)+'.log.all'
# $trace_opt.Name='*'; $trace_opt.Option='all';
$trace_opt; rm $trace_opt.file; Trace-Command @trace_opt; dir $trace_opt.file


Trace-Command -PSHOST -Name ParameterBinding -Option Method,Events,Scope -Command $script -ArgumentList pval,1 -FilePath $log

 
# Wait 1 second
Start-Sleep -s 1
Start-Sleep -m 1000

  
 
##########################
##########################
##########################
######             #######
######   Network   #######
######             #######
##########################
##########################
##########################

PS C:\home\tmp> $NetRoute=Get-NetRoute; $NetRoute | ? DestinationPrefix -eq '0.0.0.0/0' | Get-NetIPInterface | Where ConnectionState -eq 'Connected'

ifIndex InterfaceAlias                  AddressFamily NlMtu(Bytes) InterfaceMetric Dhcp     ConnectionState PolicyStore
------- --------------                  ------------- ------------ --------------- ----     --------------- -----------
10      Ethernet                        IPv4                  1500              25 Enabled  Connected       ActiveStore
17      Wi-Fi 2                         IPv4                  1500              35 Enabled  Connected       ActiveStore

# set interface metric
# PS C:\Windows\System32> Set-NetIPInterface -InterfaceIndex 5 -InterfaceMetric 18; Set-NetIPInterface -InterfaceIndex 8 -InterfaceMetric 21 # Wifi interface #5 is used
PS C:\Windows\System32> Get-NetIPinterface | ? ConnectionState -eq 'Connected' | sort  ifindex | select InterfaceIndex , InterfaceMetric , AddressFamily, Dhcp, ConnectionState, Name, InterfaceAlias | ft -a
InterfaceIndex InterfaceMetric AddressFamily     Dhcp ConnectionState Name      InterfaceAlias
-------------- --------------- -------------     ---- --------------- ----      --------------
             1              75          IPv6 Disabled       Connected ;55<=55;  Loopback Pseudo-Interface 1
             1              75          IPv4 Disabled       Connected ;55<55;   Loopback Pseudo-Interface 1
             5              18          IPv4  Enabled       Connected ?55<55;   Wi-Fi
             8              21          IPv4  Enabled       Connected B55<55;   Ethernet
            34              15          IPv6  Enabled       Connected =>55<=55; vEthernet (Ethernet)
            34              15          IPv4 Disabled       Connected =>55<55;  vEthernet (Ethernet)
            37              15          IPv6  Enabled       Connected =A55<=55; vEthernet (Wi-Fi)
            37              15          IPv4 Disabled       Connected =A55<55;  vEthernet (Wi-Fi)
            55              15          IPv6  Enabled       Connected ??55<=55; vEthernet (Default Switch)
            55              15          IPv4 Disabled       Connected ??55<55;  vEthernet (Default Switch)

PS C:\Windows\System32> Set-NetIPInterface -InterfaceIndex 5 -InterfaceMetric 18; Set-NetIPInterface -InterfaceIndex 8 -InterfaceMetric 17 # Wifi interface #5 is used
# Ethernet ( InterfaceIndex: 8 ) has priority over Wifi (InterfaceIndex:5)
PS C:\Windows\System32>  Get-NetIPinterface | ? ConnectionState -eq 'Connected' | sort  ifindex | select InterfaceIndex , InterfaceMetric , AddressFamily, Dhcp, ConnectionState, Name, InterfaceAlias | ft -a
InterfaceIndex InterfaceMetric AddressFamily     Dhcp ConnectionState Name      InterfaceAlias
-------------- --------------- -------------     ---- --------------- ----      --------------
             1              75          IPv6 Disabled       Connected ;55<=55;  Loopback Pseudo-Interface 1
             1              75          IPv4 Disabled       Connected ;55<55;   Loopback Pseudo-Interface 1
             5              18          IPv4  Enabled       Connected ?55<55;   Wi-Fi
             8              17          IPv4  Enabled       Connected B55<55;   Ethernet
            34              15          IPv6  Enabled       Connected =>55<=55; vEthernet (Ethernet)
            34              15          IPv4 Disabled       Connected =>55<55;  vEthernet (Ethernet)
            37              15          IPv6  Enabled       Connected =A55<=55; vEthernet (Wi-Fi)
            37              15          IPv4 Disabled       Connected =A55<55;  vEthernet (Wi-Fi)
            55              15          IPv6  Enabled       Connected ??55<=55; vEthernet (Default Switch)
            55              15          IPv4 Disabled       Connected ??55<55;  vEthernet (Default Switch)

# Route via Wifi ifIdx=5
PS C:\Windows\System32> $NETSH_OUT=C:\WINDOWS\system32\netsh.exe interface ipv4 show route; $NETSH_OUT | Select-String '0.0.0.0/0'

No       Manual    0    0.0.0.0/0                  10  192.168.1.1
No       Manual    0    0.0.0.0/0                  17  192.168.1.1

Get-NetRoute | ? DestinationPrefix -eq '0.0.0.0/0' | Get-NetIPInterface | Where ConnectionState -eq 'Connected'

PS C:\home\tmp> $ROUTE_OUT=C:\Windows\System32\ROUTE.EXE PRINT; $ROUTE_OUT | Select-String '0.0.0.0.*0.0.0.0'
          0.0.0.0          0.0.0.0      192.168.1.1     192.168.1.88     25
          0.0.0.0          0.0.0.0      192.168.1.1    192.168.1.215     35

PS C:\Windows\System32> C:\Windows\System32\ROUTE.EXE PRINT
===========================================================================
Interface List
 37...00 15 5d 2e 6f be ......Hyper-V Virtual Ethernet Adapter
 34...00 15 5d 83 34 32 ......Hyper-V Virtual Ethernet Adapter #2
 55...00 15 5d 01 58 00 ......Hyper-V Virtual Ethernet Adapter #3
 19...........................Kaspersky VPN
  5...98 48 27 e3 58 63 ......TP-Link Wireless MU-MIMO USB Adapter
  8...a4 bb 6d d6 f4 75 ......Intel(R) Ethernet Connection (5) I219-LM
 32...48 68 4a 1c 94 b2 ......Bluetooth Device (Personal Area Network) #2
  1...........................Software Loopback Interface 1
===========================================================================

IPv4 Route Table
===========================================================================
Active Routes:
Network Destination        Netmask          Gateway       Interface  Metric
          0.0.0.0          0.0.0.0      192.168.1.1    192.168.1.194     18
          0.0.0.0          0.0.0.0      192.168.1.1     192.168.1.88     37
        127.0.0.0        255.0.0.0         On-link         127.0.0.1    331
        127.0.0.1  255.255.255.255         On-link         127.0.0.1    331
  127.255.255.255  255.255.255.255         On-link         127.0.0.1    331
     172.19.224.0    255.255.240.0         On-link      172.19.224.1    271
     172.19.224.1  255.255.255.255         On-link      172.19.224.1    271
   172.19.239.255  255.255.255.255         On-link      172.19.224.1    271
     172.20.176.0    255.255.240.0         On-link      172.20.176.1    271
     172.20.176.1  255.255.255.255         On-link      172.20.176.1    271
   172.20.191.255  255.255.255.255         On-link      172.20.176.1    271
      172.23.64.0    255.255.240.0         On-link       172.23.64.1    271
      172.23.64.1  255.255.255.255         On-link       172.23.64.1    271
    172.23.79.255  255.255.255.255         On-link       172.23.64.1    271
      192.168.1.0    255.255.255.0         On-link     192.168.1.194    274
      192.168.1.0    255.255.255.0         On-link      192.168.1.88    277
     192.168.1.88  255.255.255.255         On-link      192.168.1.88    277
    192.168.1.194  255.255.255.255         On-link     192.168.1.194    274
    192.168.1.255  255.255.255.255         On-link     192.168.1.194    274
    192.168.1.255  255.255.255.255         On-link      192.168.1.88    277
        224.0.0.0        240.0.0.0         On-link         127.0.0.1    331
        224.0.0.0        240.0.0.0         On-link     192.168.1.194    274
        224.0.0.0        240.0.0.0         On-link      172.19.224.1    271
        224.0.0.0        240.0.0.0         On-link      192.168.1.88    277
        224.0.0.0        240.0.0.0         On-link      172.20.176.1    271
        224.0.0.0        240.0.0.0         On-link       172.23.64.1    271
  255.255.255.255  255.255.255.255         On-link         127.0.0.1    331
  255.255.255.255  255.255.255.255         On-link     192.168.1.194    274
  255.255.255.255  255.255.255.255         On-link      172.19.224.1    271
  255.255.255.255  255.255.255.255         On-link      192.168.1.88    277
  255.255.255.255  255.255.255.255         On-link      172.20.176.1    271
  255.255.255.255  255.255.255.255         On-link       172.23.64.1    271
===========================================================================
Persistent Routes:
  None

IPv6 Route Table
===========================================================================
Active Routes:
 If Metric Network Destination      Gateway
  1    331 ::1/128                  On-link
 37    271 fe80::/64                On-link
 34    271 fe80::/64                On-link
 55    271 fe80::/64                On-link
 34    271 fe80::109d:796a:a15:3fe0/128
                                    On-link
 37    271 fe80::31c3:e367:8369:c608/128
                                    On-link
 55    271 fe80::d8aa:b3b4:e202:b059/128
                                    On-link
  1    331 ff00::/8                 On-link
 37    271 ff00::/8                 On-link
 34    271 ff00::/8                 On-link
 55    271 ff00::/8                 On-link
===========================================================================
Persistent Routes:
  None
  

#########################
#  pktmon | network interfaces available for a capturing.
PS > C:\Windows\System32\pktmon.exe comp list
# Network Adapters:
#   Id MAC Address       Name
#   -- -----------       ----
#   10 98-48-27-E3-58-63 TP-Link Wireless MU-MIMO USB Adapter
#   13 A4-BB-6D-D6-F4-75 Intel(R) Ethernet Connection (5) I219-LM
#    9 00-1A-7D-B2-10-86 Bluetooth Device (Personal Area Network)
#   12                   Kaspersky VPN
#  169 00-15-5D-7D-AF-F7 vEthernet (Wi-Fi)
#  168 00-15-5D-FC-42-D1 vEthernet (Ethernet)
#  167 00-15-5D-23-EC-74 vEthernet (Default Switch)
#  166 00-15-5D-BB-72-DD vEthernet (vEthernet (MyIn)
#  164 00-15-5D-01-58-0A vEthernet (MyInternal)

# Packet capture help
cd C:\home\data\Captures\pktmon
function pkt-mon($Match, [int]$Sleep=120, [int] $First=30) {
	$fname="C:\home\data\Captures\pktmon\PktMon",$((Get-Date).ToString('yyyyMMdd.HHmmss')) -join '.'
	pktmon start --capture -f "${fname}.etl"
	start-sleep $Sleep
	pktmon stop
	pktmon format "${fname}.etl" -o "${fname}.txt"
	ls ${fname}*
	if ( $Match ) {
		Get-ChildItem "${fname}.txt" | Select-String $Match -AllMatches |  Select -First $First @{N='No';E='LineNumber'}, Line
	}
}

pkt-mon -Match '192.168.1.2' -Sleep 900
# pkt-mon is defined in C:\home\src\Scripts\netsh-trace.ps1, use: C:\home\src\Scripts\netsh-trace.ps1 pkt-mon 10.106.21.211 -Sleep 1200

# ls 'C:\Users\kirae\Downloads\SecurityLog(5).txt' | % { $Res=Select-String 'Accepted' $_; if ($Res.Count) { $Res; echo "-- $_ count: $( $Res.Count)"}  }  > 'C:\Users\kirae\Downloads\SecurityLog(5)-Accepted.txt'
#########################################
# read etl file
Get-WinEvent -path PktMon1.etl -MaxEvents 1 -Oldest | fl *
#########################################
# parse pktmon etl file
PS C:\home\data\Captures\pktmon> C:\Windows\System32\pktmon.exe format .\PktMon1.etl -o .\PktMon1.txt
# Formatted file:      .\PktMon1.txt
PS C:\home\data\Captures\pktmon> C:\Windows\System32\pktmon.exe pcapng .\PktMon1.etl -o .\PktMon.pcapng
PS C:\home\data\Captures\pktmon> C:\Windows\System32\pktmon.exe start --capture --trace -p Microsoft-Windows-TCPIP -k 0xFF -m real-time -f PktMon2.etl
^C
PS C:\home\data\Captures\pktmon> C:\Windows\System32\pktmon.exe format .\PktMon2.etl -o .\PktMon2.txt
PS C:\home\data\Captures\pktmon> C:\Windows\System32\pktmon.exe pcapng .\PktMon2.etl -o .\PktMon2.pcapng

#############################
# netsh
# https://learn.microsoft.com/en-us/powershell/module/neteventpacketcapture/Add-NetEventPacketCaptureProvider?view=windowsserver2022-ps&viewFallbackFrom=win10-ps
PS C:\Program Files\PowerShell\7\Modules> New-NetEventSession -Name "Session01"

Name               : Session01
CaptureMode        : SaveToFile
LocalFilePath      : C:\WINDOWS\system32\config\systemprofile\AppData\Local\NetEventTrace.etl
MaxFileSize        : 250 MB
TraceBufferSize    : 0 KB
MaxNumberOfBuffers : 0
SessionStatus      : NotRunning


PS C:\Program Files\PowerShell\7\Modules> Add-NetEventProvider -Name "Microsoft-Windows-TCPIP" -SessionName "Session01"

Name            : Microsoft-Windows-TCPIP
SessionName     : Session01
Level           : 4
MatchAnyKeyword : 0xFFFFFFFFFFFFFFFF
MatchAllKeyword : 0x0


PS C:\Program Files\PowerShell\7\Modules> Add-NetEventPacketCaptureProvider -SessionName "Session01"
Name               : Microsoft-Windows-NDIS-PacketCapture
SessionName        : Session01
Level              : 4
MatchAnyKeyword    : 0xFFFFFFFFFFFFFFFF
MatchAllKeyword    : 0x0
CaptureType        : BothPhysicalAndSwitch
VmCaptureDirection : IngressAndEgress
MultiLayer         : False
LinkLayerAddress   : {}
EtherType          : {}
IpAddresses        : {}
IpProtocols        : {}
TruncationLength   : 128

PS C:\Program Files\PowerShell\7\Modules> Start-NetEventSession "Session01"
PS C:\Program Files\PowerShell\7\Modules> Get-NetEventSession

Name               : Session01
CaptureMode        : SaveToFile
LocalFilePath      : C:\WINDOWS\system32\config\systemprofile\AppData\Local\NetEventTrace.etl
MaxFileSize        : 250 MB
TraceBufferSize    : 64 KB
MaxNumberOfBuffers : 42
SessionStatus      : Running


# NETSH TRACE START CAPTURE=yes TRACEFILE=e:\mytrace.etl 
cd C:\home\data\Captures\NetEventSession\
$fname="C:\home\data\Captures\NetEventSession\",$((Get-Date).ToString('yyyyMMdd.HHmmss')) -join '.'
New-NetEventSession -Name "Capture" -CaptureMode SaveToFile -LocalFilePath "$(fname).etl"
Add-NetEventPacketCaptureProvider -SessionName "Capture" -Level 4 -CaptureType Physical
Start-NetEventSession -Name "Capture"
start-sleep 30
Stop-NetEventSession -Name "Capture"

# https://dscottraynsford.wordpress.com/2015/08/10/replace-netsh-trace-start-with-powershell/
# To capture only IPv4 traffic to/from 192.168.178.3 for TCP and UDP.
# Add-NetEventPacketCaptureProvider -SessionName "Capture" -Level 4 -CaptureType Physical -EtherType 0x0800 -IPAddresses 192.168.178.3 -IpProtocols 6,17

#############################
# netsh
# PacketCapture.ps1 | https://adamtheautomator.com/netsh-trace

cd C:\home\data\Captures\pktmon> 
$MYIP="192.168.1.230"
$MYETL="Capture-$($MYIP -replace '\.','-').etl"
netsh trace start capture=yes IPv4.Address=$MYIP tracefile=$MYETL; Start-Sleep 90; netsh trace stop
C:\Windows\System32\pktmon.exe format $MYETL -o "$MYETL.txt"

PS C:\home\data> Exec-Cmd start; Exec-Cmd echo test; Exec-Cmd done
# 2022-12-27 13:33:54 [Exec-Cmd start; Exec-Cmd echo test; Exec-Cmd done] Init $Global:Cmd $Global:CmdLine $Global:CmdResult $Global:CmdStatus
# 2022-12-27 13:33:54 [Exec-Cmd start; Exec-Cmd echo test; Exec-Cmd done] run  echo test  test  : ok
# 2022-12-27 13:33:54 [Exec-Cmd start; Exec-Cmd echo test; Exec-Cmd done] Results in global arrays $Global:Cmd[1] , $Global:CmdLine[1] , $Global:CmdResult[1] , $Global:CmdError[1]
# Last Command :  $Global:Cmd[$($Global:Cmd.Count-1)]
# echo test
#  Last Result  :  $Global:CmdResult[$($Global:CmdResult.Count-1 )] | fl *
# test

# Invoke-WebRequest
# Invoke-WebRequest 'http://www.example.org/' | Select-Object -Expand Content
# (Invoke-WebRequest 'http://www.example.org/').Content

$Web=(Invoke-WebRequest 'https://youtube.com')
$Web.BaseResponse
Version             : 1.1
Content             : System.Net.Http.HttpConnectionResponseContent
StatusCode          : OK
ReasonPhrase        : OK
Headers             : {[X-Content-Type-Options, System.String[]], [Cache-Control, System.String[]], [Pragma, System.String[]], [Date, System.String[]]…}
TrailingHeaders     : {}
RequestMessage      : Method: GET, RequestUri: 'https://m.youtube.com/', Version: 1.1, Content: <null>, Headers:
                      {
                        User-Agent: Mozilla/5.0
                        User-Agent: (Windows NT 10.0; Microsoft Windows 10.0.22000; en-US)
                        User-Agent: PowerShell/7.2.4
                      }
IsSuccessStatusCode : True


################################
# remove hidden network adapters 
# https://woshub.com/remove-hidden-ghost-network-adapter-windows/

* Show
Open the command prompt as an administrator;
Run the command: set devmgr_show_nonpresent_devices=1
Start the Device Manager console: devmgmt.msc


* Start network adapters window GUI from cmd:  ncpa.cpl 
* How to Remove Hidden/Non-Present Network Adapters with PowerShell and CMD?
# List unused/hidden network adapters in Windows using PowerShell:
Get-PnpDevice -class net | ? Status -eq Unknown | Select FriendlyName,InstanceId
Get-PnpDevice -class net | Select Class, Name, Status, Present, Manufacturer, Service, InstanceId, Problem, LastErrorCode, HardwareID | ft
 

# Then remove such a network adapter by its InstanceId (copy its value from the previous command result):
$InstanceId = “PCI\VEN_8086&DEV_10D3&SUBSYS_07D015AD&REV_00\000C29FFFF66A80700”
$RemoveKey = "HKLM:\SYSTEM\CurrentControlSet\Enum\$InstanceId"
Get-Item $RemoveKey | Select-Object -ExpandProperty Property | %{ Remove-ItemProperty -Path $RemoveKey -Name $_ -Verbose}

# One Line Remove all hidden (non-present) network adapters using a PowerShell script:
Get-PnpDevice -class net |? Status -eq Unknown | Select FriendlyName,InstanceId | % { $rKey = "HKLM:\SYSTEM\CurrentControlSet\Enum\$($_.InstanceId)"; Get-Item $rKey | Select-Object -ExpandProperty Property | %{ Remove-ItemProperty -Path $rKey -Name $_ -Verbose } }

* Remove Network Adapter Settings from the Registry
If after removing the ghost NIC in the Device Manager you still cannot assign the old IP address to a new adapter, remove the IP configuration of the old NIC from the registry.
The IP settings of your network interfaces are located under the registry key HKLM\SYSTEM\CurrentControlSet\Services\Tcpip\Parameters\Interfaces.
This registry key contains some {Interface GUID} keys. Check them one by one until you find the interface, which IPAddress value contains the IP address assigned to the old network interface.
The IPAddress parameter may contain more than one IP address since in Windows you can assign multiple IP addresses (aliases) to a single network adapter: https://woshub.com/assign-multiple-ip-addresses-single-nic-windows/

Remember the name of the registry key (it is the identifier of the network adapter). Remove the keys:
    HKLM\SYSTEM\CurrentControlSet\Services\Tcpip\Parameters\Adapters\{your_NIC_ID}
    HKLM\SYSTEM\CurrentControlSet\Services\{your_NIC_ID}
    HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Network{your_NIC_ID}

Get-ItemProperty "HKLM:\SYSTEM\CurrentControlSet\Services\Tcpip\Parameters\Interfaces\*" | ? DhcpIPAddress | select -exclude PSP*,PSD*,DhcpInterfaceOptions,DhcpSubnetMaskOpt | ft *
Get-ItemProperty "HKLM:\SYSTEM\CurrentControlSet\Services\Tcpip\Parameters\Interfaces\*" | ? DhcpIPAddress -eq $null | select -exclude PSP*,PSD*| ft *
 

PS C:\Windows\System32> Get-ItemProperty "HKLM:\SYSTEM\CurrentControlSet\Services\Tcpip\Parameters\Interfaces\*" | ? DhcpIPAddress | select -exclude PSP*,PSD*,DhcpInterfaceOptions,DhcpSubnetMaskOpt | ft *

EnableDHCP Domain NameServer              DhcpIPAddress  DhcpSubnetMask DhcpServer       Lease LeaseObtainedTime         T1         T2 LeaseTerminatesTime AddressType IsServerNapAware DhcpConnForceBroadcastFlag DhcpDomain PSChildName
---------- ------ ----------              -------------  -------------- ----------       ----- -----------------         --         -- ------------------- ----------- ---------------- -------------------------- ---------- -----------
         1                                192.168.42.100 255.255.254.0  192.168.42.5    864000        1672530698 1672962698 1673286698          1673394698           0                0                          0 local      {1abe76a1-65ac-4b68-b711-0388fc14bb69}
         1        9.9.9.9,149.112.112.112 192.168.1.194  255.255.255.0  192.168.1.1      86400        1673715996 1673759196 1673791596          1673802396           0                0                          0 alex.home  {1b6ee010-4d55-4a74-bc6f-b4cccd8f4c9d}
         1        1.1.1.1,1.0.0.1         192.168.1.88   255.255.255.0  192.168.1.1      86400        1673715415 1673758615 1673791015          1673801815           0                0                          1 alex.home  {332f7970-7e5f-4ef3-ac91-2d60b78e357f}
         1                                0.0.0.0        255.0.0.0      255.255.255.255      0        1673715351 1673715351 1673715351          1673715351           0                0                          0            {65089334-7a57-4e9f-a68e-22f32a2bcc0e}

PS C:\Windows\System32> Get-ItemProperty "HKLM:\SYSTEM\CurrentControlSet\Services\Tcpip\Parameters\Interfaces\*" | ? DhcpIPAddress -eq $null | select -exclude PSP*,PSD*| ft *

EnableDHCP Domain NameServer                IPAddress      SubnetMask      RegistrationEnabled EnableMulticast PSChildName
---------- ------ ----------                ---------      ----------      ------------------- --------------- -----------
         0                                  {172.26.144.1} {255.255.240.0}                   0               0 {233f5c56-aaad-43e1-84a9-f1cc94099bb4}
         0                                                                                   1                 {2e8f2c5b-b891-4e13-81b9-4af2f4b61cf9}
         0        10.64.0.1                                                                                    {6fe9822f-51ac-2513-8c7d-ad8c29a0723a}
         1                                                                                   1                 {806c9cc4-6257-4341-9e19-6f14752cd902}
         0                                  {172.24.80.1}  {255.255.240.0}                   0               0 {896838a9-567a-4c5a-8acf-9356146d9cdc}
         1                                                                                   1                 {a4fea943-f005-4638-9816-7a0475ee8210}
         1                                                                                   1                 {ba236970-0623-4e5d-9a93-41bd225f5e34}
         0                                  {172.21.224.1} {255.255.240.0}                   0               0 {c7c53f26-9307-4329-8e2f-9b1b663ad7e5}
         0                                  {192.168.80.1} {255.255.240.0}                   0               0 {f3116a8e-4871-44de-8b11-b0eafcf0ea7f}
         0        198.51.100.1,198.51.100.2                                                  1                 {fb66636d-846c-4e9a-84b7-4e5a7bcc6b8e}
		 


PS C:\Windows\System32> Get-ItemProperty "HKLM:\SYSTEM\CurrentControlSet\Services\Tcpip\Parameters\Interfaces\*" | Select PSChildName,@{N='IP';E={if($_.IPAddress) {$_.IPAddress} else {$_.DhcpIPAddress} }}, DhcpServer, NameServer, DhcpDomain | ft
####################################################
# latest version: C:\home\src\Scripts\get-nics.ps1
function get_reg_nic_details($NicIDs) {
	foreach ( $id in $NicIDs ) {
		$parent="HKLM:\SYSTEM\CurrentControlSet\Control\Network"
		foreach ($class in (ls $parent -Name) ) {
			$pspath="$parent\$class\$id"
			if ( Test-Path $pspath ) {
				$prop=Get-ItemProperty "$pspath/*"| select -ExcludeProperty PS[PD]*
				[pscustomobject] @{ Name=$prop.Name; NicID=$id; PnPInstanceId=$prop.PnPInstanceId; ClassID=$class; PSParent=$parent }
			}
		}
	}
}
####################################################
# latest version: C:\home\src\Scripts\get-nics.ps1

function get_reg_nic($NicIDs) {
	foreach ( $NicID in $NicIDs ) {
		foreach ( $pspath in "HKLM:\SYSTEM\CurrentControlSet\Services\Tcpip\Parameters\Adapters\$NicID" ) {
			Get-ItemProperty "$pspath" | select -ExcludeProperty PS[PD]*
		}
	}
}
####################################################
# latest version: C:\home\src\Scripts\get-nics.ps1
function get_reg_nics($match) {
	$PsTCP="HKLM:\SYSTEM\CurrentControlSet\Services\Tcpip"
	$PsInterfaces="$PsTCP\Parameters\Interfaces"
	$PsAdapters="$PsTCP\Parameters\Adapters"
	$Global:Interfaces=Get-ItemProperty "$PsInterfaces\*" | Select PSChildName,@{N='IP';E={if($_.IPAddress) {$_.IPAddress} else {$_.DhcpIPAddress} }}, DhcpServer, NameServer, DhcpDomain
	$Global:Adapters=Get-ItemProperty "$PsAdapters\*" | Select PSChildName,@{N='IP';E={if($_.IPAddress) {$_.IPAddress} else {$_.DhcpIPAddress} }}, DhcpServer, NameServer, DhcpDomain
	# $Global:Interfaces |ft -a
	'{0}: {1} objects are saved into $Global:Interfaces' -f $PsInterfaces, $Global:Interfaces.Count
	'{0}: {1} objects are saved into $Global:Interfaces' -f $PsAdapters, $Global:Adapters.Count
	if ( $match ) { 
		'Search for ip "{0}" ...' -f $match 	
		foreach ( $itr in $Global:Interfaces ) {
			$retHT=@{ IP=$itr.IP; NameServer=$itr.NameServer; DhcpServer=$itr.DhcpServer;  DhcpDomain=$itr.DhcpDomain; NicId=$itr.PSChildName; }
			$NicID=$retHT.PSChildName
			$IP=$retHT.IP
			if ($match -and $IP -match $match )  { 
				' IP:{0} NameServer:{1} DhcpServer:{2} DhcpDomain:{3} NicID:{4}' -f $IP, $itr.NameServer, $itr.DhcpServer,  $itr.DhcpDomain, $NicID;
				$NicID=$retHT.PSChildName
				get_reg_nic_details $NicID
				get_reg_nic $NicID
				$o
			}
		}
	} else {
		$Global:Nics
	}
}

 get_reg_nics  | ft -a
14 nics from HKLM:\SYSTEM\CurrentControlSet\Services\Tcpip\Parameters\Interfaces are saved into $Global:Nics

PSChildName                            IP             DhcpServer      NameServer                DhcpDomain
-----------                            --             ----------      ----------                ----------
{1abe76a1-65ac-4b68-b711-0388fc14bb69} 192.168.42.100 192.168.42.5                              local
{1b6ee010-4d55-4a74-bc6f-b4cccd8f4c9d} 192.168.1.194  192.168.1.1     9.9.9.9,149.112.112.112   alex.home
{233f5c56-aaad-43e1-84a9-f1cc94099bb4} 172.26.144.1
{2e8f2c5b-b891-4e13-81b9-4af2f4b61cf9}
{332f7970-7e5f-4ef3-ac91-2d60b78e357f} 192.168.1.88   192.168.1.1     1.1.1.1,1.0.0.1           alex.home
{65089334-7a57-4e9f-a68e-22f32a2bcc0e} 0.0.0.0        255.255.255.255
{6fe9822f-51ac-2513-8c7d-ad8c29a0723a}                                10.64.0.1
{806c9cc4-6257-4341-9e19-6f14752cd902}
{896838a9-567a-4c5a-8acf-9356146d9cdc} 172.24.80.1
{a4fea943-f005-4638-9816-7a0475ee8210}
{ba236970-0623-4e5d-9a93-41bd225f5e34}
{c7c53f26-9307-4329-8e2f-9b1b663ad7e5} 172.21.224.1
{f3116a8e-4871-44de-8b11-b0eafcf0ea7f} 192.168.80.1
{fb66636d-846c-4e9a-84b7-4e5a7bcc6b8e}                                198.51.100.1,198.51.100.2

ls "HKLM:\SYSTEM\CurrentControlSet\Services\Tcpip\Parameters\Adapters\{1abe76a1-65ac-4b68-b711-0388fc14bb69}"

# PS C:\Windows\System32> ls "HKLM:\SYSTEM\CurrentControlSet\Control\Network\*\{1abe76a1-65ac-4b68-b711-0388fc14bb69}\*"
    Hive: HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Network\{4D36E972-E325-11CE-BFC1-08002BE10318}\{1abe76a1-65ac-4b68-b711-0388fc14bb69}
Name                           Property
----                           --------
Connection                     Name          : Ethernet 2


# PS C:\Windows\System32>  Get-ItemProperty "HKLM:\SYSTEM\CurrentControlSet\Control\Network\{4D36E972-E325-11CE-BFC1-08002BE10318}\{1abe76a1-65ac-4b68-b711-0388fc14bb69}\*"
Name          : Ethernet 2
PnPInstanceId : USB\VID_2CA3&PID_001F&MI_00\7&c130755&0&0000
PSPath        : Microsoft.PowerShell.Core\Registry::HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Network\{4D36E972-E325-11CE-BFC1-08002BE10318}\{1abe76a1-65ac-4b68-b711-0388fc14bb69}\Connection
PSParentPath  : Microsoft.PowerShell.Core\Registry::HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Network\{4D36E972-E325-11CE-BFC1-08002BE10318}\{1abe76a1-65ac-4b68-b711-0388fc14bb69}
PSChildName   : Connection
PSDrive       : HKLM
PSProvider    : Microsoft.PowerShell.Core\Registry


# for ( $key in "HKLM:\SYSTEM\CurrentControlSet\Services\Tcpip\Parameters\Adapters\$NicID",  
#			  "HKLM:\SYSTEM\CurrentControlSet\Services\$NicID",
#			  "HKLM:\SYSTEM\CurrentControlSet\Control\Network\$NicID" ) {
# }
}
			  
			  
Get-ItemProperty $jey


# On W11 use PnPUtil to list / remove devices
PnPUtil  /enum-devices /class net





##########################
# Routing  aka ROUTE.EXE print

PS C:\Windows\System32> .\ROUTE.EXE print
===========================================================================
Interface List
 16...98 48 27 e3 58 63 ......TP-Link Wireless MU-MIMO USB Adapter
 19...a4 bb 6d d6 f4 75 ......Hyper-V Virtual Ethernet Adapter
  3...9a 48 27 e3 58 63 ......Microsoft Wi-Fi Direct Virtual Adapter
 10...98 48 27 e3 58 63 ......Microsoft Wi-Fi Direct Virtual Adapter #2
 21...00 ff fa 82 08 8a ......Kaspersky Security Data Escort Adapter
  9...00 1a 7d b2 10 86 ......Bluetooth Device (Personal Area Network)
  1...........................Software Loopback Interface 1
===========================================================================

IPv4 Route Table
===========================================================================
Active Routes:
Network Destination        Netmask          Gateway       Interface  Metric
          0.0.0.0          0.0.0.0      192.168.1.1     192.168.1.88     22
          0.0.0.0          0.0.0.0      192.168.1.1    192.168.1.194     40
        127.0.0.0        255.0.0.0         On-link         127.0.0.1    331
        127.0.0.1  255.255.255.255         On-link         127.0.0.1    331
  127.255.255.255  255.255.255.255         On-link         127.0.0.1    331
      192.168.1.0    255.255.255.0         On-link      192.168.1.88    278
      192.168.1.0    255.255.255.0         On-link     192.168.1.194    276
     192.168.1.88  255.255.255.255         On-link      192.168.1.88    278
    192.168.1.194  255.255.255.255         On-link     192.168.1.194    276
    192.168.1.255  255.255.255.255         On-link      192.168.1.88    278
    192.168.1.255  255.255.255.255         On-link     192.168.1.194    276
        224.0.0.0        240.0.0.0         On-link         127.0.0.1    331
        224.0.0.0        240.0.0.0         On-link      192.168.1.88    278
        224.0.0.0        240.0.0.0         On-link     192.168.1.194    276
  255.255.255.255  255.255.255.255         On-link         127.0.0.1    331
  255.255.255.255  255.255.255.255         On-link      192.168.1.88    278
  255.255.255.255  255.255.255.255         On-link     192.168.1.194    276
===========================================================================
Persistent Routes:
  None

IPv6 Route Table
===========================================================================
Active Routes:
 If Metric Network Destination      Gateway
  1    331 ::1/128                  On-link
  1    331 ff00::/8                 On-link
===========================================================================
Persistent Routes:
  None
  
PS C:\Windows\System32> Get-NetRoute

ifIndex DestinationPrefix                              NextHop                                  RouteMetric ifMetric PolicyStore
------- -----------------                              -------                                  ----------- -------- -----------
21      255.255.255.255/32                             0.0.0.0                                          256 35       ActiveStore
10      255.255.255.255/32                             0.0.0.0                                          256 25       ActiveStore
3       255.255.255.255/32                             0.0.0.0                                          256 25       ActiveStore
16      255.255.255.255/32                             0.0.0.0                                          256 20       ActiveStore
9       255.255.255.255/32                             0.0.0.0                                          256 65       ActiveStore
19      255.255.255.255/32                             0.0.0.0                                          256 22       ActiveStore
1       255.255.255.255/32                             0.0.0.0                                          256 75       ActiveStore
21      224.0.0.0/4                                    0.0.0.0                                          256 35       ActiveStore
10      224.0.0.0/4                                    0.0.0.0                                          256 25       ActiveStore
3       224.0.0.0/4                                    0.0.0.0                                          256 25       ActiveStore
16      224.0.0.0/4                                    0.0.0.0                                          256 20       ActiveStore
9       224.0.0.0/4                                    0.0.0.0                                          256 65       ActiveStore
19      224.0.0.0/4                                    0.0.0.0                                          256 22       ActiveStore
1       224.0.0.0/4                                    0.0.0.0                                          256 75       ActiveStore
16      192.168.1.255/32                               0.0.0.0                                          256 20       ActiveStore
19      192.168.1.255/32                               0.0.0.0                                          256 22       ActiveStore
16      192.168.1.194/32                               0.0.0.0                                          256 20       ActiveStore
19      192.168.1.88/32                                0.0.0.0                                          256 22       ActiveStore
16      192.168.1.0/24                                 0.0.0.0                                          256 20       ActiveStore
19      192.168.1.0/24                                 0.0.0.0                                          256 22       ActiveStore
1       127.255.255.255/32                             0.0.0.0                                          256 75       ActiveStore
1       127.0.0.1/32                                   0.0.0.0                                          256 75       ActiveStore
1       127.0.0.0/8                                    0.0.0.0                                          256 75       ActiveStore
16      93.184.216.1/32                                192.168.0.1                                        1 20       ActiveStore
16      0.0.0.0/0                                      192.168.1.1                                       20 20       ActiveStore
19      0.0.0.0/0                                      192.168.1.1                                        0 22       ActiveStore
10      ff00::/8                                       ::                                               256 25       ActiveStore
3       ff00::/8                                       ::                                               256 25       ActiveStore
1       ff00::/8                                       ::                                               256 75       ActiveStore
3       fe80::f160:2440:26f5:4056/128                  ::                                               256 25       ActiveStore
10      fe80::f10d:3f94:5955:5b85/128                  ::                                               256 25       ActiveStore
10      fe80::/64                                      ::                                               256 25       ActiveStore
3       fe80::/64                                      ::                                               256 25       ActiveStore
1       ::1/128                                        ::                                               256 75       ActiveStore

PC C:\> Get-NetRoute | Sort RouteMetric | select R*,Add*,int*,Dest*,N*,*time | Out-GridView
PC C:\> Get-NetRoute | Sort RouteMetric | select -Exc Cim* | Out-GridView

PC C:\> Get-NetRoute | ? DestinationPrefix -eq '0.0.0.0/0'
ifIndex DestinationPrefix                              NextHop                                  RouteMetric ifMetric PolicyStore
------- -----------------                              -------                                  ----------- -------- -----------
16      0.0.0.0/0                                      192.168.1.1                                       20 20       ActiveStore
19      0.0.0.0/0                                      192.168.1.1                                        0 22       ActiveStore

PC C:\> Get-NetRoute | ? DestinationPrefix -eq '0.0.0.0/0' |  Get-NetIPInterface
ifIndex InterfaceAlias                  AddressFamily NlMtu(Bytes) InterfaceMetric Dhcp     ConnectionState PolicyStore
------- --------------                  ------------- ------------ --------------- ----     --------------- -----------
16      Wi-Fi                           IPv4                  1500              20 Enabled  Connected       ActiveStore
19      vEthernet (Default Switch)      IPv4                  1500              22 Enabled  Connected       ActiveStore

# Add static route 
route /p add 93.184.216.1 mask 255.255.255.2555 192.168.1.1 if 16

# !! No Internet !! To  remove all static routes, run the following command:
route -f

# To remove a specific static routes, run the following command:
route /p delete 192.168.0.0 mask 255.255.0.0 192.168.0.1 if 0x2

# ARP = Neighbor
# Address Resolution Protocol (ARP) is a protocol or procedure that connects an ever-changing Internet Protocol (IP) address to a fixed physical machin
Get-NetNeighbor | Select Int*,*Add*,Stat | sort interfaceindex | Out-GridView
Get-NetNeighbor | Select Int*,*ess,State | sort interfaceindex | ft -a

# trace route
tracert youtube.com
Test-NetConnection -TraceRoute youtube.com

ComputerName           : youtube.com
RemoteAddress          : 142.250.176.206
InterfaceAlias         : vEthernet (Default Switch)
SourceAddress          : 192.168.1.88
PingSucceeded          : True
PingReplyDetails (RTT) : 8 ms
TraceRoute             : 192.168.1.1
                         142.250.176.206

# UDP
PS C:\> Get-NetUDPSetting
DynamicPortRangeStartPort     : 49152
DynamicPortRangeNumberOfPorts : 16384

PS C:\> Get-NetUDPEndpoint

########################
# mapping network drives Web Dav

# Enable WebDAV
# https://medium.odrive.com/how-to-easily-setup-a-webdav-server-on-windows-and-sync-to-it-8469b9259435
# https://www.google.com/url?sa=t&rct=j&q=&esrc=s&source=web&cd=&ved=2ahUKEwjcs_DLmvb4AhVlkIkEHeIZAlMQFnoECBUQAQ&url=https%3A%2F%2Fmedium.odrive.com%2Fhow-to-easily-setup-a-webdav-server-on-windows-and-sync-to-it-8469b9259435&usg=AOvVaw2tq8VHlkDwVkiWFHpCz1KT

# The below commands will install the Microsoft IIS (Internet Information Services) modules needed for WebDAV, create a self-signed certificate to allow HTTPS connections, and launch the IIS Manager. 
# This process can take a couple of minutes (longer on slower systems), so just sit back and relax for a bit while it does its thing.

foreach ($feat in "IIS-WebServerRole","IIS-WebServer","IIS-CommonHttpFeatures","IIS-HttpErrors","IIS-Security","IIS-RequestFiltering","IIS-WebServerManagementTools", "IIS-DigestAuthentication",
  "IIS-StaticContent","IIS-DefaultDocument","IIS-DirectoryBrowsing","IIS-WebDAV","IIS-BasicAuthentication","IIS-ManagementConsole") { Enable-WindowsOptionalFeature -Online -FeatureName $feat };
New-SelfSignedCertificate -DnsName odrive-self-signed -CertStoreLocation cert:\LocalMachine\My; 
& "$env:windir\system32\inetsrv\InetMgr.exe";

# Back at the IIS Manager, click on "Default Website" in the "Connections" column. Click on "Bindings" under "Actions" in the right column.
# 

# https://serverfault.com/questions/690231/map-network-drive-to-a-webdav-server-via-powershell
[String]$WebDAVShare = '\\live.sysinternals.com\Tools'
New-PSDrive -Name S -PSProvider FileSystem -Root $WebDAVShare

########################################
########################################
#######                         ########
#######      Certificates       ########
#######    Digitally Signed     ########
#######                         ########
########################################
########################################
# Get-ChildItem 'C:\Program Files\WindowsPowerShell\Modules\PSScriptTools\2.43.0' *.ps1* -recurse | ForEach-object {Get-AuthenticodeSignature $_.FullName}
# To unblock error 'not digitally signed' on one file (does not work on )
Get-PSWho
# Get-PSWho : The 'Get-PSWho' command was found in the module 'PSScriptTools', but the module could not be loaded. For more information, run 'Import-Module PSScriptTools'.
Import-Module PSScriptTools
# Import-Module : The following error occurred while loading the extended type data file: , 
# C:\Program Files\WindowsPowerShell\Modules\PSScriptTools\2.43.0\types\fileinfo.types.ps1xml: The file was skipped because of the following validation exception: 
# File C:\Program Files\WindowsPowerShell\Modules\PSScriptTools\2.43.0\types\fileinfo.types.ps1xml cannot be loaded. 
# The file C:\Program Files\WindowsPowerShell\Modules\PSScriptTools\2.43.0\types\fileinfo.types.ps1xml is not digitally signed. You cannot run this script on the current system. 
# For more information about running scripts and setting execution policy, see about_Execution_Policies at https:/go.microsoft.com/fwlink/?LinkID=135170..

# To sign (suppress the error) one file (does not work on fileinfo.types.ps1xml)
Unblock-File -Path 'C:\Program Files\WindowsPowerShell\Modules\PSScriptTools\2.43.0\types\fileinfo.types.ps1xml'

# To suppress the error on one file (does not work on fileinfo.types.ps1xml)
# To sign (suppress the error) the folder
# Set-Location 'C:\scripts\src\'
# Get all the files which are properly signed
$to_sign = Get-ChildItem 'C:\Program Files\WindowsPowerShell\Modules\PSScriptTools\2.43.0' -filter *.ps* -Recurse | Get-AuthenticodeSignature -ea 0

# Get the latest certificate
$cert=Get-ChildItem Cert:\LocalMachine\My -recurse | Where-Object {$_.Subject -match "CN=AlxEvt5years"}

# Sign the files
Set-AuthenticodeSignature -FilePath $to_sign.path -Certificate $cert

# check that module files are signed 
Import-Module PSScriptTools # no errors
Get-PSWho # no errors

# https://adamtheautomator.com/how-to-sign-powershell-script/
# 1. Open PowerShell as administrator on your computer.
# 2. Copy the command below and run it in PowerShell. 
# This command uses the New-SelfSignedCertificate cmdlet to create a new code signing certificate. The certificate’s name is AlxEvtAuth inside the local computer’s Personal certificate store. 
# The command also stores the certificate object to the $authenticode variable for use in the next step. 

 # 1 year (default)
 $authenticode = New-SelfSignedCertificate -Subject "AlxEvtAuth" -CertStoreLocation Cert:\LocalMachine\My -Type CodeSigningCert
 # 5 years
 $authenticode = New-SelfSignedCertificate -Subject "AlxEvt5years" -CertStoreLocation Cert:\LocalMachine\My -Type CodeSigningCert -NotAfter (Get-Date).AddYears(5)
 
# 3. Next, to make your computer trust the new certificate you’ve created, add the self-signed certificate to the computer’s Trusted Root Certification Authority and Trusted Publishers certificate store. 
# To do so, copy the code below and run it in PowerShell. 

# Add the self-signed Authenticode certificate to the computer's root certificate store.
 $rootStore = [System.Security.Cryptography.X509Certificates.X509Store]::new("Root","LocalMachine") ## Create an object to represent the LocalMachine\Root certificate store.
 $rootStore.Open("ReadWrite") ## Open the root certificate store for reading and writing.
 $rootStore.Add($authenticode) ## Add the certificate stored in the $authenticode variable.
 $rootStore.Close() ## Close the root certificate store.
 
# Add the self-signed Authenticode certificate to the computer's trusted publishers certificate store.
 $publisherStore = [System.Security.Cryptography.X509Certificates.X509Store]::new("TrustedPublisher","LocalMachine") ## Create an object to represent the LocalMachine\TrustedPublisher certificate store.
 $publisherStore.Open("ReadWrite") ## Open the TrustedPublisher certificate store for reading and writing.
 $publisherStore.Add($authenticode) ## Add the certificate stored in the $authenticode variable.
 $publisherStore.Close() ## Close the TrustedPublisher certificate store.
 
# 4.  To confirm that the certificate with the subject ATA Authenticode is in the Personal, Root, and Trusted Publisher certificate stores, run the commands below in PowerShell. 
# Get-ChildItem Cert:\LocalMachine\My | Where-Object {$_.Subject -eq "CN=AlxEvtAuth"} # Personal certificate store
# Get-ChildItem Cert:\LocalMachine\Root | Where-Object {$_.Subject -eq "CN=AlxEvtAuth"} # Root certificate store
# Get-ChildItem Cert:\LocalMachine\TrustedPublisher | Where-Object {$_.Subject -eq "CN=AlxEvtAuth"} # Trusted Publishers certificate store

Get-ChildItem Cert:\LocalMachine\ -recurse | Where-Object {$_.Subject -match "CN=AlxEvt"} | select Subject,NotAfter,EnhancedKeyUsageList, PublicKey, PSPath | sort subject | ft -a #all

# 5. To view the certificate in a GUI instead, open the Certificates Snap-in and look for the certificate you’ve created under the Certificates folder inside the Personal, 
# Trusted Root Certification Authorities, and Trusted Publishers certificate stores. 
# https://docs.microsoft.com/en-us/dotnet/framework/wcf/feature-details/how-to-view-certificates-with-the-mmc-snap-in
# Start +Run + mmc , Add Snap-in Certificates (Local Computer)


# 6. To sign the PowerShell script, run the code below in PowerShell. 
# The first command gets the code-signing certificate from the local machine’s personal certificate store. 
# The second command adds a digital signature to the PowerShell script file.
# Most trusted certificate providers have a timestamp server and you can find them from the providers’ websites. 
# For example, DigiCert‘s timestamp server is http://timestamp.digicert.com and Comodo has http://timestamp.comodoca.com.

# Get the code-signing certificate from the local computer's certificate store with the name *ATA Authenticode* and store it to the $codeCertificate variable.
$codeCertificate = Get-ChildItem Cert:\LocalMachine\My | Where-Object {$_.Subject -eq "CN=AlxEvt5years"}

#####################################################
# Sign the PowerShell script
# PARAMETERS:
# FilePath - Specifies the file path of the PowerShell script to sign, eg. C:\ATA\myscript.ps1.
# Certificate - Specifies the certificate to use when signing the script.
# TimeStampServer - Specifies the trusted timestamp server that adds a timestamp to your script's digital signature. Adding a timestamp ensures that your code will not expire when the signing certificate expires.
Set-AuthenticodeSignature -FilePath C:\ATA\myscript.ps1 -Certificate $codeCertificate -TimeStampServer *<http://timestamp.digicert.com>*

# 
################
# New-SelfSignedCertificate
# The New-SelfSignedCertificate cmdlet creates a self-signed certificate for testing purposes. 
# Using the CloneCert parameter, a test certificate can be created based on an existing certificate with all settings copied from the original certificate except for the public key. 
# The cmdlet creates a new key of the same algorithm and length.
# Delegation may be required when using this cmdlet with Windows PowerShell remoting and changing user configuration.

# EXAMPLE 2 | https://docs.microsoft.com/en-us/powershell/module/pki/new-selfsignedcertificate?view=windowsserver2022-ps#example-2
# This example creates a copy of the certificate specified by the CloneCert parameter and puts it in the computer MY store.
PS C:\> Set-Location -Path "cert:\LocalMachine\My"
PS Cert:\LocalMachine\My> $OldCert = (Get-ChildItem -Path E42DBC3B3F2771990A9B3E35D0C3C422779DACD7)
PS Cert:\LocalMachine\My> New-SelfSignedCertificate -CloneCert $OldCert

# EXAMPLE 3 | https://docs.microsoft.com/en-us/powershell/module/pki/new-selfsignedcertificate?view=windowsserver2022-ps#example-3
# Create a self-signed S/MIME certificate in the user MY store. 
# Default provider: Microsoft Software Key Storage Provider. 
# RSA asymmetric key with a key size of 2048 bits. Subject alternative names of patti.fuller@contoso.com as RFC822 and pattifuller@contoso.com as Principal Name.
# No NotAfter parameter: expires in one year.
PS C:\> New-SelfSignedCertificate -Type Custom -Subject "E=patti.fuller@contoso.com,CN=Patti Fuller" \
        -TextExtension @("2.5.29.37={text}1.3.6.1.5.5.7.3.4","2.5.29.17={text}email=patti.fuller@contoso.com&upn=pattifuller@contoso.com") \
		-KeyAlgorithm RSA -KeyLength 2048 -SmimeCapabilities -CertStoreLocation "Cert:\CurrentUser\My"

# See http://oid-info.com/get/2.5.29.37 >> {joint-iso-itu-t(2) ds(5) certificateExtension(29) extKeyUsage(37)}    # also: https://oidref.com/2.5.29.37
# See http://oid-info.com/get/2.5.29.17 >> {joint-iso-itu-t(2) ds(5) certificateExtension(29) subjectAltName(17)} # also: https://oidref.com/2.5.29.17

# EXAMPLE 9 | https://docs.microsoft.com/en-us/powershell/module/pki/new-selfsignedcertificate?view=windowsserver2022-ps#example-9
# Create a self-signed SSL server certificate with Subject and Issuer name set to localhost and with subject alternative name set to IPAddress 127.0.0.1 and ::1 via TextExtension.
PS C:\> New-SelfSignedCertificate -Subject "localhost" -TextExtension @("2.5.29.17={text}DNS=localhost&IPAddress=127.0.0.1&IPAddress=::1")

##########################
# Dns
# Get-Command -Noun *Dns*

# DnsServer
Get-DnsClientServerAddress
Get-DnsClientDohServerAddress # DNS over HTTPS aka DoH

# Dns nslookup
Resolve-DnsName youtube.com AA # ipv4 >> 142.251.40.238
Resolve-DnsName youtube.com AA # ipv6 >> 2607:f8b0:4006:823::200e
Resolve-DnsName 192.168.1.205  # >> WDMYCLOUDEX4

# DNS Client
Get-DnsClient | Select Int*,*Co* | Out-GridView
Get-DnsClient | Select -Exc Cim* | Out-GridView

 
# Dns Cache
 Get-DnsClientCache
 Clear-DnsClientCache
 
#########################
# Set Default Adapter
https://www.tenforums.com/tutorials/92180-change-network-adapter-connection-priorities-windows-10-a.html

# !! does not work with vEthernet, see Get-NetRoute | Select * | Out-GridView
Set-NetIPInterface -InterfaceIndex "16" -InterfaceMetric "20"
Set-NetIPInterface -InterfaceIndex "19" -InterfaceMetric "22"

PS C:\Windows\System32> Get-NetIPInterface | ft If*,*Metr*,Add*
ifIndex ifAlias                      AutomaticMetric InterfaceMetric AddressFamily     Dhcp
------- -------                      --------------- --------------- -------------     ----
     10 Local Area Connection* 2             Enabled              25          IPv6 Disabled
      3 Local Area Connection* 1             Enabled              25          IPv6 Disabled
      1 Loopback Pseudo-Interface 1          Enabled              75          IPv6 Disabled
     19 vEthernet (Default Switch)          Disabled              22          IPv4  Enabled
     21 Ethernet 2                           Enabled              35          IPv4 Disabled
     10 Local Area Connection* 2             Enabled              25          IPv4  Enabled
      9 Bluetooth Network Connection         Enabled              65          IPv4  Enabled
      3 Local Area Connection* 1             Enabled              25          IPv4  Enabled
     16 Wi-Fi                               Disabled              20          IPv4  Enabled
      1 Loopback Pseudo-Interface 1          Enabled              75          IPv4 Disabled


#######################
# Test connection to Internet
PS C:\Windows\System32> Test-Connection -ComputerName www.google.com -Quiet
True


##############################
# interface statistic
PS C:\Windows\System32> Get-NetAdapter -IncludeHidden  |  Get-NetAdapterStatistics  -ea 0 | ft -a if*,*Bytes*

ifAlias                    ifDesc                                   ReceivedBroadcastBytes ReceivedBytes ReceivedMulticastBytes ReceivedUnicastBytes SentBroadcastBytes SentBytes SentMulticastBytes SentUnicastBytes
-------                    ------                                   ---------------------- ------------- ---------------------- -------------------- ------------------ --------- ------------------ ----------------
Wi-Fi                      TP-Link Wireless MU-MIMO USB Adapter                     165737      45457502                3442326             41849439              15522   7323687              29867          7278298
Ethernet                   Intel(R) Ethernet Connection (5) I219-LM                 255975    1341319965                3940872           1333332810              24848  41753570              53768         37120901
vEthernet (Default Switch) Hyper-V Virtual Ethernet Adapter                              0      73194187                      0                    0                  0  13806425                  0                0

ifAlias                    ifDesc                                   ReceivedBroadcastBytes ReceivedBytes ReceivedMulticastBytes ReceivedUnicastBytes SentBroadcastBytes SentBytes SentMulticastBytes SentUnicastBytes
-------                    ------                                   ---------------------- ------------- ---------------------- -------------------- ------------------ --------- ------------------ ----------------
vEthernet (Default Switch) Hyper-V Virtual Ethernet Adapter                              0        409683                      0                    0                  0    146530                  0                0
Ethernet                   Intel(R) Ethernet Connection (5) I219-LM                  20920        415619                 106302               282461               4172    154016               4768           137070
Wi-Fi                      TP-Link Wireless MU-MIMO USB Adapter                       1656         63502                  26581                35265               1920     11968                692             9356

####
Get-Counter -ListSet * | select countersetname | where countersetname -match 'ipv'
$paths = (Get-Counter -ListSet ipv4).paths
Get-Counter -Counter $paths
See c:\home\txt\w\WindowsAdminCenter.txt


(see output at the bottom of this file) 
##############################################################

#############################################################
# https://www.securitylearninghub.com/#!powershell.md

# Network Adapters
# Get-NetAdapter -Includehidden
Get-NetAdapter -Includehidden
PS C:\Users\alexe> Get-NetAdapter -Includehidden | ft -auto

Name                                  InterfaceDescription                     ifIndex Status       MacAddress        LinkSpeed
----                                  --------------------                     ------- ------       ----------        ---------
Local Area Connection* 5              WAN Miniport (IPv6)                           24 Up                                 0 bps
Ethernet Kaspersky                    Kaspersky Security Data Escort Adapter        23 Disconnected 00-FF-F1-45-1B-15  100 Mbps
Local Area Connection* 6              WAN Miniport (PPPOE)                          22 Disconnected                       0 bps
vSwitch (NatInternal)                 Hyper-V Virtual Switch Extension Adapter      21 Up                               10 Gbps
Local Area Connection* 1              WAN Miniport (IKEv2)                          20 Disconnected                       0 bps
vEthernet (Default Switch)            Hyper-V Virtual Ethernet Adapter              60 Up           00-15-5D-23-EC-74   10 Gbps
Wi-Fi                                 TP-Link Wireless MU-MIMO USB Adapter          18 Up           98-48-27-E3-58-63  520 Mbps
Local Area Connection* 8              WAN Miniport (SSTP)                           17 Disconnected                       0 bps
Teredo Tunneling Pseudo-Interface                                                   16 Not Present                        0 bps
Local Area Connection* 4              WAN Miniport (IP)                             14 Up                                 0 bps
vSwitch (ExternalSwitch)              Hyper-V Virtual Switch Extension A...#2       13 Up                               10 Gbps
Local Area Connection* 7              WAN Miniport (PPTP)                           12 Disconnected                       0 bps
Bluetooth Network Connection          Bluetooth Device (Personal Area Network)      11 Disconnected 00-1A-7D-B2-10-86    3 Mbps
vSwitch (Default Switch)              Hyper-V Virtual Switch Extension A...#3       58 Up                               10 Gbps
Local Area Connection* 2              WAN Miniport (L2TP)                           10 Disconnected                       0 bps
Microsoft IP-HTTPS Platform Interface                                                9 Not Present                        0 bps
Ethernet                              Intel(R) Ethernet Connection (5) I219-LM       8 Up           A4-BB-6D-D6-F4-75    1 Gbps
Ethernet (Kernel Debugger)            Microsoft Kernel Debug Network Adapter         7 Not Present                        0 bps
Local Area Connection* 9              Microsoft Wi-Fi Direct Virtual Adapter         6 Disconnected 9A-48-27-E3-58-63     0 bps
Local Area Connection* 3              WAN Miniport (Network Monitor)                 5 Up                                 0 bps
VirtualBox Host-Only Network          VirtualBox Host-Only Ethernet Adapter          4 Not Present  0A-00-27-00-00-04     0 bps
6to4 Adapter                                                                         3 Not Present                        0 bps
Local Area Connection* 10             Microsoft Wi-Fi Direct Virtual Ada...#2        2 Disconnected 98-48-27-E3-58-63     0 bps

# List IPv4 and IPv6 addresses for all interfaces (replaces ipconfig.exe):
# Get-NetIPAddress
PS C:\Users\alexe> Get-NetIPAddress | ft -auto

ifIndex IPAddress                   PrefixLength PrefixOrigin SuffixOrigin AddressState PolicyStore
------- ---------                   ------------ ------------ ------------ ------------ -----------
60      fe80::d58:1d89:448a:8df1%60           64 WellKnown    Link         Preferred    ActiveStore
1       ::1                                  128 WellKnown    WellKnown    Preferred    ActiveStore
23      169.254.5.69                          16 WellKnown    Link         Tentative    ActiveStore
60      172.21.32.1                           20 Manual       Manual       Preferred    ActiveStore
2       169.254.82.117                        16 WellKnown    Link         Tentative    ActiveStore
6       169.254.107.88                        16 WellKnown    Link         Tentative    ActiveStore
11      169.254.214.20                        16 WellKnown    Link         Tentative    ActiveStore
18      192.168.1.194                         24 Dhcp         Dhcp         Preferred    ActiveStore
1       127.0.0.1                              8 WellKnown    WellKnown    Preferred    ActiveStore
# 

###################################################################
# TCP connections 
netstat -o -n
netsh interface ipv4 show tcpconnections
# List TCP connections and TCP listening ports (replaces netstat.exe):
Get-NetTCPConnection | ? RemoteAddress -ne '127.0.0.1' | Sort -Desc State,LocalPort
Get-NetTCPConnection -State Listen,Established -ea 0 | ? RemoteAddress -ne '127.0.0.1' | Sort State
Get-NetTCPConnection -State Listen,Established -AppliedSetting Internet -ea 0 | Sort State

# List UDP listening ports (replaces netstat.exe):
Get-NetUdpEndpoint

# View the local route table (replaces route.exe):
Get-Netroute

# Resolve a DNS host name (replaces nslookup.exe): #This is not usually necessary.
 Resolve-DnsName -Name $env:computername -server 127.0.0.1

# View the ARP cache (replaces arp.exe):
Get-NetNeighbor

# Ping a destination IP address or host name (replaces ping.exe):
Test-NetConnection -ComputerName $env:computername


# Trace the IP route to a destination through a path of routers (replaces tracert.exe):
Test-NetConnection -ComputerName $env:computername -Traceroute
<#  WARNING: Trace route to destination fe80::d58:1d89:448a:8df1%60 did not complete. Trace terminated :: fe80::d58:1d89:448a:8df1
	ComputerName           : WIN11-2
	RemoteAddress          : fe80::d58:1d89:448a:8df1%60
	InterfaceAlias         : vEthernet (Default Switch)
	SourceAddress          : fe80::d58:1d89:448a:8df1%60
	PingSucceeded          : True
	PingReplyDetails (RTT) : 0 ms
	TraceRoute             : fe80::d58:1d89:448a:8df1
#>


# Conduct Port Scan:
 1..1024 | % {echo ((new-object Net.Sockets.TcpClient).Connect("10.10.10.10",$_ )) "Port $ is open!"} 2>$null
 
 
# Test access to a TCP port and show the governing IPSec rule (like a port scanner):
Test-NetConnection -Computer $env:computername -Port 80 -Info detailed
<#
ComputerName            : WIN11-2
RemoteAddress           : fe80::d58:1d89:448a:8df1%60
RemotePort              : 80
NameResolutionResults   : fe80::d58:1d89:448a:8df1%60
                          192.168.1.194
                          172.21.32.1
MatchingIPsecRules      :
NetworkIsolationContext : Internet
InterfaceAlias          : vEthernet (Default Switch)
SourceAddress           : fe80::d58:1d89:448a:8df1%60
NetRoute (NextHop)      : ::
TcpTestSucceeded        : True

#>

# Assign primary and secondary DNS servers to an interface with index number 38 (but don't do it now, example only):
set-dnsclientserveraddress -InterfaceIndex 38 -serveraddresses @("10.18.1.5","10.18.1.6")

# Display the connection profile (Public, Private, Domain) for each interface:
Get-NetConnectionProfile | Format-Table InterfaceAlias,NetworkCategory
InterfaceAlias NetworkCategory
-------------- ---------------
Wi-Fi                  Private

# Firewall
Get-NetFirewallProfile
netsh advfirewall show currentprofile

# Start a process from CLI with powershell:
start-process wireshark

# Sortable firewall rule list
Get-NetFirewallRule -all | Out-GridView
Get-NetFirewallRule -DisplayGroup Remote* -Enabled True | Out-GridView
Get-NetFirewallRule -DisplayName Remote* | Out-GridView

#####################
# Create an inbound firewall rule to block access to TCP port 3666:
# This new rule can now be seen in the graphical Windows Firewall snap-in.
new-NetFireWallrule -displayname "Drop APT Back Door" -direction inbound –localport 3666 -protocol tcp -action block

#########################
# Delete a firewall rule by its display name:
remove-NetFireWallrule -displayname "Drop APT Back Door"

#####################
# Routing Tables
# netsh interface 

PS C:\Users\alexe> netsh interface ipv6 show route
PS C:\Users\alexe> netsh interface ipv4 show route

######################
## Command to delete active connections
Net Use * /delete

######################################
# IP interfaces 
# Get-NetIPAddress

PS C:\Users\alexe> Get-NetIPAddress | ft InterfaceIndex,InterfaceAlias,AddressState,IPAddress,PrefixLength,Type

PS C:\Users\alexe> Get-NetIPConfiguration | ft InterfaceIndex,InterfaceAlias,AllIPAddresses,InterfaceDescription

InterfaceIndex InterfaceAlias               AllIPAddresses                             InterfaceDescription
-------------- --------------               --------------                             --------------------
            60 vEthernet (Default Switch)   {172.21.32.1, fe80::d58:1d89:448a:8df1%60} Hyper-V Virtual Ethernet Adapter
            18 Wi-Fi                        {192.168.1.194}                            TP-Link Wireless MU-MIMO USB Adapter
            23 Ethernet Kaspersky           {169.254.5.69}                             Kaspersky Security Data Escort Adapter
            11 Bluetooth Network Connection {169.254.214.20}                           Bluetooth Device (Personal Area Network)

PS C:\Users\alexe> Get-NetIPConfiguration | fl InterfaceIndex,InterfaceAlias,InterfaceDescription,DNSServer,NetProfile,IPv4DefaultGateway,IPv4Address,NetIPv4Interface,IPv6Address,IPv6LinkLocalAddress,IPv6DefaultGateway,NetIPv6Interface

#####################################################
# Get Computer's Default Internet Ip-Address
PS C:\Users\alexe> (Get-WmiObject -Class Win32_NetworkAdapterConfiguration | where {$_.DHCPEnabled -ne $null -and $_.DefaultIPGateway -ne $null}).IPAddress | Select-Object 
192.168.1.194


#########################################################
# Get Computer's Default Internet Network Configuration
PS C:\Users\alexe> (Get-WmiObject -Class Win32_NetworkAdapterConfiguration | where {$_.DHCPEnabled -ne $null -and $_.DefaultIPGateway -ne $null}) | Select-Object
DHCPEnabled      : True
IPAddress        : {192.168.1.194}
DefaultIPGateway : {192.168.1.1}
DNSDomain        : alex.home
ServiceName      : RtlWlanu
Description      : TP-Link Wireless MU-MIMO USB Adapter
Index            : 1


##########################
# Test Connection ( Ping )
PS C:\Users\alexe> Test-Connection -ComputerName (hostname) -Count 1
   Destination: Win11-2
Ping Source           Address                   Latency BufferSize Status
                                                   (ms)        (B)
---- ------           -------                   ------- ---------- ------
   1 Win11-2          fe80::d58:1d89:448a:8df1        0         32 Success

PS C:\Users\alexe> Test-Connection -IPv4 -ComputerName (hostname) -Count 1
   Destination: Win11-2
Ping Source           Address                   Latency BufferSize Status
                                                   (ms)        (B)
---- ------           -------                   ------- ---------- ------
   1 Win11-2          192.168.1.194                   0         32 Success
   
#############################################################
# Network adapters
PS C:\home\src\Scripts> Get-NetAdapter
## 4/13
Name                      InterfaceDescription                    ifIndex Status       MacAddress             LinkSpeed
----                      --------------------                    ------- ------       ----------             ---------
Ethernet Kaspersky        Kaspersky Security Data Escort Adapter       23 Disconnected 00-FF-F1-45-1B-15       100 Mbps
vEthernet (Default Switc… Hyper-V Virtual Ethernet Adapter             58 Up           00-15-5D-23-EC-74        10 Gbps
Wi-Fi                     TP-Link Wireless MU-MIMO USB Adapter         18 Up           98-48-27-E3-58-63       585 Mbps
Bluetooth Network Connec… Bluetooth Device (Personal Area Networ…      12 Disconnected 00-1A-7D-B2-10-86         3 Mbps
Ethernet                  Intel(R) Ethernet Connection (5) I219-…       8 Up           A4-BB-6D-D6-F4-75         1 Gbps
VirtualBox Host-Only Net… VirtualBox Host-Only Ethernet Adapter         4 Up           0A-00-27-00-00-04         1 Gbps

Get-NetAdapter -Includehidden
PS C:\Users\alexe> Get-NetAdapter -Includehidden | ft -auto

Name                                  InterfaceDescription                     ifIndex Status       MacAddress        LinkSpeed
----                                  --------------------                     ------- ------       ----------        ---------
Local Area Connection* 5              WAN Miniport (IPv6)                           24 Up                                 0 bps
Ethernet Kaspersky                    Kaspersky Security Data Escort Adapter        23 Disconnected 00-FF-F1-45-1B-15  100 Mbps
Local Area Connection* 6              WAN Miniport (PPPOE)                          22 Disconnected                       0 bps
vSwitch (NatInternal)                 Hyper-V Virtual Switch Extension Adapter      21 Up                               10 Gbps
Local Area Connection* 1              WAN Miniport (IKEv2)                          20 Disconnected                       0 bps
vEthernet (Default Switch)            Hyper-V Virtual Ethernet Adapter              60 Up           00-15-5D-23-EC-74   10 Gbps
Wi-Fi                                 TP-Link Wireless MU-MIMO USB Adapter          18 Up           98-48-27-E3-58-63  520 Mbps
Local Area Connection* 8              WAN Miniport (SSTP)                           17 Disconnected                       0 bps
Teredo Tunneling Pseudo-Interface                                                   16 Not Present                        0 bps
Local Area Connection* 4              WAN Miniport (IP)                             14 Up                                 0 bps
vSwitch (ExternalSwitch)              Hyper-V Virtual Switch Extension A...#2       13 Up                               10 Gbps
Local Area Connection* 7              WAN Miniport (PPTP)                           12 Disconnected                       0 bps
Bluetooth Network Connection          Bluetooth Device (Personal Area Network)      11 Disconnected 00-1A-7D-B2-10-86    3 Mbps
vSwitch (Default Switch)              Hyper-V Virtual Switch Extension A...#3       58 Up                               10 Gbps
Local Area Connection* 2              WAN Miniport (L2TP)                           10 Disconnected                       0 bps
Microsoft IP-HTTPS Platform Interface                                                9 Not Present                        0 bps
Ethernet                              Intel(R) Ethernet Connection (5) I219-LM       8 Up           A4-BB-6D-D6-F4-75    1 Gbps
Ethernet (Kernel Debugger)            Microsoft Kernel Debug Network Adapter         7 Not Present                        0 bps
Local Area Connection* 9              Microsoft Wi-Fi Direct Virtual Adapter         6 Disconnected 9A-48-27-E3-58-63     0 bps
Local Area Connection* 3              WAN Miniport (Network Monitor)                 5 Up                                 0 bps
VirtualBox Host-Only Network          VirtualBox Host-Only Ethernet Adapter          4 Not Present  0A-00-27-00-00-04     0 bps
6to4 Adapter                                                                         3 Not Present                        0 bps

####################################
# disable - enable WAN miniport with command prompt?
# Check :  Get-NetAdapter -Includehidden | ft -auto
# "FriendlyName" is  Get-NetAdapter's InterfaceDescription column

# enable
Get-PnpDevice -FriendlyName 'WAN Miniport (PPPOE)' | Enable-PnpDevice -Confirm:$false
Get-PnpDevice -FriendlyName 'WAN Miniport (IP)'    | Enable-PnpDevice -Confirm:$false
Get-PnpDevice -FriendlyName 'AN Miniport (Network Monitor)'    | Enable-PnpDevice -Confirm:$false
# disable
Get-PnpDevice -FriendlyName 'WAN Miniport (PPPOE)' | Disable-PnpDevice -Confirm:$false
Get-PnpDevice -FriendlyName 'WAN Miniport (IP)'    | Disable-PnpDevice -Confirm:$false
Get-PnpDevice -FriendlyName 'WAN Miniport (Network Monitor)'    | Disable-PnpDevice -Confirm:$false


###############################################################
# NetAdapter AdvancedProperty 
# 
Get-NetAdapterAdvancedProperty |? DisplayValue -ne Disabled | ft -auto
Get-NetAdapterAdvancedProperty |? Name -like vEtherne*  | ft -auto
Get-NetAdapterBinding |? Name -like vEtherne*

#########################################################
# TCP/IPv6 Internet Protocol Version 6
# Get-NetAdapterBinding -IncludeHidden -DisplayName '*IPv6*'
# Get-NetAdapterBinding -IncludeHidden -ComponentID ms_tcpip6
# Get-NetAdapterBinding -AllBindings -IncludeHidden  |? ComponentID -like ms_netbios |  Disable-NetAdapterBinding
Get-NetAdapterBinding -IncludeHidden -ComponentID ms_tcpip6 |  Disable-NetAdapterBinding

Name                           DisplayName                                        ComponentID          Enabled
----                           -----------                                        -----------          -------
Ethernet Kaspersky             Internet Protocol Version 6 (TCP/IPv6)             ms_tcpip6            False
vEthernet (Default Switch)     Internet Protocol Version 6 (TCP/IPv6)             ms_tcpip6            True
Wi-Fi                          Internet Protocol Version 6 (TCP/IPv6)             ms_tcpip6            False
Teredo Tunneling Pseudo-Inter… Internet Protocol Version 6 (TCP/IPv6)             ms_tcpip6            True
Bluetooth Network Connection   Internet Protocol Version 6 (TCP/IPv6)             ms_tcpip6            False
Microsoft IP-HTTPS Platform I… Internet Protocol Version 6 (TCP/IPv6)             ms_tcpip6            True
Ethernet                       Internet Protocol Version 6 (TCP/IPv6)             ms_tcpip6            False
Ethernet (Kernel Debugger)     Internet Protocol Version 6 (TCP/IPv6)             ms_tcpip6            True
Local Area Connection* 9       Internet Protocol Version 6 (TCP/IPv6)             ms_tcpip6            True
VirtualBox Host-Only Network   Internet Protocol Version 6 (TCP/IPv6)             ms_tcpip6            False
6to4 Adapter                   Internet Protocol Version 6 (TCP/IPv6)             ms_tcpip6            True
Local Area Connection* 10      Internet Protocol Version 6 (TCP/IPv6)             ms_tcpip6            True


PS C:\Windows\System32> Get-NetAdapterBinding -IncludeHidden -ComponentID ms_tcpip6 |  ? Enabled -like True

Name                           DisplayName                                        ComponentID          Enabled
----                           -----------                                        -----------          -------
Local Area Connection          Internet Protocol Version 6 (TCP/IPv6)             ms_tcpip6            True
Bluetooth Network Con...2      Internet Protocol Version 6 (TCP/IPv6)             ms_tcpip6            True
Ethernet (Kernel Debugger)     Internet Protocol Version 6 (TCP/IPv6)             ms_tcpip6            True
Teredo Tunneling Pseudo-Inter… Internet Protocol Version 6 (TCP/IPv6)             ms_tcpip6            True
vEthernet (Default Switch)     Internet Protocol Version 6 (TCP/IPv6)             ms_tcpip6            True
Local Area Connection* 3       Internet Protocol Version 6 (TCP/IPv6)             ms_tcpip6            True
Local Area Connection* 2       Internet Protocol Version 6 (TCP/IPv6)             ms_tcpip6            True
Microsoft IP-HTTPS Platform I… Internet Protocol Version 6 (TCP/IPv6)             ms_tcpip6            True
6to4 Adapter                   Internet Protocol Version 6 (TCP/IPv6)             ms_tcpip6            True
vEthernet (Wi-Fi 2)            Internet Protocol Version 6 (TCP/IPv6)             ms_tcpip6            True

PS C:\Windows\System32> Get-NetAdapterBinding -IncludeHidden -ComponentID ms_tcpip6 |  ? Enabled -like True |  Disable-NetAdapterBinding
PS C:\Windows\System32> Get-NetAdapterBinding -IncludeHidden -ComponentID ms_tcpip6 |  ? Enabled -like True
# nothing

PS C:\Windows\System32> Get-NetAdapterBinding -AllBindings -IncludeHidden  |? DisplayName -like *version*6*Tunnel* | ? Enabled -like True

Name                           DisplayName                                        ComponentID          Enabled
----                           -----------                                        -----------          -------
Teredo Tunneling Pseudo-Inter… Microsoft TCP/IP version 6 - Tunnels               ms_tcpip6_tunnel     True
Microsoft IP-HTTPS Platform I… Microsoft TCP/IP version 6 - Tunnels               ms_tcpip6_tunnel     True
6to4 Adapter                   Microsoft TCP/IP version 6 - Tunnels               ms_tcpip6_tunnel     True


Get-NetAdapterBinding -AllBindings -IncludeHidden  |? DisplayName -like *version*6*Tunnel* | ? Enabled -like True |  Disable-NetAdapterBinding
PS C:\Windows\System32> Get-NetAdapterBinding -AllBindings -IncludeHidden  |? DisplayName -like *version*6*Tunnel* | ? Enabled -like True |  Disable-NetAdapterBinding
PS C:\Windows\System32> Get-NetAdapterBinding -AllBindings -IncludeHidden  |? DisplayName -like *version*6*Tunnel* | ? Enabled -like True
# nothing

Name                           DisplayName                                        ComponentID          Enabled
----                           -----------                                        -----------          -------
Teredo Tunneling Pseudo-Inter… Microsoft TCP/IP version 6 - Tunnels               ms_tcpip6_tunnel     True
Microsoft IP-HTTPS Platform I… Microsoft TCP/IP version 6 - Tunnels               ms_tcpip6_tunnel     True
6to4 Adapter                   Microsoft TCP/IP version 6 - Tunnels               ms_tcpip6_tunnel     True



##########################################
# NetBIOS Interface
Get-NetAdapterBinding -AllBindings -IncludeHidden  |? DisplayName -like Net*
Name                           DisplayName                                        ComponentID          Enabled
----                           -----------                                        -----------          -------
Ethernet Kaspersky             NetBIOS Interface                                  ms_netbios           True
vEthernet (Default Switch)     NetBIOS Interface                                  ms_netbios           True
Wi-Fi                          NetBIOS Interface                                  ms_netbios           True
Teredo Tunneling Pseudo-Inter… NetBIOS Interface                                  ms_netbios           False
Bluetooth Network Connection   NetBIOS Interface                                  ms_netbios           True
Microsoft IP-HTTPS Platform I… NetBIOS Interface                                  ms_netbios           False
Ethernet                       NetBIOS Interface                                  ms_netbios           False
Ethernet (Kernel Debugger)     NetBIOS Interface                                  ms_netbios           True
Local Area Connection* 9       NetBIOS Interface                                  ms_netbios           True
VirtualBox Host-Only Network   NetBIOS Interface                                  ms_netbios           True
6to4 Adapter                   NetBIOS Interface                                  ms_netbios           False
Local Area Connection* 10      NetBIOS Interface                                  ms_netbios           True

# does not work : Get-NetAdapterBinding -IncludeHidden -ComponentID ms_netbios |  Disable-NetAdapterBinding
Get-NetAdapterBinding -AllBindings -IncludeHidden  |? ComponentID -like ms_netbios |  Disable-NetAdapterBinding #works!


#####################
# Win32_NetworkAdapterConfiguration WINS configuration
# TcpipNetbios

Get-NetAdapterBinding -AllBindings -IncludeHidden  |? DisplayName -like *WINS* |? Enabled -like True  | Disable-NetAdapterBinding
Name                           DisplayName                                        ComponentID          Enabled
----                           -----------                                        -----------          -------
Ethernet Kaspersky             WINS Client(TCP/IP) Protocol                       ms_netbt             True
vEthernet (Default Switch)     WINS Client(TCP/IP) Protocol                       ms_netbt             True
Wi-Fi                          WINS Client(TCP/IP) Protocol                       ms_netbt             True
Wi-Fi                          @%windir%\System32\drivers\vwififlt.sys,-105       ms_vwifi             True
Bluetooth Network Connection   WINS Client(TCP/IP) Protocol                       ms_netbt             True
Ethernet (Kernel Debugger)     WINS Client(TCP/IP) Protocol                       ms_netbt             True
Local Area Connection* 9       WINS Client(TCP/IP) Protocol                       ms_netbt             True
VirtualBox Host-Only Network   WINS Client(TCP/IP) Protocol                       ms_netbt             True
Local Area Connection* 10      WINS Client(TCP/IP) Protocol                       ms_netbt             True

Get-NetAdapterBinding -AllBindings -IncludeHidden  |? DisplayName -like *WINS* |? Enabled -like True

## Alternatibe search 
Get-CimInstance -ClassName Win32_NetworkAdapterConfiguration | ft -auto DHCPEnabled,IPAddress,DefaultIPGateway,ServiceName,Description,Index,WINSPrimaryServer,IPSubnet,TcpipNetbiosOptions
Get-WmiObject -Class Win32_NetworkAdapterConfiguration | ft -auto DHCPEnabled,IPAddress,DefaultIPGateway,ServiceName,Description,Index,WINSPrimaryServer,IPSubnet

Get-CimInstance -ClassName Win32_NetworkAdapterConfiguration  | gm | ? Name -like *BIOS*
   TypeName: Microsoft.Management.Infrastructure.CimInstance#root/cimv2/Win32_NetworkAdapterConfiguration
Name                MemberType Definition
----                ---------- ----------
TcpipNetbiosOptions Property   uint TcpipNetbiosOptions {get;}


Get-CimInstance -ClassName Win32_NetworkAdapterConfiguration | ft -auto @{n='DHCP';e={$_.DHCPEnabled}},
  @{n='IP';e={$_.IPAddress}},@{n='IPGateway';e={$_.DefaultIPGateway}},
  ServiceName,Description,Index,IPSubnet,
  @{n='NetBios';e={$_.TcpipNetbiosOptions}},
  @{n='WINSLookup';e={$_.WINSEnableLMHostsLookup}},
  @{n='DnsWinsReslv';e={$_.DNSEnabledForWINSResolution}}, 

Get-CimInstance -ClassName Win32_NetworkAdapterConfiguration | ft -auto ServiceName,Description,Index,
@{n='ifIndex';e={$_.InterfaceIndex}},
IPEnabled, 
@{n='IP';e={$_.IPAddress}},
@{n='IPGateway';e={$_.DefaultIPGateway}}, 
IPSubnet, MACAddress, 
@{n='DHCP';e={$_.DHCPEnabled}}, DHCPServer,
@{n='NetBios';e={$_.TcpipNetbiosOptions}},
@{n='WINSLookup';e={$_.WINSEnableLMHostsLookup}},
@{n='DnsWinsReslv';e={$_.DNSEnabledForWINSResolution}},
@{n='IPFilt';e={$_.IPFilterSecurityEnabled}},DNSHostName # ,SettingID,Caption


###############################################################################
#  enable or disable LMHOSTS Lookup with the help of the following methods
Get-CimInstance -ClassName Win32_NetworkAdapterConfiguration | select WINS | ft -auto


# Get-CimInstance -ClassName Win32_NetworkAdapterConfiguration  | select * | Out-GridView


# does not work !?
# $DisableLMHosts_Class=Get-WmiObject -list Win32_NetworkAdapterConfiguration
# $DisableLMHosts_Class.EnableWINS($false,$false)


#####################
# How to rename Nic
# Admin required
 Get-NetAdapter -InterfaceIndex 16 | Rename-NetAdapter -NewName 'Sales iSCSI VLAN' Get-NetAdapter -InterfaceIndex 16 | Rename-NetAdapter -NewName 'Sales iSCSI VLAN'
 
 

##########
# ServicePointManager
# Having trouble installing for finding things from the PowerShell Gallery or GitHub? Add this line to your PowerShell profile script: 
 
[Net.ServicePointManager]::SecurityProtocol=[Net.SecurityProtocolType]::Tls12
 
###########################
# Get-MyCounter is an enhanced version of Get-Counter, 
# which is available on Windows platforms to retrieve performance counter data. 
# One of the challenges with Get-Counter is how it formats results. 
# Get-MyCounter takes the same information and writes a custom object to the pipeline that is easier to work with. You can pipe counters from Get-Counter to this command.

   Computername: WIN11-2

Timestamp            Category                                                    Counter                      Value
---------            --------                                                    -------                      -----
5/13/2022 6:36:36 PM network interface(intel[r] ethernet connection [5] i219-lm) bytes total/sec           406.4969
5/13/2022 6:36:36 PM network interface(tp-link wireless mu-mimo usb adapter)     bytes total/sec           398.5652
5/13/2022 6:36:36 PM processor(_total)                                           % processor time             2.004
5/13/2022 6:36:36 PM memory                                                      % committed bytes in use   16.6526
5/13/2022 6:36:36 PM memory                                                      cache faults/sec            0.9915
5/13/2022 6:36:36 PM physicaldisk(_total)                                        % disk time                 0.0913
5/13/2022 6:36:36 PM physicaldisk(_total)                                        current disk queue length        0

PS C:\Users\alexe> Get-Counter -list IPV4 | Get-MyCounter

   Computername: WIN11-2

Timestamp            Category Counter                              Value
---------            -------- -------                              -----
5/13/2022 6:37:28 PM ipv4     datagrams/sec                        5.906
5/13/2022 6:37:28 PM ipv4     datagrams received/sec              1.9687
5/13/2022 6:37:28 PM ipv4     datagrams received header errors         0
5/13/2022 6:37:28 PM ipv4     datagrams received address errors     7124
5/13/2022 6:37:28 PM ipv4     datagrams forwarded/sec                  0
5/13/2022 6:37:28 PM ipv4     datagrams received unknown protocol    727
5/13/2022 6:37:28 PM ipv4     datagrams received discarded           340
5/13/2022 6:37:28 PM ipv4     datagrams received delivered/sec     5.906
5/13/2022 6:37:28 PM ipv4     datagrams sent/sec                  3.9373
5/13/2022 6:37:28 PM ipv4     datagrams outbound discarded             7
5/13/2022 6:37:28 PM ipv4     datagrams outbound no route              0
5/13/2022 6:37:28 PM ipv4     fragments received/sec                   0
5/13/2022 6:37:28 PM ipv4     fragments re-assembled/sec               0
5/13/2022 6:37:28 PM ipv4     fragment re-assembly failures            0
5/13/2022 6:37:28 PM ipv4     fragmented datagrams/sec                 0
5/13/2022 6:37:28 PM ipv4     fragmentation failures                   0
5/13/2022 6:37:28 PM ipv4     fragments created/sec                    0



##########
# The Get-HotFix cmdlet can get used to view hotfix information such as listing all installed hotfixes:
Get-HotFix
Get-HotFix | fl

################################################
# How to send output to a file

Get-Process -Name p* | Set-Content -Path C:\home\tmp\Get-Process.txt
Get-Content -Path C:\home\tmp\Get-Process.txt
<#
System.Diagnostics.Process (plugins_nms)
System.Diagnostics.Process (powershell)
System.Diagnostics.Process (pwsh)
#>

############################################
# Using Out-String
# You can improve the output from Set-Content by using Out-String, like this
Get-Process -Name p* | Out-String | Set-Content C:\home\tmp\Get-Process.txt
Get-Content -Path C:\home\tmp\Get-Process.txt
<#
 NPM(K)    PM(M)      WS(M)     CPU(s)      Id  SI ProcessName
 ------    -----      -----     ------      --  -- -----------
     12     2.68       9.50       0.75   17880   1 plugins_nms
     30    65.43      78.31       0.73   16208   1 powershell
    111   125.08     177.77      11.59   18120   1 pwsh
#>

############################################
# Using Out-File 
# The Out-File cmdlet gives you control over the output that PowerShell composes and sends to the file.
Get-Process -Name p* | Out-File -Path C:\home\tmp\Get-Process.txt
Get-Content -Path C:\home\tmp\Get-Process.txt

# The Redirection Operators
# There are two PowerShell operators you can use to redirect output: > and >>. 
# The > operator is equivalent to Out-File while >> is equivalent to Out-File -Append. 

# Using .NET Classes

# BinaryWriter – Writes primitive types in binary to a stream.
# StreamWriter – writes characters to a stream in a particular encoding.
# StringWriter – writes information to a string. With this class, Powershell stores the string information in a StringBuilder object.
# Of these three, the class you are most likely to use to send output to a file is the StreamWriter class. Like this:
# Get the directories in C:\
$Dirs = Get-ChildItem -Path C:\ -Directory
# Open a stream writer
$File   = 'C:\Foo\Dirs.txt'
$Stream = [System.IO.StreamWriter]::new($File)
# Write the folder names for these folders to the file
foreach($Dir in $Dirs) {
  $Stream.WriteLine($Dir.FullName)
}
# Close the stream
$Stream.Close()

# You can use Get-Content to view the generated content, like this:

PS> Get-Content -Path c:\Foo\Dirs.txt
C:\AUDIT
C:\Boot
C:\Foo
C:\inetpub
C:\jea
C:\NVIDIA
C:\PerfLogs
C:\Program Files
C:\Program Files (x86)
C:\PSDailyBuild
C:\ReskitApp
C:\Temp
C:\Users
C:\WINDOWS



###################################
## New-TemporaryFile Cmdlet

$File = New-TemporaryFile      # 	Create
Remove-Item -path $File -force # 	Remove

"$($Env:temp)\tmp$([convert]::tostring((get-random 65535),16).padleft(4,'0')).tmp"

Function New-TemporaryFolder {
    # Make a new folder based upon a TempFileName
    $T="$($Env:temp)\tmp$([convert]::tostring((get-random 65535),16).padleft(4,'0')).tmp"
    New-Item -ItemType Directory -Path $T
}



###################################
## Is the User an Administrator?

$Me = whoami.exe
$Admins = Get-LocalGroupMember -Name Administrators | Select-Object -ExpandProperty name
if ($Admins -Contains $Me) { "$Me is a local administrator"}  else { "$Me is NOT a local administrator"}


###################################
## String to Upper case
$Prompt = 'Enter Your Name In ALL Upper Case'
$Prompt
$Prompt.ToUpper()

#####################################
# Read File

$ColorsText = @'
violet
indigo
blue
green
yellow
orange
red
'@

$FileName="C:\home\tmp\ColorsFoo.txt"
$ColorsText | Out-File -Path $FileName
Get-ChildItem -Path $FileName

# Once you have created the file, you can get the contents and display it, like this:
$ArrayData = Get-Content -Path $FileName
$ArrayData

$FileName="C:\home\tmp\ColorsFoo.txt"
$ArrayData = Get-Content -Path $FileName
$Length = $ArrayData.count
"There are $Length lines in the file"
$ArrayData

# Printing a text file bottom up
$Line=1
1..$Length | ForEach-Object {$ArrayData[-$Line]; $Line++}


############################################################
## Skip the beginning and ending of a file by using 
#
$a= Get-Content "C:\home\tmp\ColorsFoo.txt"
$array = @()
for ($i = 0; $i -lt $a.Count; $i++) {
    If ($a[$i] -cmatch "indigo" ) { $start=$i }
    If ($a[$i] -cmatch "orange")  { $end=$i }
}
$a[$start .. $end]

################################################
# get-Process alias gps

gps | group name | ? count -gt 1 | ft



################################################
# List all available CIM classes by using 
Get-CimClass Win32*Disk*


##########################################################################
# Changing Drive Letter
$Drive = Get-CimInstance -ClassName Win32_Volume -Filter "DriveLetter = 'M:'"
$Drive | Set-CimInstance -Property @{DriveLetter ='X:'}

 
##################################################################
# Out String 
# Use the Width parameter to prevent truncation.

PS> @{TestKey = ('x' * 200)} | Out-String
Name                           Value
----                           -----
TestKey                        xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx

PS> @{TestKey = ('x' * 200)} | Out-String -Width 250
Name                           Value
----                           -----
TestKey                        xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx

##################################################################
# Out-file
# Set file output width for entire scope
 $PSDefaultParameterValues['out-file:width'] = 2000

#############################################################
# Get a date string in the format year-month-day-hour-min-second. The abbreviations in the format string are case-sensitive.
#
get-date -format yyyyMMddhhmmss


####################################################################
# Network Details on 5/13/2022
####################################################################
# Routing Table

PS C:\Users\alexe> netsh interface ipv6 show route

Publish  Type      Met  Prefix                    Idx  Gateway/Interface Name
-------  --------  ---  ------------------------  ---  ------------------------
No       System    256  ::1/128                     1  Loopback Pseudo-Interface 1
No       System    256  fe80::/64                   6  Local Area Connection* 9
No       System    256  fe80::/64                   2  Local Area Connection* 10
No       System    256  fe80::/64                  60  vEthernet (Default Switch)
No       System    256  fe80::d58:1d89:448a:8df1/128   60  vEthernet (Default Switch)
No       System    256  fe80::7d09:cbf0:948b:5275/128    2  Local Area Connection* 10
No       System    256  fe80::fc19:4450:d531:6b58/128    6  Local Area Connection* 9
No       System    256  ff00::/8                    1  Loopback Pseudo-Interface 1
No       System    256  ff00::/8                    6  Local Area Connection* 9
No       System    256  ff00::/8                    2  Local Area Connection* 10
No       System    256  ff00::/8                   60  vEthernet (Default Switch)

PS C:\Users\alexe> netsh interface ipv4 show route

Publish  Type      Met  Prefix                    Idx  Gateway/Interface Name
-------  --------  ---  ------------------------  ---  ------------------------
No       Manual    0    0.0.0.0/0                  18  192.168.1.1
No       System    256  127.0.0.0/8                 1  Loopback Pseudo-Interface 1
No       System    256  127.0.0.1/32                1  Loopback Pseudo-Interface 1
No       System    256  127.255.255.255/32          1  Loopback Pseudo-Interface 1
No       System    256  172.21.32.0/20             60  vEthernet (Default Switch)
No       System    256  172.21.32.1/32             60  vEthernet (Default Switch)
No       System    256  172.21.47.255/32           60  vEthernet (Default Switch)
No       System    256  192.168.1.0/24             18  Wi-Fi
No       System    256  192.168.1.194/32           18  Wi-Fi
No       System    256  192.168.1.255/32           18  Wi-Fi
No       System    256  224.0.0.0/4                 1  Loopback Pseudo-Interface 1
No       System    256  224.0.0.0/4                11  Bluetooth Network Connection
No       System    256  224.0.0.0/4                18  Wi-Fi
No       System    256  224.0.0.0/4                 6  Local Area Connection* 9
No       System    256  224.0.0.0/4                 2  Local Area Connection* 10
No       System    256  224.0.0.0/4                60  vEthernet (Default Switch)
No       System    256  224.0.0.0/4                23  Ethernet Kaspersky
No       System    256  255.255.255.255/32          1  Loopback Pseudo-Interface 1
No       System    256  255.255.255.255/32         11  Bluetooth Network Connection
No       System    256  255.255.255.255/32         18  Wi-Fi
No       System    256  255.255.255.255/32          6  Local Area Connection* 9
No       System    256  255.255.255.255/32          2  Local Area Connection* 10
No       System    256  255.255.255.255/32         60  vEthernet (Default Switch)
No       System    256  255.255.255.255/32         23  Ethernet Kaspersky


#############################################################
# Network adapters
PS C:\home\src\Scripts> Get-NetAdapter

## 4/13
Name                      InterfaceDescription                    ifIndex Status       MacAddress             LinkSpeed
----                      --------------------                    ------- ------       ----------             ---------
Ethernet Kaspersky        Kaspersky Security Data Escort Adapter       23 Disconnected 00-FF-F1-45-1B-15       100 Mbps
vEthernet (Default Switc… Hyper-V Virtual Ethernet Adapter             58 Up           00-15-5D-23-EC-74        10 Gbps
Wi-Fi                     TP-Link Wireless MU-MIMO USB Adapter         18 Up           98-48-27-E3-58-63       585 Mbps
Bluetooth Network Connec… Bluetooth Device (Personal Area Networ…      12 Disconnected 00-1A-7D-B2-10-86         3 Mbps
Ethernet                  Intel(R) Ethernet Connection (5) I219-…       8 Up           A4-BB-6D-D6-F4-75         1 Gbps
VirtualBox Host-Only Net… VirtualBox Host-Only Ethernet Adapter         4 Up           0A-00-27-00-00-04         1 Gbps

## 5/13
Name                      InterfaceDescription                    ifIndex Status       MacAddress             LinkSpeed
----                      --------------------                    ------- ------       ----------             ---------
Ethernet Kaspersky        Kaspersky Security Data Escort Adapter       23 Disconnected 00-FF-F1-45-1B-15       100 Mbps
vEthernet (Default Switc… Hyper-V Virtual Ethernet Adapter             60 Up           00-15-5D-23-EC-74        10 Gbps
Wi-Fi                     TP-Link Wireless MU-MIMO USB Adapter         18 Up           98-48-27-E3-58-63       585 Mbps
Bluetooth Network Connec… Bluetooth Device (Personal Area Networ…      11 Disconnected 00-1A-7D-B2-10-86         3 Mbps
Ethernet                  Intel(R) Ethernet Connection (5) I219-…       8 Up           A4-BB-6D-D6-F4-75         1 Gbps
VirtualBox Host-Only Net… VirtualBox Host-Only Ethernet Adapter         4 Not Present  0A-00-27-00-00-04          0 bps


######################################
# IP interfaces 

PS C:\Users\alexe> Get-NetIPAddress | ft ifIndex,InterfaceAlias,AddressState,IPAddress,PrefixLength,Type

ifIndex InterfaceAlias               AddressState IPAddress                   PrefixLength    Type
------- --------------               ------------ ---------                   ------------    ----
     60 vEthernet (Default Switch)      Preferred fe80::d58:1d89:448a:8df1%60           64 Unicast
      2 Local Area Connection* 10      Deprecated fe80::7d09:cbf0:948b:5275%2           64 Unicast
      6 Local Area Connection* 9       Deprecated fe80::fc19:4450:d531:6b58%6           64 Unicast
      1 Loopback Pseudo-Interface 1     Preferred ::1                                  128 Unicast
     23 Ethernet Kaspersky              Tentative 169.254.5.69                          16 Unicast
     60 vEthernet (Default Switch)      Preferred 172.21.32.1                           20 Unicast
      2 Local Area Connection* 10       Tentative 169.254.82.117                        16 Unicast
      6 Local Area Connection* 9        Tentative 169.254.107.88                        16 Unicast
     11 Bluetooth Network Connection    Tentative 169.254.214.20                        16 Unicast
     18 Wi-Fi                           Preferred 192.168.1.194                         24 Unicast
      1 Loopback Pseudo-Interface 1     Preferred 127.0.0.1                              8 Unicast

PS C:\Users\alexe> Get-NetIPConfiguration | ft InterfaceIndex,InterfaceAlias,AllIPAddresses,InterfaceDescription

InterfaceIndex InterfaceAlias               AllIPAddresses                             InterfaceDescription
-------------- --------------               --------------                             --------------------
            60 vEthernet (Default Switch)   {172.21.32.1, fe80::d58:1d89:448a:8df1%60} Hyper-V Virtual Ethernet Adapter
            18 Wi-Fi                        {192.168.1.194}                            TP-Link Wireless MU-MIMO USB Adapter
            23 Ethernet Kaspersky           {169.254.5.69}                             Kaspersky Security Data Escort Adapter
            11 Bluetooth Network Connection {169.254.214.20}                           Bluetooth Device (Personal Area Network)

PS C:\Users\alexe> Get-NetIPConfiguration | fl InterfaceIndex,InterfaceAlias,InterfaceDescription,DNSServer,NetProfile,IPv4DefaultGateway,IPv4Address,NetIPv4Interface,IPv6Address,IPv6LinkLocalAddress,IPv6DefaultGateway,NetIPv6Interface

InterfaceIndex       : 60
InterfaceAlias       : vEthernet (Default Switch)
InterfaceDescription : Hyper-V Virtual Ethernet Adapter
DNSServer            : {MSFT_DNSClientServerAddress (Name = "60", CreationClassName = "", SystemCreationClassName = "", SystemName = "23"), MSFT_DNSClientServerAddress (Name = "60", CreationClassName = "", SystemCreationClassName = "",
                       SystemName = "2")}
NetProfile           :
IPv4DefaultGateway   :
IPv4Address          : {172.21.32.1}
NetIPv4Interface     : MSFT_NetIPInterface (Name = "@:55?55;", CreationClassName = "", SystemCreationClassName = "", SystemName = "")
IPv6Address          : {}
IPv6LinkLocalAddress : {fe80::d58:1d89:448a:8df1%60}
IPv6DefaultGateway   :
NetIPv6Interface     : MSFT_NetIPInterface (Name = "@:55??55;", CreationClassName = "", SystemCreationClassName = "", SystemName = "")

InterfaceIndex       : 18
InterfaceAlias       : Wi-Fi
InterfaceDescription : TP-Link Wireless MU-MIMO USB Adapter
DNSServer            : {MSFT_DNSClientServerAddress (Name = "18", CreationClassName = "", SystemCreationClassName = "", SystemName = "23"), MSFT_DNSClientServerAddress (Name = "18", CreationClassName = "", SystemCreationClassName = "",
                       SystemName = "2")}
NetProfile           : MSFT_NetConnectionProfile (InstanceID = "{C04946AA-8065-44AB-A9FF-9313C06B53CE}")
IPv4DefaultGateway   : {MSFT_NetRoute (InstanceID = ":8:8:8:9:55;B55;C?8;@B8;8;55;")}
IPv4Address          : {192.168.1.194}
NetIPv4Interface     : MSFT_NetIPInterface (Name = ";B55?55;", CreationClassName = "", SystemCreationClassName = "", SystemName = "")
IPv6Address          : {}
IPv6LinkLocalAddress : {}
IPv6DefaultGateway   :
NetIPv6Interface     :

InterfaceIndex       : 23
InterfaceAlias       : Ethernet Kaspersky
InterfaceDescription : Kaspersky Security Data Escort Adapter
DNSServer            : {MSFT_DNSClientServerAddress (Name = "23", CreationClassName = "", SystemCreationClassName = "", SystemName = "23"), MSFT_DNSClientServerAddress (Name = "23", CreationClassName = "", SystemCreationClassName = "",
                       SystemName = "2")}
NetProfile           :
IPv4DefaultGateway   :
IPv4Address          : {169.254.5.69}
NetIPv4Interface     : MSFT_NetIPInterface (Name = "??55?55;", CreationClassName = "", SystemCreationClassName = "", SystemName = "")
IPv6Address          : {}
IPv6LinkLocalAddress : {}
IPv6DefaultGateway   :
NetIPv6Interface     :

InterfaceIndex       : 11
InterfaceAlias       : Bluetooth Network Connection
InterfaceDescription : Bluetooth Device (Personal Area Network)
DNSServer            : {MSFT_DNSClientServerAddress (Name = "11", CreationClassName = "", SystemCreationClassName = "", SystemName = "23"), MSFT_DNSClientServerAddress (Name = "11", CreationClassName = "", SystemCreationClassName = "",
                       SystemName = "2")}
NetProfile           :
IPv4DefaultGateway   :
IPv4Address          : {169.254.214.20}
NetIPv4Interface     : MSFT_NetIPInterface (Name = ";;55?55;", CreationClassName = "", SystemCreationClassName = "", SystemName = "")
IPv6Address          : {}
IPv6LinkLocalAddress : {}
IPv6DefaultGateway   :
NetIPv6Interface     :

#########################################
# Routes
# Get-NetRoute

PS C:\Users\alexe> Get-NetRoute

ifIndex DestinationPrefix                              NextHop                                  RouteMetric ifMetric PolicyStore
------- -----------------                              -------                                  ----------- -------- -----------
23      255.255.255.255/32                             0.0.0.0                                          256 35       ActiveStore
60      255.255.255.255/32                             0.0.0.0                                          256 5000     ActiveStore
2       255.255.255.255/32                             0.0.0.0                                          256 25       ActiveStore
6       255.255.255.255/32                             0.0.0.0                                          256 25       ActiveStore
18      255.255.255.255/32                             0.0.0.0                                          256 35       ActiveStore
11      255.255.255.255/32                             0.0.0.0                                          256 65       ActiveStore
1       255.255.255.255/32                             0.0.0.0                                          256 75       ActiveStore
23      224.0.0.0/4                                    0.0.0.0                                          256 35       ActiveStore
60      224.0.0.0/4                                    0.0.0.0                                          256 5000     ActiveStore
2       224.0.0.0/4                                    0.0.0.0                                          256 25       ActiveStore
6       224.0.0.0/4                                    0.0.0.0                                          256 25       ActiveStore
18      224.0.0.0/4                                    0.0.0.0                                          256 35       ActiveStore
11      224.0.0.0/4                                    0.0.0.0                                          256 65       ActiveStore
1       224.0.0.0/4                                    0.0.0.0                                          256 75       ActiveStore
18      192.168.1.255/32                               0.0.0.0                                          256 35       ActiveStore
18      192.168.1.194/32                               0.0.0.0                                          256 35       ActiveStore
18      192.168.1.0/24                                 0.0.0.0                                          256 35       ActiveStore
60      172.21.47.255/32                               0.0.0.0                                          256 5000     ActiveStore
60      172.21.32.1/32                                 0.0.0.0                                          256 5000     ActiveStore
60      172.21.32.0/20                                 0.0.0.0                                          256 5000     ActiveStore
1       127.255.255.255/32                             0.0.0.0                                          256 75       ActiveStore
1       127.0.0.1/32                                   0.0.0.0                                          256 75       ActiveStore
1       127.0.0.0/8                                    0.0.0.0                                          256 75       ActiveStore
18      0.0.0.0/0                                      192.168.1.1                                        0 35       ActiveStore
60      ff00::/8                                       ::                                               256 5000     ActiveStore
2       ff00::/8                                       ::                                               256 25       ActiveStore
6       ff00::/8                                       ::                                               256 25       ActiveStore
1       ff00::/8                                       ::                                               256 75       ActiveStore
60      fe80::d58:1d89:448a:8df1/128                   ::                                               256 5000     ActiveStore
60      fe80::/64                                      ::                                               256 5000     ActiveStore
1       ::1/128                                        ::                                               256 75       ActiveStore

#
Remove-NetRoute -InterfaceIndex 2,6

#########################################
#  neighbor cache entries
# Get-NetNeighbor

PS C:\Users\alexe> Get-NetNeighbor

ifIndex IPAddress                                          LinkLayerAddress      State       PolicyStore
------- ---------                                          ----------------      -----       -----------
60      ff02::1:ff8a:8df1                                  33-33-FF-8A-8D-F1     Permanent   ActiveStore
60      ff02::1:3                                          33-33-00-01-00-03     Permanent   ActiveStore
60      ff02::1:2                                          33-33-00-01-00-02     Permanent   ActiveStore
60      ff02::fb                                           33-33-00-00-00-FB     Permanent   ActiveStore
60      ff02::16                                           33-33-00-00-00-16     Permanent   ActiveStore
60      ff02::c                                            33-33-00-00-00-0C     Permanent   ActiveStore
60      ff02::2                                            33-33-00-00-00-02     Permanent   ActiveStore
60      ff02::1                                            33-33-00-00-00-01     Permanent   ActiveStore
60      fe80::d58:1d89:448a:8df1                           00-00-00-00-00-00     Unreachable ActiveStore
2       ff02::1:3                                          33-33-00-01-00-03     Permanent   ActiveStore
2       ff02::1:2                                          33-33-00-01-00-02     Permanent   ActiveStore
2       ff02::fb                                           33-33-00-00-00-FB     Permanent   ActiveStore
2       ff02::16                                           33-33-00-00-00-16     Permanent   ActiveStore
2       fe80::d58:1d89:448a:8df1                           00-00-00-00-00-00     Unreachable ActiveStore
6       ff02::1:3                                          33-33-00-01-00-03     Permanent   ActiveStore
6       ff02::1:2                                          33-33-00-01-00-02     Permanent   ActiveStore
6       ff02::fb                                           33-33-00-00-00-FB     Permanent   ActiveStore
6       ff02::16                                           33-33-00-00-00-16     Permanent   ActiveStore
6       fe80::d58:1d89:448a:8df1                           00-00-00-00-00-00     Unreachable ActiveStore
1       ff02::1:3                                                                Permanent   ActiveStore
1       ff02::1:2                                                                Permanent   ActiveStore
1       ff02::fb                                                                 Permanent   ActiveStore
1       ff02::16                                                                 Permanent   ActiveStore
1       ff02::c                                                                  Permanent   ActiveStore
23      224.0.0.252                                        01-00-5E-00-00-FC     Permanent   ActiveStore
23      224.0.0.251                                        01-00-5E-00-00-FB     Permanent   ActiveStore
23      224.0.0.22                                         01-00-5E-00-00-16     Permanent   ActiveStore
60      255.255.255.255                                    FF-FF-FF-FF-FF-FF     Permanent   ActiveStore
60      239.255.255.250                                    01-00-5E-7F-FF-FA     Permanent   ActiveStore
60      224.0.0.252                                        01-00-5E-00-00-FC     Permanent   ActiveStore
60      224.0.0.251                                        01-00-5E-00-00-FB     Permanent   ActiveStore
60      224.0.0.22                                         01-00-5E-00-00-16     Permanent   ActiveStore
60      172.21.47.255                                      FF-FF-FF-FF-FF-FF     Permanent   ActiveStore
60      172.21.32.1                                        00-00-00-00-00-00     Unreachable ActiveStore
2       224.0.0.252                                        01-00-5E-00-00-FC     Permanent   ActiveStore
2       224.0.0.251                                        01-00-5E-00-00-FB     Permanent   ActiveStore
2       224.0.0.22                                         01-00-5E-00-00-16     Permanent   ActiveStore
6       224.0.0.252                                        01-00-5E-00-00-FC     Permanent   ActiveStore
6       224.0.0.251                                        01-00-5E-00-00-FB     Permanent   ActiveStore
6       224.0.0.22                                         01-00-5E-00-00-16     Permanent   ActiveStore
11      224.0.0.252                                        01-00-5E-00-00-FC     Permanent   ActiveStore
11      224.0.0.251                                        01-00-5E-00-00-FB     Permanent   ActiveStore
11      224.0.0.22                                         01-00-5E-00-00-16     Permanent   ActiveStore
18      255.255.255.255                                    FF-FF-FF-FF-FF-FF     Permanent   ActiveStore
18      239.255.255.250                                    01-00-5E-7F-FF-FA     Permanent   ActiveStore
18      224.0.0.252                                        01-00-5E-00-00-FC     Permanent   ActiveStore
18      224.0.0.251                                        01-00-5E-00-00-FB     Permanent   ActiveStore
18      224.0.0.22                                         01-00-5E-00-00-16     Permanent   ActiveStore
18      192.168.1.255                                      FF-FF-FF-FF-FF-FF     Permanent   ActiveStore
18      192.168.1.230                                      B0-60-88-D9-C5-56     Stale       ActiveStore
18      192.168.1.208                                      B0-52-16-CE-BE-F7     Stale       ActiveStore
18      192.168.1.206                                      00-00-00-00-00-00     Unreachable ActiveStore
18      192.168.1.205                                      00-90-A9-6B-58-66     Reachable   ActiveStore
18      192.168.1.187                                      00-00-00-00-00-00     Unreachable ActiveStore
18      192.168.1.92                                       00-15-5D-01-58-13     Stale       ActiveStore
18      192.168.1.1                                        48-5D-36-22-B4-74     Reachable   ActiveStore
1       239.255.255.250                                                          Permanent   ActiveStore
1       224.0.0.252                                                              Permanent   ActiveStore
1       224.0.0.251                                                              Permanent   ActiveStore
1       224.0.0.22                                                               Permanent   ActiveStore

##
Remove-NetNeighbor -State Unreachable
Remove-NetNeighbor -InterfaceIndex 2,6

## FirewWall
netsh advfirewall show currentprofile
Get-NetFirewallProfile
Name                            : Domain
Enabled                         : True
DefaultInboundAction            : NotConfigured
DefaultOutboundAction           : NotConfigured
AllowInboundRules               : NotConfigured
AllowLocalFirewallRules         : NotConfigured
AllowLocalIPsecRules            : NotConfigured
AllowUserApps                   : NotConfigured
AllowUserPorts                  : NotConfigured
AllowUnicastResponseToMulticast : NotConfigured
NotifyOnListen                  : True
EnableStealthModeForIPsec       : NotConfigured
LogFileName                     : %systemroot%\system32\LogFiles\Firewall\pfirewall.log
LogMaxSizeKilobytes             : 4096
LogAllowed                      : False
LogBlocked                      : False
LogIgnored                      : NotConfigured
DisabledInterfaceAliases        : {NotConfigured}

Name                            : Private
Enabled                         : True
DefaultInboundAction            : NotConfigured
DefaultOutboundAction           : NotConfigured
AllowInboundRules               : NotConfigured
AllowLocalFirewallRules         : NotConfigured
AllowLocalIPsecRules            : NotConfigured
AllowUserApps                   : NotConfigured
AllowUserPorts                  : NotConfigured
AllowUnicastResponseToMulticast : NotConfigured
NotifyOnListen                  : True
EnableStealthModeForIPsec       : NotConfigured
LogFileName                     : %systemroot%\system32\LogFiles\Firewall\pfirewall.log
LogMaxSizeKilobytes             : 4096
LogAllowed                      : False
LogBlocked                      : False
LogIgnored                      : NotConfigured
DisabledInterfaceAliases        : {NotConfigured}

Name                            : Public
Enabled                         : True
DefaultInboundAction            : NotConfigured
DefaultOutboundAction           : NotConfigured
AllowInboundRules               : NotConfigured
AllowLocalFirewallRules         : NotConfigured
AllowLocalIPsecRules            : NotConfigured
AllowUserApps                   : NotConfigured
AllowUserPorts                  : NotConfigured
AllowUnicastResponseToMulticast : NotConfigured
NotifyOnListen                  : True
EnableStealthModeForIPsec       : NotConfigured
LogFileName                     : %systemroot%\system32\LogFiles\Firewall\pfirewall.log
LogMaxSizeKilobytes             : 4096
LogAllowed                      : False
LogBlocked                      : False
LogIgnored                      : NotConfigured
DisabledInterfaceAliases        : {NotConfigured}


######################
# System Info by C:\WINDOWS\System32\Wbem\WMIC.exe
######
PS C:\home\src>  Wmic qfe
Caption                                     CSName   Description      FixComments  HotFixID   InstallDate  InstalledBy          InstalledOn  Name  ServicePackInEffect  Status
http://support.microsoft.com/?kbid=5020875  WIN11-2  Update                        KB5020875               NT AUTHORITY\SYSTEM  12/16/2022
https://support.microsoft.com/help/5012170  WIN11-2  Security Update               KB5012170               NT AUTHORITY\SYSTEM  8/9/2022
https://support.microsoft.com/help/5019274  WIN11-2  Update                        KB5019274               NT AUTHORITY\SYSTEM  2/10/2023
                                            WIN11-2  Update                        KB5019385               NT AUTHORITY\SYSTEM  11/22/2022
											
PS C:\home\src> Wmic computersystem get manufacturer
Manufacturer
Dell Inc.

######################
# System Info by C:\WINDOWS\system32\net.exe
######
S C:\home\src> Net localgroup administrators
Alias name     administrators
Comment        Administrators have complete and unrestricted access to the computer/domain

Members

-------------------------------------------------------------------------------
Administrator
alexe
The command completed successfully.

PS C:\home\src> Net users

User accounts for \\WIN11-2

-------------------------------------------------------------------------------
Administrator            alexe                    DefaultAccount
evt20                    Guest                    kirae
nikit                    WDAGUtilityAccount       yanae
The command completed successfully.


$active_conn=Get-NetTcpConnection | ?{$_.state -eq "Established"}; $active_conn
PS C:\home\src> $active_conn=Get-NetTcpConnection | ?{$_.state -eq "Established"}; $active_conn

LocalAddress                        LocalPort RemoteAddress                       RemotePort State       AppliedSetting OwningProcess
------------                        --------- -------------                       ---------- -----       -------------- -------------
192.168.1.88                        60534     142.251.40.138                      443        Established Internet       15484
192.168.1.88                        60533     1.0.0.1                             443        Established Internet       2424
192.168.1.88                        60336     66.110.49.114                       443        Established Internet       5260
192.168.1.88                        59531     140.82.114.25                       443        Established Internet       15484
127.0.0.1                           59394     127.0.0.1                           59393      Established Internet       10940
127.0.0.1                           59393     127.0.0.1                           59394      Established Internet       10940
127.0.0.1                           59392     127.0.0.1                           59391      Established Internet       15484
127.0.0.1                           59391     127.0.0.1                           59392      Established Internet       15484
192.168.1.88                        58276     192.168.1.205                       445        Established Internet       4
192.168.1.88                        57090     54.213.151.148                      443        Established Internet       15484
192.168.1.215                       56901     192.168.1.33                        32400      Established Internet       9800
192.168.1.215                       56899     172.104.213.223                     443        Established Internet       9800
192.168.1.88                        56262     204.79.197.200                      443        Established Internet       10036
192.168.1.88                        56261     204.79.197.200                      443        Established Internet       10036
192.168.1.88                        56260     204.79.197.200                      443        Established Internet       10036
192.168.1.88                        56259     204.79.197.200                      443        Established Internet       10036
192.168.1.88                        56258     204.79.197.200                      443        Established Internet       10036
192.168.1.88                        56257     204.79.197.200                      443        Established Internet       10036
192.168.1.88                        56250     72.21.91.29                         80         Established Internet       10036
192.168.1.88                        52333     82.202.185.202                      443        Established Internet       5260
127.0.0.1                           52332     127.0.0.1                           52331      Established Internet       5260
127.0.0.1                           52331     127.0.0.1                           52332      Established Internet       5260
127.0.0.1                           52228     127.0.0.1                           52227      Established Internet       14872
127.0.0.1                           52227     127.0.0.1                           52228      Established Internet       14872
127.0.0.1                           52190     127.0.0.1                           52189      Established Internet       5260
127.0.0.1                           52189     127.0.0.1                           52190      Established Internet       5260
127.0.0.1                           52101     127.0.0.1                           52100      Established Internet       5260
127.0.0.1                           52100     127.0.0.1                           52101      Established Internet       5260



#########################################
# Applications 05-13-2022
PS C:\Users\alexe> wmic product get name,version,vendor
Name                                                            Vendor                       Version
WinRT Intellisense IoT - en-us                                  Microsoft Corporation        10.1.22000.194
Windows SDK Modern Versioned Developer Tools                    Microsoft Corporation        10.1.22000.194
Universal CRT Tools x64                                         Microsoft Corporation        10.1.22000.194
Intel(R) Management Engine Components                           Intel Corporation            1.0.0.0
MSI Development Tools                                           Microsoft Corporation        10.1.22000.194
Windows Mobile Extension SDK Contracts                          Microsoft Corporation        10.1.22000.194
Microsoft VC++ redistributables repacked.                       Intel Corporation            12.0.0.0
Windows IP Over USB                                             Microsoft Corporation        10.1.22000.194
Microsoft .NET Framework 4.8 Targeting Pack                     Microsoft Corporation        4.8.03761
WinRT Intellisense IoT - Other Languages                        Microsoft Corporation        10.1.22000.194
Microsoft Visual C++ 2013 x86 Minimum Runtime - 12.0.21005      Microsoft Corporation        12.0.21005
Microsoft Visual C++ 2013 x86 Additional Runtime - 12.0.21005   Microsoft Corporation        12.0.21005
WPTx64 (DesktopEditions)                                        Microsoft                    10.1.22000.194
Universal CRT Redistributable                                   Microsoft Corporation        10.1.22000.194
Microsoft Visual C++ 2019 X64 Minimum Runtime - 14.29.30139     Microsoft Corporation        14.29.30139
Microsoft Visual C++ 2019 X64 Additional Runtime - 14.29.30139  Microsoft Corporation        14.29.30139
SDK Debuggers                                                   Microsoft Corporation        10.1.22000.194
Windows SDK Desktop Libs arm64                                  Microsoft Corporation        10.1.22000.194
Maxx Audio Installer (x64)                                      Waves Audio Ltd.             2.7.13058.0
WinRT Intellisense PPI - Other Languages                        Microsoft Corporation        10.1.22000.194
Epic Online Services                                            Epic Games, Inc.             2.0.33.0
Windows SDK Desktop Tools arm64                                 Microsoft Corporation        10.1.22000.194
Realtek Audio COM Components                                    Realtek Semiconductor Corp.  1.0.2
Windows Team Extension SDK Contracts                            Microsoft Corporation        10.1.22000.194
Windows SDK DirectX x64 Remote                                  Microsoft Corporation        10.1.22000.194
Application Verifier x64 External Package                       Microsoft                    10.1.22000.194
WinRT Intellisense UAP - en-us                                  Microsoft Corporation        10.1.22000.194
Windows SDK Desktop Headers x64                                 Microsoft Corporation        10.1.22000.194
Windows SDK Desktop Headers arm                                 Microsoft Corporation        10.1.22000.194
Windows App Certification Kit x64                               Microsoft Corporation        10.1.22000.194
Universal General MIDI DLS Extension SDK                        Microsoft Corporation        10.1.22000.194
Windows SDK Facade Windows WinMD Versioned                      Microsoft Corporation        10.1.22000.194
Universal CRT Tools x86                                         Microsoft Corporation        10.1.22000.194
Intel(R) Management Engine Components                           Intel Corporation            1.0.0.0
Windows SDK EULA                                                Microsoft Corporations       10.1.22000.194
Windows IoT Extension SDK                                       Microsoft Corporation        10.1.22000.194
Windows Mobile Extension SDK                                    Microsoft Corporation        10.1.22000.194
Windows Subsystem for Linux WSLg Preview                        Microsoft Corporation        1.0.26
Intel(R) Trusted Connect Service Client x86                     Intel Corporation            1.63.1155.1
Intel(R) Trusted Connect Service Client x64                     Intel Corporation            1.63.1155.1
WinRT Intellisense Desktop - en-us                              Microsoft Corporation        10.1.22000.194
Microsoft .NET Framework 4.8 SDK                                Microsoft Corporation        4.8.03928
Universal CRT Headers Libraries and Sources                     Microsoft Corporation        10.1.22000.194
Windows SDK for Windows Store Apps DirectX x86 Remote           Microsoft Corporation        10.1.22000.194
Microsoft Update Health Tools                                   Microsoft Corporation        4.67.0.0
Microsoft VC++ redistributables repacked.                       Intel Corporation            12.0.0.0
WPTx64 (OnecoreUAP)                                             Microsoft                    10.1.22000.194
Microsoft Visual C++ 2019 X86 Additional Runtime - 14.24.28127  Microsoft Corporation        14.24.28127
Epic Games Launcher                                             Epic Games, Inc.             1.3.23.0
Windows Subsystem for Linux Update                              Microsoft Corporation        5.10.102.1
Windows SDK                                                     Microsoft Corporation        10.1.22000.194
Windows Team Extension SDK                                      Microsoft Corporation        10.1.22000.194
Windows SDK Desktop Headers x86                                 Microsoft Corporation        10.1.22000.194
Mozilla VPN                                                     Mozilla Corporation          2.8.0.0
WPT Redistributables                                            Microsoft                    10.1.22000.194
Windows SDK for Windows Store Apps                              Microsoft Corporation        10.1.22000.194
WinRT Intellisense UAP - Other Languages                        Microsoft Corporation        10.1.22000.194
Intel(R) Management Engine Driver                               Intel Corporation            1.0.0.0
Kaspersky VPN                                                   Kaspersky                    21.3.10.391
Kits Configuration Installer                                    Microsoft                    10.1.22000.194
Oracle VM VirtualBox 6.1.34                                     Oracle Corporation           6.1.34
Kaspersky Total Security                                        Kaspersky                    21.3.10.391
WinRT Intellisense Mobile - en-us                               Microsoft Corporation        10.1.22000.194
Windows SDK for Windows Store Apps Metadata                     Microsoft Corporation        10.1.22000.194
Windows SDK Desktop Headers arm64                               Microsoft Corporation        10.1.22000.194
Windows SDK for Windows Store Apps Contracts                    Microsoft Corporation        10.1.22000.194
Windows SDK for Windows Store Apps Headers                      Microsoft Corporation        10.1.22000.194
Windows Desktop Extension SDK Contracts                         Microsoft Corporation        10.1.22000.194
Windows SDK for Windows Store Apps Libs                         Microsoft Corporation        10.1.22000.194
Windows SDK for Windows Store Managed Apps Libs                 Microsoft Corporation        10.1.22000.194
SDK ARM Additions                                               Microsoft Corporation        10.1.22000.194
DTrace for Windows                                              Microsoft Corporation        1.1.0
Windows SDK Desktop Libs x86                                    Microsoft Corporation        10.1.22000.194
Windows Desktop Extension SDK                                   Microsoft Corporation        10.1.22000.194
Windows SDK Desktop Libs x64                                    Microsoft Corporation        10.1.22000.194
WinRT Intellisense PPI - en-us                                  Microsoft Corporation        10.1.22000.194
WinRT Intellisense Desktop - Other Languages                    Microsoft Corporation        10.1.22000.194
Windows SDK AddOn                                               Microsoft Corporation        10.1.0.0
WinAppDeploy                                                    Microsoft Corporation        10.1.22000.194
Windows SDK DirectX x86 Remote                                  Microsoft Corporation        10.1.22000.194
Windows SDK for Windows Store Apps Tools                        Microsoft Corporation        10.1.22000.194
Windows SDK Desktop Tools x86                                   Microsoft Corporation        10.1.22000.194
Windows App Certification Kit SupportedApiList x86              Microsoft Corporation        10.1.22000.194
Windows SDK Desktop Libs arm                                    Microsoft Corporation        10.1.22000.194
Kaspersky Password Manager                                      Kaspersky Lab                9.0.2.767
UE Prerequisites (x64)                                          Epic Games, Inc.             1.0.14.0
Universal CRT Extension SDK                                     Microsoft Corporation        10.1.22000.194
Windows IoT Extension SDK Contracts                             Microsoft Corporation        10.1.22000.194
Windows SDK Signing Tools                                       Microsoft Corporation        10.1.22000.194
Windows SDK Desktop Tools x64                                   Microsoft Corporation        10.1.22000.194
Windows SDK ARM Desktop Tools                                   Microsoft Corporation        10.1.22000.194
Windows SDK Modern Non-Versioned Developer Tools                Microsoft Corporation        10.1.22000.194
Windows App Certification Kit Native Components                 Microsoft Corporation        10.1.22000.194
Microsoft Visual C++ 2019 X86 Minimum Runtime - 14.24.28127     Microsoft Corporation        14.24.28127
PowerShell 7-x64                                                Microsoft Corporation        7.2.3.0
SDK ARM Redistributables                                        Microsoft Corporation        10.1.22000.194
Windows SDK Redistributables                                    Microsoft Corporation        10.1.22000.194

#############################
##################################
# pipe processing

<#
Get-Objects "test param1","test param2"

Index InputObject InputObject BaseType
----- ----------- --------------------
    1 test param1 System.Object
    2 test param2 System.Object
"test pipe1","test pipe2" | Get-Objects
    1 test pipe1  System.Object
    2 test pipe2  System.Object
"test pipe1","test pipe2" | Get-Objects "test param1","test param2"
    1 test param1 System.Object
    2 test param2 System.Object
    1 test pipe1  System.Object
    2 test pipe2  System.Object
#>
function Get-Objects() {
	begin {
		if ($args.count) {
			$args.GetEnumerator() | % { $_ | Get-Objects } 	
		}
	}
	process {
		$input |  ForEach {
			$private:Index++
			[PSCustomObject]@{'Index' = $private:Index; 'InputObject' = $_; 'InputObject BaseType' = $_.GetType().BaseType }
		}
	}
}
